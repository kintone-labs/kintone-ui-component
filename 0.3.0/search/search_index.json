{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Quick start QuickStart Javascript QuickStart React References Alert Attachment Button CheckBox ColorPicker DateTime Dialog Dropdown FieldGroup IconButton Label MultipleChoice NotifyPopup RadioButton Spinner Table Tabs Text TextArea","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#quick-start","text":"QuickStart Javascript QuickStart React","title":"Quick start"},{"location":"#references","text":"Alert Attachment Button CheckBox ColorPicker DateTime Dialog Dropdown FieldGroup IconButton Label MultipleChoice NotifyPopup RadioButton Spinner Table Tabs Text TextArea","title":"References"},{"location":"Getting-Started/QuickStart-Javascript/","text":"QuickStart Javascript Create a customization Attach 2 below files from './dist' folder in kintone-ui-component into kintone app ./dist/kintone-ui-component.min.js ./dist/kintone-ui-component.min.css Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); var button = new kintoneUIComponent.Button({ text: 'Submit' }); kintoneSpaceElement.appendChild(button.render()); button.on('click', function(){ alert('This is my customization'); }) }); })(); Attach index.js file into kintone app setting","title":"QuickStart Javascript"},{"location":"Getting-Started/QuickStart-Javascript/#quickstart-javascript","text":"","title":"QuickStart Javascript"},{"location":"Getting-Started/QuickStart-Javascript/#create-a-customization","text":"Attach 2 below files from './dist' folder in kintone-ui-component into kintone app ./dist/kintone-ui-component.min.js ./dist/kintone-ui-component.min.css Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); var button = new kintoneUIComponent.Button({ text: 'Submit' }); kintoneSpaceElement.appendChild(button.render()); button.on('click', function(){ alert('This is my customization'); }) }); })(); Attach index.js file into kintone app setting","title":"Create a customization"},{"location":"Getting-Started/QuickStart-React/","text":"QuickStart React Requirement Nodejs Git Create a customization Step 1: Run commands $ npm install -g create-react-app $ create-react-app my-customization $ cd my-customization $ npm install cross-env babel-preset-stage-0 css-loader style-loader webpack-cli $ npm install uglifyjs-webpack-plugin --save-dev $ npm install @kintone/kintone-ui-component $ rm -f src/* Step 2: Add index.js file to src/ folder: import React, { Component } from 'react'; import ReactDOM from 'react-dom'; import {Button} from '@kintone/kintone-ui-component'; class MyCustomization extends Component { constructor(props) { super(props); } render() { return ( <Button text='Submit' type='success' onClick={function() {alert('This is my customization');}}/> ); } } // Adding your customization into header space of kintone app kintone.events.on(\"app.record.index.show\", function(ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); ReactDOM.render(<MyCustomization />, kintoneSpaceElement); }); Step 3: Add webpack.config.js file to my-customization/ folder const path = require('path'); const UglifyJsPlugin = require('uglifyjs-webpack-plugin'); module.exports = (env = {}) => { return { entry: { \"my-customization.min\": './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { presets: ['react-app','@babel/preset-env'], plugins: [\"transform-class-properties\"] } } }, { test: /\\.css$/, use: [ { loader: \"style-loader\" }, { loader: \"css-loader\" } ] } ] }, watch: env.watch, optimization: { minimizer: [ new UglifyJsPlugin({ include: /\\.min\\.js$/, }) ] } } } Step 4: Add a script to buiding by webpack to package.json \"scripts\": { \"build-webpack\": \"cross-env NODE_ENV=production webpack\", ... } Run command to build customization file $ npm run build-webpack result: * ./dist/my-customization.min.js Attach my-customization.min.js into kintone app setting","title":"QuickStart React"},{"location":"Getting-Started/QuickStart-React/#quickstart-react","text":"","title":"QuickStart React"},{"location":"Getting-Started/QuickStart-React/#requirement","text":"Nodejs Git","title":"Requirement"},{"location":"Getting-Started/QuickStart-React/#create-a-customization","text":"Step 1: Run commands $ npm install -g create-react-app $ create-react-app my-customization $ cd my-customization $ npm install cross-env babel-preset-stage-0 css-loader style-loader webpack-cli $ npm install uglifyjs-webpack-plugin --save-dev $ npm install @kintone/kintone-ui-component $ rm -f src/* Step 2: Add index.js file to src/ folder: import React, { Component } from 'react'; import ReactDOM from 'react-dom'; import {Button} from '@kintone/kintone-ui-component'; class MyCustomization extends Component { constructor(props) { super(props); } render() { return ( <Button text='Submit' type='success' onClick={function() {alert('This is my customization');}}/> ); } } // Adding your customization into header space of kintone app kintone.events.on(\"app.record.index.show\", function(ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); ReactDOM.render(<MyCustomization />, kintoneSpaceElement); }); Step 3: Add webpack.config.js file to my-customization/ folder const path = require('path'); const UglifyJsPlugin = require('uglifyjs-webpack-plugin'); module.exports = (env = {}) => { return { entry: { \"my-customization.min\": './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { presets: ['react-app','@babel/preset-env'], plugins: [\"transform-class-properties\"] } } }, { test: /\\.css$/, use: [ { loader: \"style-loader\" }, { loader: \"css-loader\" } ] } ] }, watch: env.watch, optimization: { minimizer: [ new UglifyJsPlugin({ include: /\\.min\\.js$/, }) ] } } } Step 4: Add a script to buiding by webpack to package.json \"scripts\": { \"build-webpack\": \"cross-env NODE_ENV=production webpack\", ... } Run command to build customization file $ npm run build-webpack result: * ./dist/my-customization.min.js Attach my-customization.min.js into kintone app setting","title":"Create a customization"},{"location":"Reference/Alert/","text":"Alert Overview Number Description 1 Success alert 2 Error alert 3 Display text Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String Yes The content of alert. options.type String No The type of alert: 'error' 'success' Default value is 'error'. options.isDisabled Boolean No The alert will be disabled. Default value: 'false' options.isVisible Boolean No The alert will be visible. Default value: 'true' Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); React import { Alert} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } setText(text) Set the content of alert. Parameter Name Type Required Description text String Yes The content of alert. If text is undefined, null or true, The alert will be displayed blank. Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setText('Network error'); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } setType(type) Set the type of alert. Parameter Name Type Required Description type String No The type of alert. \"success\": success alert. \"error\": error alert Default value is \"error\". Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setType('success'); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } on(eventName, callBack) The callBack function will be execute after user click the alert. Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.on('click', function(event) { console.log('on click'); }); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' onClick={this.handleClick}/> ); } handleClick(){ console.log('click'); } } show() Display the Alert. Parameter None Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.show(); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isVisible={true}/> ); } } hide() Hide the Alert. Parameter None Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.hide(); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isVisible={false}/> ); } } disable() Disable the Alert. Parameter None Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.disable(); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isDisabled={true}/> ); } } enable() Enable the Alert. Parameter None Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.enable(); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isDisabled={false}/> ); } }","title":"Alert"},{"location":"Reference/Alert/#alert","text":"","title":"Alert"},{"location":"Reference/Alert/#overview","text":"Number Description 1 Success alert 2 Error alert 3 Display text","title":"Overview"},{"location":"Reference/Alert/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String Yes The content of alert. options.type String No The type of alert: 'error' 'success' Default value is 'error'. options.isDisabled Boolean No The alert will be disabled. Default value: 'false' options.isVisible Boolean No The alert will be visible. Default value: 'true' Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } }","title":"Constructor"},{"location":"Reference/Alert/#methods","text":"","title":"Methods"},{"location":"Reference/Alert/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); React import { Alert} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } }","title":"render()"},{"location":"Reference/Alert/#settexttext","text":"Set the content of alert. Parameter Name Type Required Description text String Yes The content of alert. If text is undefined, null or true, The alert will be displayed blank. Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setText('Network error'); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } }","title":"setText(text)"},{"location":"Reference/Alert/#settypetype","text":"Set the type of alert. Parameter Name Type Required Description type String No The type of alert. \"success\": success alert. \"error\": error alert Default value is \"error\". Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setType('success'); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } }","title":"setType(type)"},{"location":"Reference/Alert/#oneventname-callback","text":"The callBack function will be execute after user click the alert. Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.on('click', function(event) { console.log('on click'); }); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' onClick={this.handleClick}/> ); } handleClick(){ console.log('click'); } }","title":"on(eventName, callBack)"},{"location":"Reference/Alert/#show","text":"Display the Alert. Parameter None Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.show(); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isVisible={true}/> ); } }","title":"show()"},{"location":"Reference/Alert/#hide","text":"Hide the Alert. Parameter None Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.hide(); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isVisible={false}/> ); } }","title":"hide()"},{"location":"Reference/Alert/#disable","text":"Disable the Alert. Parameter None Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.disable(); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isDisabled={true}/> ); } }","title":"disable()"},{"location":"Reference/Alert/#enable","text":"Enable the Alert. Parameter None Returns None Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.enable(); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isDisabled={false}/> ); } }","title":"enable()"},{"location":"Reference/Attachment/","text":"Attachment Overview Number Description 1 \"X\" button to remove the related file 2 File name If the length is too long, it will show like \"xxx...\" 3 File size If the length is too long, it will show like \"xxx...\" There are 4 types to show the size. 1. size >= 1073741824 : xxx GB 2. 1073741824 > size >= 1048576 : xxx MB 3. 1048576 > size >= 1024 : xxx KB 4. 1024 > size : xxx bytes 4 Link to show \"file select\" pop-up box 5 Text to show file limit message 6 Error message 7 Drag drop zone Constructor Parameter Name Type Required Description options Object No An object contains params of constructor. options.dropZoneText String No Text will show when the file is dragged over the attachment field. (item 7) Default value: 'Drop files here.' options.browseButtonText String No Text of the browse button. (item 4) Default value: 'Browse' options.fileLimitText String No Text of the file limit warn part. (item 5) options.errorMessage String No Error message (item 6) options.isErrorVisible Boolean No Only when it is true , \"errorMessage\" will show. Default value: false options.files Array<Object> No File objects (ref. https://developer.mozilla.org/en-US/docs/Web/API/File ) Or objects contain \"name\" and \"size\" options.files[].name String No The file name options.files[].size String No The file size options.isVisible Boolean No The attachment component will be visible. Default value: true Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return (<Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} />); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return (<Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} />); } } setFiles(files) Set the files of attachment field. Parameter Name Type Required Description files Array<Object> Yes File objects (ref. https://developer.mozilla.org/en-US/docs/Web/API/File ) Or objects contain \"name\" and \"size\" files[].name String No The file name files[].size String No The file size Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); const button = new kintoneUIComponent.Button({text: 'Set Files'}); body.appendChild(button.render()); button.on('click', () => { attachment.setFiles([{name: 'test_1', size: 12345}]); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; handleClick = () => { this.setState({files: [{name: 'test_1', size: 12345}]}); }; render() { return ( <div> <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={this.handleClick}>Set Files</button> </div> ); } } getFiles() Get all files information of attachment field. Parameter None Returns Name Type Description files Array<Object> List of all file objects in the attachment field Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); body.appendChild(attachment.render()); const button = new kintoneUIComponent.Button({text: 'Get Files'}); body.appendChild(button.render()); button.on('click', () => { console.log('files:', attachment.getFiles()); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; handleClick = () => { console.log('files:', this.state.files); }; render() { return ( <div> <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={this.handleClick}>Get Files</button> </div> ); } } setDropZoneText(dropZoneText) Set the text of the drop zone Parameter Name Type Required Description dropZoneText String Yes Text will show when the file is dragged over the attachment field. Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setDropZoneText('Drop files here.'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} dropZoneText=\"Drop files here.\" onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } setBrowseButtonText(browseButtonText) Set the text of the browse button Parameter Name Type Required Description browseButtonText String Yes Text of the browse button Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setBrowseButtonText('Browse'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} browseButtonText=\"Browse\" onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } setFileLimitText(fileLimitText) Set the text of the file limit warn part. Parameter Name Type Required Description fileLimitText String Yes Text of the file limit warn part Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setFileLimitText('Maximum: 1 GB'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} fileLimitText=\"Maximum: 1 GB\" onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } setErrorMessage(errorMessage) Set the error message. Parameter Name Type Required Description errorMessage String Yes Error message Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setErrorMessage('Error message'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} errorMessage=\"Error message\" onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } showError() Show the error message Parameter None Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({errorMessage: 'Error message'}); body.appendChild(attachment.render()); const showButton = new kintoneUIComponent.Button({text: 'Show Error'}); body.appendChild(showButton.render()); showButton.on('click', () => { attachment.showError(); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} errorMessage=\"Error message\" isErrorVisible={true} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } hideError() Hide the error message Parameter None Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({errorMessage: 'Error message'}); body.appendChild(attachment.render()); const showButton = new kintoneUIComponent.Button({text: 'Show Error'}); body.appendChild(showButton.render()); showButton.on('click', () => { attachment.showError(); }); const hideButton = new kintoneUIComponent.Button({text: 'Hide Error'}); body.appendChild(hideButton.render()); hideButton.on('click', () => { attachment.hideError(); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} errorMessage=\"Error message\" isErrorVisible={false} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'filesAdd' 'fileRemove' callback Function Yes callback Returns Callback data Event Name Type Description filesAdd files Array<Object> List of all file objects that are displayed in the attachment field after files are added. fileRemove files Array<Object> List of all file objects that are displayed in the attachment field after a file is removed. Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.on('filesAdd', (files) => { console.log('files:', files); }); attachment.on('fileRemove', (files) => { console.log('files:', files); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); console.log('files:', files); }; handleFileRemove = (files) => { this.setState({files}); console.log('files:', files); }; render() { return ( <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } show() Display the attachment component. Parameter None Returns None Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); attachment.show(); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} isVisible={true} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } hide() Hide the the attachment component.. Parameter None Returns None Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); attachment.hide(); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} isVisible={false} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"Attachment"},{"location":"Reference/Attachment/#attachment","text":"","title":"Attachment"},{"location":"Reference/Attachment/#overview","text":"Number Description 1 \"X\" button to remove the related file 2 File name If the length is too long, it will show like \"xxx...\" 3 File size If the length is too long, it will show like \"xxx...\" There are 4 types to show the size. 1. size >= 1073741824 : xxx GB 2. 1073741824 > size >= 1048576 : xxx MB 3. 1048576 > size >= 1024 : xxx KB 4. 1024 > size : xxx bytes 4 Link to show \"file select\" pop-up box 5 Text to show file limit message 6 Error message 7 Drag drop zone","title":"Overview"},{"location":"Reference/Attachment/#constructor","text":"Parameter Name Type Required Description options Object No An object contains params of constructor. options.dropZoneText String No Text will show when the file is dragged over the attachment field. (item 7) Default value: 'Drop files here.' options.browseButtonText String No Text of the browse button. (item 4) Default value: 'Browse' options.fileLimitText String No Text of the file limit warn part. (item 5) options.errorMessage String No Error message (item 6) options.isErrorVisible Boolean No Only when it is true , \"errorMessage\" will show. Default value: false options.files Array<Object> No File objects (ref. https://developer.mozilla.org/en-US/docs/Web/API/File ) Or objects contain \"name\" and \"size\" options.files[].name String No The file name options.files[].size String No The file size options.isVisible Boolean No The attachment component will be visible. Default value: true Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return (<Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} />); } }","title":"Constructor"},{"location":"Reference/Attachment/#methods","text":"","title":"Methods"},{"location":"Reference/Attachment/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return (<Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} />); } }","title":"render()"},{"location":"Reference/Attachment/#setfilesfiles","text":"Set the files of attachment field. Parameter Name Type Required Description files Array<Object> Yes File objects (ref. https://developer.mozilla.org/en-US/docs/Web/API/File ) Or objects contain \"name\" and \"size\" files[].name String No The file name files[].size String No The file size Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); const button = new kintoneUIComponent.Button({text: 'Set Files'}); body.appendChild(button.render()); button.on('click', () => { attachment.setFiles([{name: 'test_1', size: 12345}]); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; handleClick = () => { this.setState({files: [{name: 'test_1', size: 12345}]}); }; render() { return ( <div> <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={this.handleClick}>Set Files</button> </div> ); } }","title":"setFiles(files)"},{"location":"Reference/Attachment/#getfiles","text":"Get all files information of attachment field. Parameter None Returns Name Type Description files Array<Object> List of all file objects in the attachment field Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); body.appendChild(attachment.render()); const button = new kintoneUIComponent.Button({text: 'Get Files'}); body.appendChild(button.render()); button.on('click', () => { console.log('files:', attachment.getFiles()); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; handleClick = () => { console.log('files:', this.state.files); }; render() { return ( <div> <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={this.handleClick}>Get Files</button> </div> ); } }","title":"getFiles()"},{"location":"Reference/Attachment/#setdropzonetextdropzonetext","text":"Set the text of the drop zone Parameter Name Type Required Description dropZoneText String Yes Text will show when the file is dragged over the attachment field. Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setDropZoneText('Drop files here.'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} dropZoneText=\"Drop files here.\" onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"setDropZoneText(dropZoneText)"},{"location":"Reference/Attachment/#setbrowsebuttontextbrowsebuttontext","text":"Set the text of the browse button Parameter Name Type Required Description browseButtonText String Yes Text of the browse button Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setBrowseButtonText('Browse'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} browseButtonText=\"Browse\" onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"setBrowseButtonText(browseButtonText)"},{"location":"Reference/Attachment/#setfilelimittextfilelimittext","text":"Set the text of the file limit warn part. Parameter Name Type Required Description fileLimitText String Yes Text of the file limit warn part Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setFileLimitText('Maximum: 1 GB'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} fileLimitText=\"Maximum: 1 GB\" onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"setFileLimitText(fileLimitText)"},{"location":"Reference/Attachment/#seterrormessageerrormessage","text":"Set the error message. Parameter Name Type Required Description errorMessage String Yes Error message Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setErrorMessage('Error message'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} errorMessage=\"Error message\" onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"setErrorMessage(errorMessage)"},{"location":"Reference/Attachment/#showerror","text":"Show the error message Parameter None Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({errorMessage: 'Error message'}); body.appendChild(attachment.render()); const showButton = new kintoneUIComponent.Button({text: 'Show Error'}); body.appendChild(showButton.render()); showButton.on('click', () => { attachment.showError(); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} errorMessage=\"Error message\" isErrorVisible={true} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"showError()"},{"location":"Reference/Attachment/#hideerror","text":"Hide the error message Parameter None Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({errorMessage: 'Error message'}); body.appendChild(attachment.render()); const showButton = new kintoneUIComponent.Button({text: 'Show Error'}); body.appendChild(showButton.render()); showButton.on('click', () => { attachment.showError(); }); const hideButton = new kintoneUIComponent.Button({text: 'Hide Error'}); body.appendChild(hideButton.render()); hideButton.on('click', () => { attachment.hideError(); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} errorMessage=\"Error message\" isErrorVisible={false} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"hideError()"},{"location":"Reference/Attachment/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'filesAdd' 'fileRemove' callback Function Yes callback Returns Callback data Event Name Type Description filesAdd files Array<Object> List of all file objects that are displayed in the attachment field after files are added. fileRemove files Array<Object> List of all file objects that are displayed in the attachment field after a file is removed. Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.on('filesAdd', (files) => { console.log('files:', files); }); attachment.on('fileRemove', (files) => { console.log('files:', files); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); console.log('files:', files); }; handleFileRemove = (files) => { this.setState({files}); console.log('files:', files); }; render() { return ( <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"on(eventName, callBack)"},{"location":"Reference/Attachment/#show","text":"Display the attachment component. Parameter None Returns None Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); attachment.show(); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} isVisible={true} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"show()"},{"location":"Reference/Attachment/#hide","text":"Hide the the attachment component.. Parameter None Returns None Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); attachment.hide(); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { files: [], }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return ( <Attachment files={this.state.files} isVisible={false} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } }","title":"hide()"},{"location":"Reference/Button/","text":"Button Overview Number Description 1 Normal button 2 Submit button Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Text will be displayed in button. options.type String No Style of the button: 'normal' 'submit' Default value: 'normal' options.isDisabled Boolean No The button will be disabled. Default value: 'false' options.isVisible Boolean No The button will be visible. Default value: 'true' Sample Javascript var button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } setText(text) Set displayed text in button. Parameter Name Type Required Description text String Yes Display text in button Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setText('submit'); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='normal' /> ); } } setType(type) Set the displayed type for button. Parameter Name Type Required Description type String No Style of the button: 'normal' 'submit' Default value: 'normal' Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setType('normal'); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='normal' /> ); } } on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.on('click', function(event) { console.log('on click'); }); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button onClick={this.handleButtonClick} /> ); } handleButtonClick(event) { console.log('on click'); } } show() Display button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.show(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isVisible={true} /> ); } } hide() Hide button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.hide(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isVisible={false} /> ); } } disable() Disable button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.disable(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isDisabled={true} /> ); } } enable() Enable button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.enable(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isDisabled={false} /> ); } }","title":"Button"},{"location":"Reference/Button/#button","text":"","title":"Button"},{"location":"Reference/Button/#overview","text":"Number Description 1 Normal button 2 Submit button","title":"Overview"},{"location":"Reference/Button/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Text will be displayed in button. options.type String No Style of the button: 'normal' 'submit' Default value: 'normal' options.isDisabled Boolean No The button will be disabled. Default value: 'false' options.isVisible Boolean No The button will be visible. Default value: 'true' Sample Javascript var button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } }","title":"Constructor"},{"location":"Reference/Button/#methods","text":"","title":"Methods"},{"location":"Reference/Button/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } }","title":"render()"},{"location":"Reference/Button/#settexttext","text":"Set displayed text in button. Parameter Name Type Required Description text String Yes Display text in button Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setText('submit'); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='normal' /> ); } }","title":"setText(text)"},{"location":"Reference/Button/#settypetype","text":"Set the displayed type for button. Parameter Name Type Required Description type String No Style of the button: 'normal' 'submit' Default value: 'normal' Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setType('normal'); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='normal' /> ); } }","title":"setType(type)"},{"location":"Reference/Button/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.on('click', function(event) { console.log('on click'); }); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button onClick={this.handleButtonClick} /> ); } handleButtonClick(event) { console.log('on click'); } }","title":"on(eventName, callback)"},{"location":"Reference/Button/#show","text":"Display button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.show(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isVisible={true} /> ); } }","title":"show()"},{"location":"Reference/Button/#hide","text":"Hide button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.hide(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isVisible={false} /> ); } }","title":"hide()"},{"location":"Reference/Button/#disable","text":"Disable button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.disable(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isDisabled={true} /> ); } }","title":"disable()"},{"location":"Reference/Button/#enable","text":"Enable button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.enable(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isDisabled={false} /> ); } }","title":"enable()"},{"location":"Reference/CheckBox/","text":"CheckBox Overview Number Description 1 Icon when the item is selected 2 Label of an item 3 Not selected item 4 Disabled item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on checkbox. options.items[].value String Yes String value of item If the value is duplicate, the error message will be displayed options.items[].label String No String label of item options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value Array No List of checked item. options.isDisabled Boolean No The checkBox will be disabled. Default value: 'false' options.isVisible Boolean No The checkBox will be visible. Default value: 'true' Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } addItem(item) Add an item to the end of checkbox list. Parameter Name Type Required Description item String Yes The item will be added to multile choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.addItem({ label: 'Grape', value: 'grape', isDisabled: false }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } getItem(index) Get the value of specific position in checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item String the item of the checkbox item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var firstItem = checkbox.getItem(0); console.log(firstItem); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]) } } removeItem(index) Remove the specific item from checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.removeItem(0); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } getItems() Get all items from the checkbox. Parameter None Returns The list contains all items of the dropdown. Name Type Description items Array<Object> List items of the checkbox items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var items = checkbox.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } getValue() Get the checked values of the checkbox. Parameter None Returns List of checked items. Name Type Description value List<String> The value of selected items. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var value = checkbox.getValue(); value.forEach(function(item) { console.log(item); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Values</button> </div> ); } handleClick = () => { console.log(this.state.value); } } setValue(value) Set the checked value of checkbox. Parameter Name Type Required Description value Array<String> Yes The array contains checked value in list. If the 'value[]' is nonexistent value, the error will be displayed Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.setValue(['Lemon']); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: []}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: this.state.value.concat(['Lemon']) }); } } disableItem(value) Set the disabled item of checkbox. Parameter Name Type Required Description value Array Yes The array contains checked value in list. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disableItem('Orange'); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disable item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } enableItem(value) Set the enable item of checkbox. Parameter Name Type Required Description value Array Yes The array contains checked value in list. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enableItem('Banana'); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.on('change', function(value) { console.log('on change'); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} items={this.state.items} onChange={this.handleChange} /> ); } handleChange= () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } show() Display the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.show(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} isVisible={true} items={this.state.items} onChange={(value) => {this.setState({value})}}/> ); } } hide() Hide the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.hide(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} isVisible={false} items={this.state.items} onChange={(value) => {this.setState({value})}}/> ); } } disable() Disabled the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disable(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox isDisabled={true} items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}}/> ); } } enable() Enabled the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enable(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox isDisabled={false} items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}}/> ); } }","title":"CheckBox"},{"location":"Reference/CheckBox/#checkbox","text":"","title":"CheckBox"},{"location":"Reference/CheckBox/#overview","text":"Number Description 1 Icon when the item is selected 2 Label of an item 3 Not selected item 4 Disabled item","title":"Overview"},{"location":"Reference/CheckBox/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on checkbox. options.items[].value String Yes String value of item If the value is duplicate, the error message will be displayed options.items[].label String No String label of item options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value Array No List of checked item. options.isDisabled Boolean No The checkBox will be disabled. Default value: 'false' options.isVisible Boolean No The checkBox will be visible. Default value: 'true' Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/CheckBox/#methods","text":"","title":"Methods"},{"location":"Reference/CheckBox/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"render()"},{"location":"Reference/CheckBox/#additemitem","text":"Add an item to the end of checkbox list. Parameter Name Type Required Description item String Yes The item will be added to multile choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.addItem({ label: 'Grape', value: 'grape', isDisabled: false }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } }","title":"addItem(item)"},{"location":"Reference/CheckBox/#getitemindex","text":"Get the value of specific position in checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item String the item of the checkbox item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var firstItem = checkbox.getItem(0); console.log(firstItem); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]) } }","title":"getItem(index)"},{"location":"Reference/CheckBox/#removeitemindex","text":"Remove the specific item from checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.removeItem(0); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; }","title":"removeItem(index)"},{"location":"Reference/CheckBox/#getitems","text":"Get all items from the checkbox. Parameter None Returns The list contains all items of the dropdown. Name Type Description items Array<Object> List items of the checkbox items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var items = checkbox.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } }","title":"getItems()"},{"location":"Reference/CheckBox/#getvalue","text":"Get the checked values of the checkbox. Parameter None Returns List of checked items. Name Type Description value List<String> The value of selected items. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var value = checkbox.getValue(); value.forEach(function(item) { console.log(item); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Values</button> </div> ); } handleClick = () => { console.log(this.state.value); } }","title":"getValue()"},{"location":"Reference/CheckBox/#setvaluevalue","text":"Set the checked value of checkbox. Parameter Name Type Required Description value Array<String> Yes The array contains checked value in list. If the 'value[]' is nonexistent value, the error will be displayed Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.setValue(['Lemon']); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: []}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: this.state.value.concat(['Lemon']) }); } }","title":"setValue(value)"},{"location":"Reference/CheckBox/#disableitemvalue","text":"Set the disabled item of checkbox. Parameter Name Type Required Description value Array Yes The array contains checked value in list. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disableItem('Orange'); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disable item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } }","title":"disableItem(value)"},{"location":"Reference/CheckBox/#enableitemvalue","text":"Set the enable item of checkbox. Parameter Name Type Required Description value Array Yes The array contains checked value in list. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enableItem('Banana'); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"enableItem(value)"},{"location":"Reference/CheckBox/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.on('change', function(value) { console.log('on change'); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} items={this.state.items} onChange={this.handleChange} /> ); } handleChange= () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"on(eventName, callBack)"},{"location":"Reference/CheckBox/#show","text":"Display the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.show(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} isVisible={true} items={this.state.items} onChange={(value) => {this.setState({value})}}/> ); } }","title":"show()"},{"location":"Reference/CheckBox/#hide","text":"Hide the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.hide(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} isVisible={false} items={this.state.items} onChange={(value) => {this.setState({value})}}/> ); } }","title":"hide()"},{"location":"Reference/CheckBox/#disable","text":"Disabled the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disable(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox isDisabled={true} items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}}/> ); } }","title":"disable()"},{"location":"Reference/CheckBox/#enable","text":"Enabled the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enable(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox isDisabled={false} items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}}/> ); } }","title":"enable()"},{"location":"Reference/ColorPicker/","text":"ColorPicker Overview Number Description 1 HEX input 2 ColorPicker popup window 3 Saturation 4 Hue 5 RGB input 6 HSV input 7 OK button 8 Cancel button Constructor Parameter Name Type Required Description options Object No An object contains params of constructor. options.color HEX String No The ColorPicker's input value. If setted color is not valid, an error will be displayed. Default value is '#FF0000'. options.isDisabled Boolean No The ColorPicker will be disabled. Default value: 'false' options.isVisible Boolean No The ColorPicker will be visible. Default value: 'true' options.onChange Callback No Handler for color change event. Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = {color: ''} render() { return ( <ColorPicker color={this.state.color} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(colorPicker.render()); }); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { state = {color: ''} render() { return ( <ColorPicker color={this.state.color} /> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); }); setColor(color) Set the color of colorpicker . Parameter Name Type Required Description color String Yes The color of colorpicker. Returns None Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); colorPicker.setColor('#666666'); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { state = {color: '#FF0000'} render() { return ( <div> <ColorPicker color={this.state.color} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ color: '#666666' }); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); }); getColor() Get the color of colorpicker. Parameter None Returns Name Type Description color String The color of colorpicker. Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); colorPicker.getColor(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { state = {color: '#FF0000'} render() { return ( <div> <ColorPicker color={this.state.color} /> <button onClick={this.handleClick}>Get Color</button> </div> ); } handleClick= () => { console.log(this.state.color); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); }); on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); colorPicker.on('change', function(color) { console.log(color); }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(colorPicker.render()); }); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { state = {color: '#FF0000'} render() { return ( <ColorPicker color={this.state.color} onChange={this.handleChange} /> ); } handleChange = (color) => { console.log(color); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); }); show() Display ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.show(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <ColorPicker color='#FF0000' isVisible={true} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); }); hide() Hide ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.hide(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <ColorPicker color='#FF0000' isVisible={false} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); }); disable() Disable ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.disable(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <ColorPicker color='#FF0000' isDisabled={true} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); }); enable() Enable ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.enable(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <ColorPicker color=\"#FF0000\" isDisabled={false} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"ColorPicker"},{"location":"Reference/ColorPicker/#colorpicker","text":"","title":"ColorPicker"},{"location":"Reference/ColorPicker/#overview","text":"Number Description 1 HEX input 2 ColorPicker popup window 3 Saturation 4 Hue 5 RGB input 6 HSV input 7 OK button 8 Cancel button","title":"Overview"},{"location":"Reference/ColorPicker/#constructor","text":"Parameter Name Type Required Description options Object No An object contains params of constructor. options.color HEX String No The ColorPicker's input value. If setted color is not valid, an error will be displayed. Default value is '#FF0000'. options.isDisabled Boolean No The ColorPicker will be disabled. Default value: 'false' options.isVisible Boolean No The ColorPicker will be visible. Default value: 'true' options.onChange Callback No Handler for color change event. Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = {color: ''} render() { return ( <ColorPicker color={this.state.color} /> ); } }","title":"Constructor"},{"location":"Reference/ColorPicker/#methods","text":"","title":"Methods"},{"location":"Reference/ColorPicker/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(colorPicker.render()); }); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { state = {color: ''} render() { return ( <ColorPicker color={this.state.color} /> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"render()"},{"location":"Reference/ColorPicker/#setcolorcolor","text":"Set the color of colorpicker . Parameter Name Type Required Description color String Yes The color of colorpicker. Returns None Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); colorPicker.setColor('#666666'); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { state = {color: '#FF0000'} render() { return ( <div> <ColorPicker color={this.state.color} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ color: '#666666' }); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"setColor(color)"},{"location":"Reference/ColorPicker/#getcolor","text":"Get the color of colorpicker. Parameter None Returns Name Type Description color String The color of colorpicker. Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); colorPicker.getColor(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { state = {color: '#FF0000'} render() { return ( <div> <ColorPicker color={this.state.color} /> <button onClick={this.handleClick}>Get Color</button> </div> ); } handleClick= () => { console.log(this.state.color); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"getColor()"},{"location":"Reference/ColorPicker/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); colorPicker.on('change', function(color) { console.log(color); }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(colorPicker.render()); }); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { state = {color: '#FF0000'} render() { return ( <ColorPicker color={this.state.color} onChange={this.handleChange} /> ); } handleChange = (color) => { console.log(color); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"on(eventName, callback)"},{"location":"Reference/ColorPicker/#show","text":"Display ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.show(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <ColorPicker color='#FF0000' isVisible={true} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"show()"},{"location":"Reference/ColorPicker/#hide","text":"Hide ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.hide(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <ColorPicker color='#FF0000' isVisible={false} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"hide()"},{"location":"Reference/ColorPicker/#disable","text":"Disable ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.disable(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <ColorPicker color='#FF0000' isDisabled={true} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"disable()"},{"location":"Reference/ColorPicker/#enable","text":"Enable ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.enable(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <ColorPicker color=\"#FF0000\" isDisabled={false} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <Plugin />, kintone.app.getHeaderSpaceElement() ); });","title":"enable()"},{"location":"Reference/DateTime/","text":"DateTime Overview Number Description 1 date form 2 time form 3 date picker 4 select today button 5 clear button 6 selected item pointer 7 today pointer 8 time picker Constructor Parameter Name Type Required Description options Object No An object contains params of constructor. options.value Date No The Default DateTime Value. options.type Boolean No The component type date time datetime options.dateFormat String No The date format showed on date picker. Supported format: Seperator: \"/\", \"-\", \" \", \":\" Day of week: E (Week Day Short): Su, Mo... EE (Week Day Medium): Sun, Mon... EEE (Week Day): Sunday, Monday... Date: d (Date Short): 1,2 ... dd (Date Full): 01, 02... Month: MM (Month Number): 01, 02 ... MMM (Month Text Short): Jan, Feb... MMMM (Month Text Long): January, February... Year: YYYY (Year): 2019, 2020... Default format: MM/dd/YYYY options.isVisible Boolean No The DatePicker will be visible. Default value: 'true' options.isDisable Boolean No The DateTime field will be disabled. Default value: 'false' Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime', locale: 'en'}); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ) return event; }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { const date = new Date(); var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime', locale: 'en'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); }); getValue() Get the value of datetime field. Parameter None Returns Name Type Description value Date The value of datetime field. Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { const date = new Date(); var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime', locale: 'en'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); dateTime.getValue(); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {value: new Date()}; } render() { return ( <div> <DateTime value={this.state.value} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Get Value </button> </div> ); } handleClick= () => { console.log(this.state.value); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); }); setValue(value) Set the value of datetime field. Parameter Name Type Required Description value Date Yes The value of datetime field. Returns None Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { var dateTime = new kintoneUIComponent.DateTime({type: 'datetime', locale: 'en'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); dateTime.setValue(new Date()); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {value: new Date()}; } render() { return ( <div> <DateTime value={this.state.value} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Set Value </button> </div> ); } handleClick= () => { this.setState({value: new Date('1995-12-17T03:24:00')}) }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); }); getLocale() Get the setting of language. Parameter None Returns Name Type Description locale String The setting of TimeZone and language. ja en zh Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { const date = new Date(); var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime', locale: 'en'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); dateTime.getLocale(); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {locale: 'ja'}; } render() { return ( <div> <DateTime locale={this.state.locale} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Get Locale </button> </div> ); } handleClick= () => { console.log(this.state.locale); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); }); setLocale(locale) Set the language setting. Parameters Name Type Required Description locale String Yes The setting of TimeZone and language. ja en zh Returns None Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { const date = new Date(); var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); dateTime.setLocale('en'); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {locale: 'en'}; } render() { return ( <div> <DateTime locale={this.state.locale} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Set Locale </button> </div> ); } handleClick= () => { this.setState({locale: 'ja'}) }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); }); show() Display DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date()}); kintone.events.on('app.record.index.show', function(event) { var container = kintone.app.getHeaderSpaceElement(); container.appendChild(myDateTime.render()); myDateTime.show(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' isVisible={true} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); }); hide() Hide DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date()}); kintone.events.on('app.record.index.show', function(event) { var container = kintone.app.getHeaderSpaceElement(); container.appendChild(myDateTime.render()); myDateTime.hide(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' isVisible={false} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); }); disable() Disable DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date()}); kintone.events.on('app.record.index.show', function(event) { var container = kintone.app.getHeaderSpaceElement(); container.appendChild(myDateTime.render()); myDateTime.disable(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' isDisabled={true} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); }); enable() Enable DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date(), isDisabled: false}); kintone.events.on('app.record.index.show', function(event) { var container = kintone.app.getHeaderSpaceElement(); container.appendChild(myDateTime.render()); myDateTime.enable(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' isDisabled={false} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"DateTime"},{"location":"Reference/DateTime/#datetime","text":"","title":"DateTime"},{"location":"Reference/DateTime/#overview","text":"Number Description 1 date form 2 time form 3 date picker 4 select today button 5 clear button 6 selected item pointer 7 today pointer 8 time picker","title":"Overview"},{"location":"Reference/DateTime/#constructor","text":"Parameter Name Type Required Description options Object No An object contains params of constructor. options.value Date No The Default DateTime Value. options.type Boolean No The component type date time datetime options.dateFormat String No The date format showed on date picker. Supported format: Seperator: \"/\", \"-\", \" \", \":\" Day of week: E (Week Day Short): Su, Mo... EE (Week Day Medium): Sun, Mon... EEE (Week Day): Sunday, Monday... Date: d (Date Short): 1,2 ... dd (Date Full): 01, 02... Month: MM (Month Number): 01, 02 ... MMM (Month Text Short): Jan, Feb... MMMM (Month Text Long): January, February... Year: YYYY (Year): 2019, 2020... Default format: MM/dd/YYYY options.isVisible Boolean No The DatePicker will be visible. Default value: 'true' options.isDisable Boolean No The DateTime field will be disabled. Default value: 'false' Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime', locale: 'en'}); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ) return event; });","title":"Constructor"},{"location":"Reference/DateTime/#methods","text":"","title":"Methods"},{"location":"Reference/DateTime/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { const date = new Date(); var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime', locale: 'en'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"render()"},{"location":"Reference/DateTime/#getvalue","text":"Get the value of datetime field. Parameter None Returns Name Type Description value Date The value of datetime field. Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { const date = new Date(); var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime', locale: 'en'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); dateTime.getValue(); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {value: new Date()}; } render() { return ( <div> <DateTime value={this.state.value} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Get Value </button> </div> ); } handleClick= () => { console.log(this.state.value); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"getValue()"},{"location":"Reference/DateTime/#setvaluevalue","text":"Set the value of datetime field. Parameter Name Type Required Description value Date Yes The value of datetime field. Returns None Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { var dateTime = new kintoneUIComponent.DateTime({type: 'datetime', locale: 'en'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); dateTime.setValue(new Date()); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {value: new Date()}; } render() { return ( <div> <DateTime value={this.state.value} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Set Value </button> </div> ); } handleClick= () => { this.setState({value: new Date('1995-12-17T03:24:00')}) }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"setValue(value)"},{"location":"Reference/DateTime/#getlocale","text":"Get the setting of language. Parameter None Returns Name Type Description locale String The setting of TimeZone and language. ja en zh Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { const date = new Date(); var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime', locale: 'en'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); dateTime.getLocale(); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {locale: 'ja'}; } render() { return ( <div> <DateTime locale={this.state.locale} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Get Locale </button> </div> ); } handleClick= () => { console.log(this.state.locale); }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"getLocale()"},{"location":"Reference/DateTime/#setlocalelocale","text":"Set the language setting. Parameters Name Type Required Description locale String Yes The setting of TimeZone and language. ja en zh Returns None Sample Javascript (function() { \"use strict\"; kintone.events.on('app.record.index.show', function(event) { const date = new Date(); var dateTime = new kintoneUIComponent.DateTime({value: date, type: 'datetime'}); const space = kintone.app.getHeaderSpaceElement(); space.appendChild(dateTime.render()); dateTime.setLocale('en'); }); })(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {locale: 'en'}; } render() { return ( <div> <DateTime locale={this.state.locale} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Set Locale </button> </div> ); } handleClick= () => { this.setState({locale: 'ja'}) }; } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"setLocale(locale)"},{"location":"Reference/DateTime/#show","text":"Display DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date()}); kintone.events.on('app.record.index.show', function(event) { var container = kintone.app.getHeaderSpaceElement(); container.appendChild(myDateTime.render()); myDateTime.show(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' isVisible={true} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"show()"},{"location":"Reference/DateTime/#hide","text":"Hide DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date()}); kintone.events.on('app.record.index.show', function(event) { var container = kintone.app.getHeaderSpaceElement(); container.appendChild(myDateTime.render()); myDateTime.hide(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' isVisible={false} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"hide()"},{"location":"Reference/DateTime/#disable","text":"Disable DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date()}); kintone.events.on('app.record.index.show', function(event) { var container = kintone.app.getHeaderSpaceElement(); container.appendChild(myDateTime.render()); myDateTime.disable(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' isDisabled={true} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"disable()"},{"location":"Reference/DateTime/#enable","text":"Enable DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date(), isDisabled: false}); kintone.events.on('app.record.index.show', function(event) { var container = kintone.app.getHeaderSpaceElement(); container.appendChild(myDateTime.render()); myDateTime.enable(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' isDisabled={false} /> ); } } kintone.events.on('app.record.index.show', function(event) { ReactDOM.render( <DateTimeComponent />, kintone.app.getHeaderSpaceElement() ); });","title":"enable()"},{"location":"Reference/Dialog/","text":"Dialog Overview Item Description Item-1 Header section Item-2 Content section Item-3 Footer section Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.header String, DOM, React Element No Header of dialog. options.content String, DOM, React Element No Content of dialog. options.footer String, DOM, React Element No Footer of dialog. options.isVisible Boolean No If set to true, Dialog will show up. Otherwise Dialog will hide. Default: true options.showCloseButton Boolean No If set to true, close button in Item-1 will show up. Otherwise close button will hide. Default: true Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); React import {Dialog} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = {isVisible: true} onClose = () => { this.setState({isVisible: false}) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); React import {Dialog} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = {isVisible: true} onClose = () => { this.setState({isVisible: false}) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } show() Display the Dialog. Parameter None Returns None Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: false, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } hide() Hide the Dialog. Parameter None Returns None Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.hide(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={false} /> ); } } setHeader() Set header for Dialog. Parameter Name Type Required Description header String, DOM, React Element Yes Header of dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Announcement' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setHeader(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} header=\"Announcement\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } getHeader() Get header for Dialog. Parameter None Returns Header of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); myDialog.getHeader(); // return \"Dialog header\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true, header: 'Announcement' } } onClose = () => { this.setState({ isVisible: false }) } handleClick= () => { console.log(this.state.header); }; render() { return ( <div> <Dialog showCloseButton={true} header={this.state.header} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Header</button> </div> ); } } setContent() Set content for Dialog. Parameter Name Type Required Description content String, DOM, React Element Yes Content of dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Content' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setContent(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} content=\"content\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } getContent() Get content for Dialog. Parameter None Returns Content of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: false, showCloseButton: true }); document.body.append(myDialog.render()); myDialog.getContent(); // return \"This is content\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { content: \"Dialog content\", isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } handleClick= () => { console.log(this.state.content); }; render() { return ( <div> <Dialog showCloseButton={true} content={this.state.content} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Content</button> </div> ); } } setFooter() Set footer for Dialog. Parameter Name Type Required Description footer String, DOM, React Element Yes Footer of dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Footer' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setFooter(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} footer=\"footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } getFooter() Get footer for Dialog. Parameter None Returns Footer of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); myDialog.getFooter(); // return \"Footer\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = {footer: \"Dialog footer\", isVisible: true} handleClick= () => { console.log(this.state.footer); }; onClose = () => { this.setState({ isVisible: false }) } render() { return ( <div> <Dialog showCloseButton={true} footer={this.state.footer} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Footer</button> </div> ); } }","title":"Dialog"},{"location":"Reference/Dialog/#dialog","text":"","title":"Dialog"},{"location":"Reference/Dialog/#overview","text":"Item Description Item-1 Header section Item-2 Content section Item-3 Footer section","title":"Overview"},{"location":"Reference/Dialog/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.header String, DOM, React Element No Header of dialog. options.content String, DOM, React Element No Content of dialog. options.footer String, DOM, React Element No Footer of dialog. options.isVisible Boolean No If set to true, Dialog will show up. Otherwise Dialog will hide. Default: true options.showCloseButton Boolean No If set to true, close button in Item-1 will show up. Otherwise close button will hide. Default: true Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); React import {Dialog} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = {isVisible: true} onClose = () => { this.setState({isVisible: false}) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } }","title":"Constructor"},{"location":"Reference/Dialog/#methods","text":"","title":"Methods"},{"location":"Reference/Dialog/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); React import {Dialog} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = {isVisible: true} onClose = () => { this.setState({isVisible: false}) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } }","title":"render()"},{"location":"Reference/Dialog/#show","text":"Display the Dialog. Parameter None Returns None Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: false, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } }","title":"show()"},{"location":"Reference/Dialog/#hide","text":"Hide the Dialog. Parameter None Returns None Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.hide(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={false} /> ); } }","title":"hide()"},{"location":"Reference/Dialog/#setheader","text":"Set header for Dialog. Parameter Name Type Required Description header String, DOM, React Element Yes Header of dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Announcement' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setHeader(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} header=\"Announcement\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } }","title":"setHeader()"},{"location":"Reference/Dialog/#getheader","text":"Get header for Dialog. Parameter None Returns Header of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); myDialog.getHeader(); // return \"Dialog header\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true, header: 'Announcement' } } onClose = () => { this.setState({ isVisible: false }) } handleClick= () => { console.log(this.state.header); }; render() { return ( <div> <Dialog showCloseButton={true} header={this.state.header} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Header</button> </div> ); } }","title":"getHeader()"},{"location":"Reference/Dialog/#setcontent","text":"Set content for Dialog. Parameter Name Type Required Description content String, DOM, React Element Yes Content of dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Content' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setContent(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} content=\"content\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } }","title":"setContent()"},{"location":"Reference/Dialog/#getcontent","text":"Get content for Dialog. Parameter None Returns Content of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: false, showCloseButton: true }); document.body.append(myDialog.render()); myDialog.getContent(); // return \"This is content\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { content: \"Dialog content\", isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } handleClick= () => { console.log(this.state.content); }; render() { return ( <div> <Dialog showCloseButton={true} content={this.state.content} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Content</button> </div> ); } }","title":"getContent()"},{"location":"Reference/Dialog/#setfooter","text":"Set footer for Dialog. Parameter Name Type Required Description footer String, DOM, React Element Yes Footer of dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Footer' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setFooter(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props) this.state = { isVisible: true } } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} footer=\"footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } }","title":"setFooter()"},{"location":"Reference/Dialog/#getfooter","text":"Get footer for Dialog. Parameter None Returns Footer of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); myDialog.getFooter(); // return \"Footer\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = {footer: \"Dialog footer\", isVisible: true} handleClick= () => { console.log(this.state.footer); }; onClose = () => { this.setState({ isVisible: false }) } render() { return ( <div> <Dialog showCloseButton={true} footer={this.state.footer} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Footer</button> </div> ); } }","title":"getFooter()"},{"location":"Reference/Dropdown/","text":"Dropdown Overview Number Description 1 Main area 2 Content area 3 Selected item 4 Not selected item 5 Disabled item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items will be displayed on dropdown. options.items[].value String Yes The value of an item. If the value is duplicate, the error will be displayed options.items[].label String No The label of an item. options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected value. If the 'options.value' is nonexistent value, the error will be displayed options.isDisabled Boolean No The dropdown will be disabled. Default value: 'false' options.isVisible Boolean No The dropdown will be visible. Default value: 'true' Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } addItem(item) Add an item to dropdown list. Parameter Name Type Required Description item Object Yes The item will be added to dropdown list. item.value String Yes The value of an item. item.label String Yes Display string. item.isDisabled Boolean Yes Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [], value: undefined } } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick= () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) }; } removeItem(index) Remove an item at specific position in dropdown's list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var firstItem = dropdown.getItems()[0]; dropdown.removeItem(0); console.log(firstItem); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ] } } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick= () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } getItems() Get all items of the dropdown. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var list = dropdown.getItems(); list.forEach(function(item) { console.log(item); }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } getValue() Get value of the selected item Parameter None Returns Name Type Description value String The value of the selected item Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var selectedItem = dropdown.getValue(); console.log(selectedItem); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } setValue(value) Set the selected value for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. If the 'value' is nonexistent value, the error will be displayed Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.setValue('Orange'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } disableItem(value) Set the disabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disableItem('Orange'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } enableItem(value) Set the enabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enableItem('Banana'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.on('change', function(value) { console.log('on change'); }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } show() Display the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.show(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isVisible={true} /> ); } handleChange = (value) => { this.setState({value}); } } hide() Hide the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.hide(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isVisible={false} /> ); } handleChange = (value) => { this.setState({value}); } } disable() Disabled the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disable(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isDisabled={true} /> ); } handleChange = (value) => { this.setState({value}); } } enable() Enabled the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enable(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isDisabled={false} /> ); } handleChange = (value) => { this.setState({value}); } }","title":"Dropdown"},{"location":"Reference/Dropdown/#dropdown","text":"","title":"Dropdown"},{"location":"Reference/Dropdown/#overview","text":"Number Description 1 Main area 2 Content area 3 Selected item 4 Not selected item 5 Disabled item","title":"Overview"},{"location":"Reference/Dropdown/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items will be displayed on dropdown. options.items[].value String Yes The value of an item. If the value is duplicate, the error will be displayed options.items[].label String No The label of an item. options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected value. If the 'options.value' is nonexistent value, the error will be displayed options.isDisabled Boolean No The dropdown will be disabled. Default value: 'false' options.isVisible Boolean No The dropdown will be visible. Default value: 'true' Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/Dropdown/#methods","text":"","title":"Methods"},{"location":"Reference/Dropdown/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"render()"},{"location":"Reference/Dropdown/#additemitem","text":"Add an item to dropdown list. Parameter Name Type Required Description item Object Yes The item will be added to dropdown list. item.value String Yes The value of an item. item.label String Yes Display string. item.isDisabled Boolean Yes Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [], value: undefined } } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick= () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) }; }","title":"addItem(item)"},{"location":"Reference/Dropdown/#removeitemindex","text":"Remove an item at specific position in dropdown's list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var firstItem = dropdown.getItems()[0]; dropdown.removeItem(0); console.log(firstItem); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ] } } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick= () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; }","title":"removeItem(index)"},{"location":"Reference/Dropdown/#getitems","text":"Get all items of the dropdown. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var list = dropdown.getItems(); list.forEach(function(item) { console.log(item); }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } }","title":"getItems()"},{"location":"Reference/Dropdown/#getvalue","text":"Get value of the selected item Parameter None Returns Name Type Description value String The value of the selected item Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var selectedItem = dropdown.getValue(); console.log(selectedItem); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } }","title":"getValue()"},{"location":"Reference/Dropdown/#setvaluevalue","text":"Set the selected value for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. If the 'value' is nonexistent value, the error will be displayed Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.setValue('Orange'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } }","title":"setValue(value)"},{"location":"Reference/Dropdown/#disableitemvalue","text":"Set the disabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disableItem('Orange'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } }","title":"disableItem(value)"},{"location":"Reference/Dropdown/#enableitemvalue","text":"Set the enabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enableItem('Banana'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"enableItem(value)"},{"location":"Reference/Dropdown/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.on('change', function(value) { console.log('on change'); }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } }","title":"on(eventName, callBack)"},{"location":"Reference/Dropdown/#show","text":"Display the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.show(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isVisible={true} /> ); } handleChange = (value) => { this.setState({value}); } }","title":"show()"},{"location":"Reference/Dropdown/#hide","text":"Hide the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.hide(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isVisible={false} /> ); } handleChange = (value) => { this.setState({value}); } }","title":"hide()"},{"location":"Reference/Dropdown/#disable","text":"Disabled the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disable(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isDisabled={true} /> ); } handleChange = (value) => { this.setState({value}); } }","title":"disable()"},{"location":"Reference/Dropdown/#enable","text":"Enabled the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enable(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isDisabled={false} /> ); } handleChange = (value) => { this.setState({value}); } }","title":"enable()"},{"location":"Reference/FieldGroup/","text":"FieldGroup Overview Constructor Parameter Name Type Required Description options Object Yes The object contains params of constructor. options.content DOM Element No Content of Field Group. options.name String No Field group name. options.toggle String No Set the toggle state. Default value: 'collapse' options.onToggle Function No Set the toggle function. \u203bThis prop is for react. When you use pure JavaScript interface, there is no need to use this prop. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); const dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); const insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); const label = new kintoneUIComponent.Label({text: 'My label', isRequired: true}); const mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); const alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); const radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: 'Banana' }); const textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); const customCell = function() { return { init: function({rowData, updateRowData}) { const span = document.createElement('span'); const textfield1 = new kintoneUIComponent.Text({value: rowData.text1.value}); const textfield2 = new kintoneUIComponent.Text({value: rowData.text2.value}); span.appendChild(textfield1.render()); span.appendChild(textfield2.render()); textfield1.on('change', function(newValue){ updateRowData({text1: {value: newValue}}, false); }); textfield2.on('change', function(newValue){ updateRowData({text2: {value: newValue}}, false); }); this.textfield1 = textfield1; this.textfield2 = textfield2; return span; }, update: function({ rowData }) { const text1val = rowData.text1; const text2val = rowData.text2; if (text1val && this.textfield1._reactObject) { this.textfield1.setValue(text1val.value); } if (text2val && this.textfield2._reactObject) { this.textfield2.setValue(text2val.value); } } } }; const table = new kintoneUIComponent.Table({ // initial table data data: [ { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' } } ], // default row data on row add defaultRowData: { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' } }, onRowAdd: function(e) { console.log('table.onAdd', e); return { text: {value: 'overwritten field value'}, text1: { value: 'overwritten field1 value' }, text2: { value: 'overwritten field2 value' } } }, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, { header: 'Custom cell contains 2 textfields', cell: function() { return customCell() } } ] }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(alert.render()) fieldGroupContent.appendChild(attachment.render()) fieldGroupContent.appendChild(button.render()) fieldGroupContent.appendChild(checkbox.render()) fieldGroupContent.appendChild(dropdown.render()) fieldGroupContent.appendChild(insertBtn.render()) fieldGroupContent.appendChild(label.render()) fieldGroupContent.appendChild(mulChoice.render()) fieldGroupContent.appendChild(radioBtn.render()) fieldGroupContent.appendChild(table.render()) fieldGroupContent.appendChild(text.render()) fieldGroupContent.appendChild(textArea.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ]; this.state = { items: items, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <RadioButton name='radio' items={this.state.items} value={this.state.radioValue} onChange={(radioValue) => {this.setState({radioValue})}} /> </FieldGroup> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ]; this.state = { items: items, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <RadioButton name='radio' items={this.state.items} value={this.state.radioValue} onChange={(radioValue) => {this.setState({radioValue})}} /> </FieldGroup> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } } setContent(content) Add an item to end of the field group. Parameter Name Type Required Description content DOM Yes The content of Field Group. Returns None Sample Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{ label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }], value: 'orange', name: 'Fruit' }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: radioBtn.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); const text = new kintoneUIComponent.Text({ value: \"12345\" }); fieldGroup.setContent(text.render()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { content: <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} />, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Add Item</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } } getContent() Get content of field group Parameter None Returns Name Type Required Description content DOM Yes The content of Field Group. Sample Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{ label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }], value: 'orange', name: 'Fruit' }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: radioBtn.render(), name: 'Group', toggle: 'expand' }) fieldGroup.getContent(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); setName(name) Set the name for the field group. Parameter Name Type Required Description name String No The field group name. Returns None Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); fieldGroup.setName('New Group Name'); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup items={this.state.items} name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Set Name</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ name: 'NEW FIELD GROUP' }); } } getName() Get name of field group Parameter None Returns Name Type Description name String The content of Field Group. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); fieldGroup.getName(); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Get Name</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.name); } } setToggle(toggle) Set the toggle state for the field group. Parameter Name Type Required Description toggle String No The field group toggle state. Returns None Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ items: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); fieldGroup.setToggle('collapse'); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Set Toggle</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ toggle: 'collapse' }); } } getToggle() Get toggle state of the field group. Parameter None Returns Name Type Description toggle String The field group toggle state. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); fieldGroup.getToggle(); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Get Toggle</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.toggle); } }","title":"FieldGroup"},{"location":"Reference/FieldGroup/#fieldgroup","text":"","title":"FieldGroup"},{"location":"Reference/FieldGroup/#overview","text":"","title":"Overview"},{"location":"Reference/FieldGroup/#constructor","text":"Parameter Name Type Required Description options Object Yes The object contains params of constructor. options.content DOM Element No Content of Field Group. options.name String No Field group name. options.toggle String No Set the toggle state. Default value: 'collapse' options.onToggle Function No Set the toggle function. \u203bThis prop is for react. When you use pure JavaScript interface, there is no need to use this prop. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); const dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); const insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); const label = new kintoneUIComponent.Label({text: 'My label', isRequired: true}); const mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); const alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); const radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: 'Banana' }); const textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); const customCell = function() { return { init: function({rowData, updateRowData}) { const span = document.createElement('span'); const textfield1 = new kintoneUIComponent.Text({value: rowData.text1.value}); const textfield2 = new kintoneUIComponent.Text({value: rowData.text2.value}); span.appendChild(textfield1.render()); span.appendChild(textfield2.render()); textfield1.on('change', function(newValue){ updateRowData({text1: {value: newValue}}, false); }); textfield2.on('change', function(newValue){ updateRowData({text2: {value: newValue}}, false); }); this.textfield1 = textfield1; this.textfield2 = textfield2; return span; }, update: function({ rowData }) { const text1val = rowData.text1; const text2val = rowData.text2; if (text1val && this.textfield1._reactObject) { this.textfield1.setValue(text1val.value); } if (text2val && this.textfield2._reactObject) { this.textfield2.setValue(text2val.value); } } } }; const table = new kintoneUIComponent.Table({ // initial table data data: [ { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' } } ], // default row data on row add defaultRowData: { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' } }, onRowAdd: function(e) { console.log('table.onAdd', e); return { text: {value: 'overwritten field value'}, text1: { value: 'overwritten field1 value' }, text2: { value: 'overwritten field2 value' } } }, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, { header: 'Custom cell contains 2 textfields', cell: function() { return customCell() } } ] }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(alert.render()) fieldGroupContent.appendChild(attachment.render()) fieldGroupContent.appendChild(button.render()) fieldGroupContent.appendChild(checkbox.render()) fieldGroupContent.appendChild(dropdown.render()) fieldGroupContent.appendChild(insertBtn.render()) fieldGroupContent.appendChild(label.render()) fieldGroupContent.appendChild(mulChoice.render()) fieldGroupContent.appendChild(radioBtn.render()) fieldGroupContent.appendChild(table.render()) fieldGroupContent.appendChild(text.render()) fieldGroupContent.appendChild(textArea.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ]; this.state = { items: items, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <RadioButton name='radio' items={this.state.items} value={this.state.radioValue} onChange={(radioValue) => {this.setState({radioValue})}} /> </FieldGroup> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } }","title":"Constructor"},{"location":"Reference/FieldGroup/#methods","text":"","title":"Methods"},{"location":"Reference/FieldGroup/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ]; this.state = { items: items, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <RadioButton name='radio' items={this.state.items} value={this.state.radioValue} onChange={(radioValue) => {this.setState({radioValue})}} /> </FieldGroup> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } }","title":"render()"},{"location":"Reference/FieldGroup/#setcontentcontent","text":"Add an item to end of the field group. Parameter Name Type Required Description content DOM Yes The content of Field Group. Returns None Sample Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{ label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }], value: 'orange', name: 'Fruit' }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: radioBtn.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); const text = new kintoneUIComponent.Text({ value: \"12345\" }); fieldGroup.setContent(text.render()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { content: <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} />, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Add Item</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } }","title":"setContent(content)"},{"location":"Reference/FieldGroup/#getcontent","text":"Get content of field group Parameter None Returns Name Type Required Description content DOM Yes The content of Field Group. Sample Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{ label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }], value: 'orange', name: 'Fruit' }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: radioBtn.render(), name: 'Group', toggle: 'expand' }) fieldGroup.getContent(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render());","title":"getContent()"},{"location":"Reference/FieldGroup/#setnamename","text":"Set the name for the field group. Parameter Name Type Required Description name String No The field group name. Returns None Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); fieldGroup.setName('New Group Name'); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup items={this.state.items} name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Set Name</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ name: 'NEW FIELD GROUP' }); } }","title":"setName(name)"},{"location":"Reference/FieldGroup/#getname","text":"Get name of field group Parameter None Returns Name Type Description name String The content of Field Group. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); fieldGroup.getName(); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Get Name</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.name); } }","title":"getName()"},{"location":"Reference/FieldGroup/#settoggletoggle","text":"Set the toggle state for the field group. Parameter Name Type Required Description toggle String No The field group toggle state. Returns None Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ items: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); fieldGroup.setToggle('collapse'); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Set Toggle</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ toggle: 'collapse' }); } }","title":"setToggle(toggle)"},{"location":"Reference/FieldGroup/#gettoggle","text":"Get toggle state of the field group. Parameter None Returns Name Type Description toggle String The field group toggle state. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); fieldGroup.getToggle(); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Get Toggle</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.toggle); } }","title":"getToggle()"},{"location":"Reference/IconButton/","text":"IconButton Overview Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.type String No The type of of button. The value is one of: 'insert' 'remove' 'close' 'file' 'right' 'left' Default value is 'insert'. options.size String No Size of icon button: 'large' 'small' Default value is 'large'. options.color String No Color of icon button: 'gray' 'blue' 'red' 'green' 'transparent' Default value is 'gray'. options.isDisabled Boolean No The icon button will be disabled. Default value: 'false' options.isVisible Boolean No The icon button will be visible. Default value: 'true' Sample Javascript var insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } setType(type) Set the type of the button. Parameter Name Type Required Description type String No The type of of button. The value is one of: 'insert' 'remove' 'close' 'file' 'right' 'left' Default value is 'insert'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setType('remove'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' type='remove'/> ); } } setSize(size) Change size of icon button. Parameter Name Type Required Description size String No The size of of button. The value is one of: 'normal' 'small' Default value is 'normal'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setSize('small'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' /> ); } } setColor(color) Change color of icon button. Parameter Name Type Required Description color String No The size of of button. The value is one of: 'gray' 'blue' 'red' 'green' 'transparent' Default value is 'gray'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setSize('small'); iconBtn.setShape('normal'); iconBtn.setColor('green'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton text='insert' size='small' shape='normal' color='green' /> ); } } on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.on('click', function(event) { console.log('on click'); }); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' onClick={this.handleClick} /> ); } handleClick() { console.log('on click'); } } show() Display the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.show(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isVisible={true} /> ); } } hide() Hide the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.hide(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isVisible={false} /> ); } } disable() Disabled the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.disable(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isDisabled={true} /> ); } } enable() Enabled the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.enable(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isDisabled={false} /> ); } }","title":"IconButton"},{"location":"Reference/IconButton/#iconbutton","text":"","title":"IconButton"},{"location":"Reference/IconButton/#overview","text":"","title":"Overview"},{"location":"Reference/IconButton/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.type String No The type of of button. The value is one of: 'insert' 'remove' 'close' 'file' 'right' 'left' Default value is 'insert'. options.size String No Size of icon button: 'large' 'small' Default value is 'large'. options.color String No Color of icon button: 'gray' 'blue' 'red' 'green' 'transparent' Default value is 'gray'. options.isDisabled Boolean No The icon button will be disabled. Default value: 'false' options.isVisible Boolean No The icon button will be visible. Default value: 'true' Sample Javascript var insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } }","title":"Constructor"},{"location":"Reference/IconButton/#methods","text":"","title":"Methods"},{"location":"Reference/IconButton/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } }","title":"render()"},{"location":"Reference/IconButton/#settypetype","text":"Set the type of the button. Parameter Name Type Required Description type String No The type of of button. The value is one of: 'insert' 'remove' 'close' 'file' 'right' 'left' Default value is 'insert'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setType('remove'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' type='remove'/> ); } }","title":"setType(type)"},{"location":"Reference/IconButton/#setsizesize","text":"Change size of icon button. Parameter Name Type Required Description size String No The size of of button. The value is one of: 'normal' 'small' Default value is 'normal'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setSize('small'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' /> ); } }","title":"setSize(size)"},{"location":"Reference/IconButton/#setcolorcolor","text":"Change color of icon button. Parameter Name Type Required Description color String No The size of of button. The value is one of: 'gray' 'blue' 'red' 'green' 'transparent' Default value is 'gray'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setSize('small'); iconBtn.setShape('normal'); iconBtn.setColor('green'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton text='insert' size='small' shape='normal' color='green' /> ); } }","title":"setColor(color)"},{"location":"Reference/IconButton/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.on('click', function(event) { console.log('on click'); }); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' onClick={this.handleClick} /> ); } handleClick() { console.log('on click'); } }","title":"on(eventName, callback)"},{"location":"Reference/IconButton/#show","text":"Display the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.show(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isVisible={true} /> ); } }","title":"show()"},{"location":"Reference/IconButton/#hide","text":"Hide the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.hide(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isVisible={false} /> ); } }","title":"hide()"},{"location":"Reference/IconButton/#disable","text":"Disabled the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.disable(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isDisabled={true} /> ); } }","title":"disable()"},{"location":"Reference/IconButton/#enable","text":"Enabled the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.enable(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isDisabled={false} /> ); } }","title":"enable()"},{"location":"Reference/Label/","text":"Label Overview Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Caption of label. options.isRequired Boolean No Display the '*' character at the end of the caption. Default value is false. options.textColor String No Color of caption. Can set like 'red' or '#e74c3c' or 'rgba(0, 0, 0, 1)' options.backgroundColor String No Color of background. Can set like 'red' or '#e74c3c' or 'rgba(0, 0, 0, 1)' options.isDisabled Boolean No The label will be disabled. Default value: 'false' options.isVisible Boolean No The label will be visible. Default value: 'true' Sample Javascript var label = new kintoneUIComponent.Label({ text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } setText(text) Set the value of text field. Parameter Name Type Required Description text String Yes Caption of label. If text is undefined, null or true, The label will be displayed blank Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setText('Name'); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } setTextColor(color) Set color of caption. Parameter Name Type Required Description color String Yes Color of caption. Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setTextColor('#e74c3c'); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' textColor='red' /> ); } } setBackgroundColor(color) Set color of background. Parameter Name Type Required Description color String Yes Color of background. Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setBackgroundColor('#e74c3c'); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' backgroundColor='yellow' /> ); } } setRequired(required) Set the required for the label. Parameter Name Type Required Description required Boolean Yes Required option. This parameter is 'true': The * character will be displayed at the end of the caption. This parameter is 'false': The * character will be hidden Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setRequired(true); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } on(eventName, callBack) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.on('click', function(event) { console.log('on click'); }); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} onClick={this.handleClick} /> ); } handleClick(){ console.log('click'); } } show() Display the Label. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.show(); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isVisible={true} /> ); } } hide() Hide the Label. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.hide(); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isVisible={false} /> ); } } disable() Disabled the Label. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.disable(); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isDisabled={true} /> ); } } enable() Enabled the Label. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.enable(); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isDisabled={false} /> ); } }","title":"Label"},{"location":"Reference/Label/#label","text":"","title":"Label"},{"location":"Reference/Label/#overview","text":"","title":"Overview"},{"location":"Reference/Label/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Caption of label. options.isRequired Boolean No Display the '*' character at the end of the caption. Default value is false. options.textColor String No Color of caption. Can set like 'red' or '#e74c3c' or 'rgba(0, 0, 0, 1)' options.backgroundColor String No Color of background. Can set like 'red' or '#e74c3c' or 'rgba(0, 0, 0, 1)' options.isDisabled Boolean No The label will be disabled. Default value: 'false' options.isVisible Boolean No The label will be visible. Default value: 'true' Sample Javascript var label = new kintoneUIComponent.Label({ text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> ); } }","title":"Constructor"},{"location":"Reference/Label/#methods","text":"","title":"Methods"},{"location":"Reference/Label/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } }","title":"render()"},{"location":"Reference/Label/#settexttext","text":"Set the value of text field. Parameter Name Type Required Description text String Yes Caption of label. If text is undefined, null or true, The label will be displayed blank Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setText('Name'); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } }","title":"setText(text)"},{"location":"Reference/Label/#settextcolorcolor","text":"Set color of caption. Parameter Name Type Required Description color String Yes Color of caption. Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setTextColor('#e74c3c'); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' textColor='red' /> ); } }","title":"setTextColor(color)"},{"location":"Reference/Label/#setbackgroundcolorcolor","text":"Set color of background. Parameter Name Type Required Description color String Yes Color of background. Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setBackgroundColor('#e74c3c'); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' backgroundColor='yellow' /> ); } }","title":"setBackgroundColor(color)"},{"location":"Reference/Label/#setrequiredrequired","text":"Set the required for the label. Parameter Name Type Required Description required Boolean Yes Required option. This parameter is 'true': The * character will be displayed at the end of the caption. This parameter is 'false': The * character will be hidden Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setRequired(true); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } }","title":"setRequired(required)"},{"location":"Reference/Label/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.on('click', function(event) { console.log('on click'); }); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} onClick={this.handleClick} /> ); } handleClick(){ console.log('click'); } }","title":"on(eventName, callBack)"},{"location":"Reference/Label/#show","text":"Display the Label. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.show(); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isVisible={true} /> ); } }","title":"show()"},{"location":"Reference/Label/#hide","text":"Hide the Label. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.hide(); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isVisible={false} /> ); } }","title":"hide()"},{"location":"Reference/Label/#disable","text":"Disabled the Label. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.disable(); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isDisabled={true} /> ); } }","title":"disable()"},{"location":"Reference/Label/#enable","text":"Enabled the Label. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.enable(); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isDisabled={false} /> ); } }","title":"enable()"},{"location":"Reference/MultipleChoice/","text":"MultipleChoice Overview Number Description 1 Title 2 Selected item 3 Not selected item 4 Disabled item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on multiple choices. options.items[].value String Yes String value of item If the value is duplicate, the error message will be displayed options.items[].label String No String label of item options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. options.value Array No List of checked item. If the 'options.value[]' is nonexistent value, the error will be displayed options.isDisabled Boolean No The multiple choices will be disabled. Default value: 'false' options.isVisible Boolean No The multiple choices will be visible. Default value: 'true' Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } addItem(item) Add an item to the end of multile choices list. Parameter Name Type Required Description item Object Yes The item will be added to multile choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.addItem({ label: 'Grape', value: 'Grape', isDisabled: false }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } getItem(index) Get the item of specific position in multiple choices list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item Object The item of specific position in multiple choices list. item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var firstItem = mulChoice.getItem(0); console.log(firstItem); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); let items= [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]); } } removeItem(index) Remove the specific item from multiple choice list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.removeItem(0); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } getItems() Get all items of the multiple choice. Parameter None Returns Multiple choice list item. Name Type Description items Array<Object> List items of the multiple choice items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var items = mulChoice.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } getValue() Get the checked values of multiple choice. Parameter None Returns List of checked items. Name Type Description value Array<String> List selected values of the multiple choice. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var selectedItems = mulChoice.getValue(); selectedItems.forEach(function(item) { console.log(item); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } setValue(value) Set the checked value of multiple choice. Parameter Name Type Required Description value Array<String> yes The value of an item. If the 'value[]' is nonexistent value, the error will be displayed Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.setValue(['Lemon']); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: ['Lemon'] }); } } disableItem(value) Set the disabled items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disableItem('Orange'); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } enableItem(value) Set the enable items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enableItem('Banana'); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.on('change', function(value) { console.log('on change'); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={this.handleChange} /> ); } handleChange= () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } show() Display the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.show(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isVisible={true} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } hide() Hide the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.hide(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isVisible={false} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } disable() Disabled the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disable(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isDisabled={true} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } enable() Enabled the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enable(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isDisabled={false} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"MultipleChoice"},{"location":"Reference/MultipleChoice/#multiplechoice","text":"","title":"MultipleChoice"},{"location":"Reference/MultipleChoice/#overview","text":"Number Description 1 Title 2 Selected item 3 Not selected item 4 Disabled item","title":"Overview"},{"location":"Reference/MultipleChoice/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on multiple choices. options.items[].value String Yes String value of item If the value is duplicate, the error message will be displayed options.items[].label String No String label of item options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. options.value Array No List of checked item. If the 'options.value[]' is nonexistent value, the error will be displayed options.isDisabled Boolean No The multiple choices will be disabled. Default value: 'false' options.isVisible Boolean No The multiple choices will be visible. Default value: 'true' Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/MultipleChoice/#methods","text":"","title":"Methods"},{"location":"Reference/MultipleChoice/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"render()"},{"location":"Reference/MultipleChoice/#additemitem","text":"Add an item to the end of multile choices list. Parameter Name Type Required Description item Object Yes The item will be added to multile choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.addItem({ label: 'Grape', value: 'Grape', isDisabled: false }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } }","title":"addItem(item)"},{"location":"Reference/MultipleChoice/#getitemindex","text":"Get the item of specific position in multiple choices list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item Object The item of specific position in multiple choices list. item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var firstItem = mulChoice.getItem(0); console.log(firstItem); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); let items= [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]); } }","title":"getItem(index)"},{"location":"Reference/MultipleChoice/#removeitemindex","text":"Remove the specific item from multiple choice list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.removeItem(0); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; }","title":"removeItem(index)"},{"location":"Reference/MultipleChoice/#getitems","text":"Get all items of the multiple choice. Parameter None Returns Multiple choice list item. Name Type Description items Array<Object> List items of the multiple choice items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var items = mulChoice.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } }","title":"getItems()"},{"location":"Reference/MultipleChoice/#getvalue","text":"Get the checked values of multiple choice. Parameter None Returns List of checked items. Name Type Description value Array<String> List selected values of the multiple choice. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var selectedItems = mulChoice.getValue(); selectedItems.forEach(function(item) { console.log(item); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } }","title":"getValue()"},{"location":"Reference/MultipleChoice/#setvaluevalue","text":"Set the checked value of multiple choice. Parameter Name Type Required Description value Array<String> yes The value of an item. If the 'value[]' is nonexistent value, the error will be displayed Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.setValue(['Lemon']); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: ['Lemon'] }); } }","title":"setValue(value)"},{"location":"Reference/MultipleChoice/#disableitemvalue","text":"Set the disabled items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disableItem('Orange'); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } }","title":"disableItem(value)"},{"location":"Reference/MultipleChoice/#enableitemvalue","text":"Set the enable items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enableItem('Banana'); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"enableItem(value)"},{"location":"Reference/MultipleChoice/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.on('change', function(value) { console.log('on change'); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={this.handleChange} /> ); } handleChange= () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"on(eventName, callBack)"},{"location":"Reference/MultipleChoice/#show","text":"Display the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.show(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isVisible={true} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"show()"},{"location":"Reference/MultipleChoice/#hide","text":"Hide the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.hide(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isVisible={false} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"hide()"},{"location":"Reference/MultipleChoice/#disable","text":"Disabled the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disable(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isDisabled={true} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"disable()"},{"location":"Reference/MultipleChoice/#enable","text":"Enabled the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enable(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isDisabled={false} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"enable()"},{"location":"Reference/NotifyPopup/","text":"NotifyPopup Overview Number Description 1 Success popup 2 Error popup 3 Icon button for closing popup 4 Title of popup 5 Information popup Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Displayed text on notify popup. options.type String No Type of notify popup: 'error' 'success' 'infor' Default value: 'error' options.isDisabled Boolean No The notify popup will be disabled. Default value: 'false' options.isVisible Boolean No The notify popup will be visible. Default value: 'true' Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } } setText(text) Setting the displayed text on popup. Parameter Name Type Required Description text String Yes Displayed text on notify popup. If text is undefined, null or true, The popup will be displayed blank. Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.setText('Submit failed'); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } } setType(type) Setting type for popup. Parameter Name Type Required Description type String No Type of notify popup: 'error' 'success' 'infor' Default value: 'error' Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.setType('success'); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } } on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.on('click', function(event) { console.log('on click'); }); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} onClick={this.handleClick} /> ); } handleClick(event) { console.log('on click'); } } show() Display the notify popup. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.show(); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } } hide() Hide the notify popup. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.hide(); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={false} /> ); } } disable() Disabled the notify popup. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.disable(); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} isDisabled={true} /> ); } } enable() Enabled the notify popup. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.enable(); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} isDisabled={false} /> ); } }","title":"NotifyPopup"},{"location":"Reference/NotifyPopup/#notifypopup","text":"","title":"NotifyPopup"},{"location":"Reference/NotifyPopup/#overview","text":"Number Description 1 Success popup 2 Error popup 3 Icon button for closing popup 4 Title of popup 5 Information popup","title":"Overview"},{"location":"Reference/NotifyPopup/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Displayed text on notify popup. options.type String No Type of notify popup: 'error' 'success' 'infor' Default value: 'error' options.isDisabled Boolean No The notify popup will be disabled. Default value: 'false' options.isVisible Boolean No The notify popup will be visible. Default value: 'true' Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } }","title":"Constructor"},{"location":"Reference/NotifyPopup/#methods","text":"","title":"Methods"},{"location":"Reference/NotifyPopup/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } }","title":"render()"},{"location":"Reference/NotifyPopup/#settexttext","text":"Setting the displayed text on popup. Parameter Name Type Required Description text String Yes Displayed text on notify popup. If text is undefined, null or true, The popup will be displayed blank. Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.setText('Submit failed'); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } }","title":"setText(text)"},{"location":"Reference/NotifyPopup/#settypetype","text":"Setting type for popup. Parameter Name Type Required Description type String No Type of notify popup: 'error' 'success' 'infor' Default value: 'error' Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.setType('success'); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } }","title":"setType(type)"},{"location":"Reference/NotifyPopup/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.on('click', function(event) { console.log('on click'); }); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} onClick={this.handleClick} /> ); } handleClick(event) { console.log('on click'); } }","title":"on(eventName, callback)"},{"location":"Reference/NotifyPopup/#show","text":"Display the notify popup. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.show(); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} /> ); } }","title":"show()"},{"location":"Reference/NotifyPopup/#hide","text":"Hide the notify popup. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.hide(); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={false} /> ); } }","title":"hide()"},{"location":"Reference/NotifyPopup/#disable","text":"Disabled the notify popup. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.disable(); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} isDisabled={true} /> ); } }","title":"disable()"},{"location":"Reference/NotifyPopup/#enable","text":"Enabled the notify popup. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.enable(); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { isVisible: true } render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={this.state.isVisible} onClose={()=>(this.setState({isVisible: false}))} isDisabled={false} /> ); } }","title":"enable()"},{"location":"Reference/RadioButton/","text":"RadioButton Overview Number Description 1 Title 2 Icon when item is selected 3 Value of item 4 Icon when item isn't selected Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.name String Yes Name of radio button for submit. If value isn't set, the error message will be displayed. options.items Array<Object> No List of item which displayed in radio button. options.items[].value String Yes The value of an item.If the value is duplicate, the error will be displayed options.items[].label String No Display string. options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected item. options.isDisabled Boolean No The radio button will be disabled. Default value: 'false' options.isVisible Boolean No The radio button will be visible. Default value: 'true' Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } addItem(item) Add an item to end of the radio button list. Parameter Name Type Required Description item Object Yes The item object will be added. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [], value: undefined } } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } removeItem(index) Remove item at specific index of radio button list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.removeItem(0); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [{ label: 'Lemon', value: 'Lemon', isDisabled: true }] } } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } getItems() Get all items in radio button list. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); var items = radioBtn.getItems(); items.forEach(function(item) { console.log(item); }); React import { DropDown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } getValue() Get the selected item in radio button. Parameter None Returns Name Type Description value String The value of the selected item Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.getValue(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } setValue(value) Set the selected item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.setValue('Lemon'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } disableItem(value) Set the disabled item for the radio button. Parameter Name Type Required Description value String Yes The value of an item in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disableItem('Orange'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } enableItem(value) Set the enabled item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enableItem('Banana'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.on('change', function(value) { console.log('on change'); }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } show() Display the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.show(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isVisible={true} /> ); } } hide() Hide the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.hide(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={() => {this.setState({value});}} isVisible={false} /> ); } } disable() Disabled the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disable(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); } } enable() Enabled the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enable(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); } }","title":"RadioButton"},{"location":"Reference/RadioButton/#radiobutton","text":"","title":"RadioButton"},{"location":"Reference/RadioButton/#overview","text":"Number Description 1 Title 2 Icon when item is selected 3 Value of item 4 Icon when item isn't selected","title":"Overview"},{"location":"Reference/RadioButton/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.name String Yes Name of radio button for submit. If value isn't set, the error message will be displayed. options.items Array<Object> No List of item which displayed in radio button. options.items[].value String Yes The value of an item.If the value is duplicate, the error will be displayed options.items[].label String No Display string. options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected item. options.isDisabled Boolean No The radio button will be disabled. Default value: 'false' options.isVisible Boolean No The radio button will be visible. Default value: 'true' Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/RadioButton/#methods","text":"","title":"Methods"},{"location":"Reference/RadioButton/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"render()"},{"location":"Reference/RadioButton/#additemitem","text":"Add an item to end of the radio button list. Parameter Name Type Required Description item Object Yes The item object will be added. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [], value: undefined } } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } }","title":"addItem(item)"},{"location":"Reference/RadioButton/#removeitemindex","text":"Remove item at specific index of radio button list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.removeItem(0); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [{ label: 'Lemon', value: 'Lemon', isDisabled: true }] } } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; }","title":"removeItem(index)"},{"location":"Reference/RadioButton/#getitems","text":"Get all items in radio button list. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); var items = radioBtn.getItems(); items.forEach(function(item) { console.log(item); }); React import { DropDown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } }","title":"getItems()"},{"location":"Reference/RadioButton/#getvalue","text":"Get the selected item in radio button. Parameter None Returns Name Type Description value String The value of the selected item Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.getValue(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } }","title":"getValue()"},{"location":"Reference/RadioButton/#setvaluevalue","text":"Set the selected item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.setValue('Lemon'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } }","title":"setValue(value)"},{"location":"Reference/RadioButton/#disableitemvalue","text":"Set the disabled item for the radio button. Parameter Name Type Required Description value String Yes The value of an item in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disableItem('Orange'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } }","title":"disableItem(value)"},{"location":"Reference/RadioButton/#enableitemvalue","text":"Set the enabled item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enableItem('Banana'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } }","title":"enableItem(value)"},{"location":"Reference/RadioButton/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.on('change', function(value) { console.log('on change'); }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } }","title":"on(eventName, callBack)"},{"location":"Reference/RadioButton/#show","text":"Display the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.show(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isVisible={true} /> ); } }","title":"show()"},{"location":"Reference/RadioButton/#hide","text":"Hide the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.hide(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={() => {this.setState({value});}} isVisible={false} /> ); } }","title":"hide()"},{"location":"Reference/RadioButton/#disable","text":"Disabled the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disable(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); } }","title":"disable()"},{"location":"Reference/RadioButton/#enable","text":"Enabled the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enable(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); } }","title":"enable()"},{"location":"Reference/Spinner/","text":"Spinner Overview Constructor Parameter None Sample Javascript var spinner = new kintoneUIComponent.Spinner(); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } show() Display the spinner. Parameter None Returns None Sample Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); spinner.show(); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } hide() Hide the spinner. Parameter None Returns None Sample Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); spinner.hide(); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={false}/> ); } }","title":"Spinner"},{"location":"Reference/Spinner/#spinner","text":"","title":"Spinner"},{"location":"Reference/Spinner/#overview","text":"","title":"Overview"},{"location":"Reference/Spinner/#constructor","text":"Parameter None Sample Javascript var spinner = new kintoneUIComponent.Spinner(); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } }","title":"Constructor"},{"location":"Reference/Spinner/#methods","text":"","title":"Methods"},{"location":"Reference/Spinner/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } }","title":"render()"},{"location":"Reference/Spinner/#show","text":"Display the spinner. Parameter None Returns None Sample Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); spinner.show(); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } }","title":"show()"},{"location":"Reference/Spinner/#hide","text":"Hide the spinner. Parameter None Returns None Sample Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); spinner.hide(); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={false}/> ); } }","title":"hide()"},{"location":"Reference/Table/","text":"Table Overview Number Description 1 Header of column 2 Icon button for insert row 3 Icon button for remove row 4 Child control component 5 Sample row Note Below is the list components that table supports: custom DOM element Text Dropdown CheckBox MultipleChoice RadioButton Label IconButton Alert Constructor Parameter Name Type Required Description options Object Yes The object contains the params of constructor. options.actionButtonsShown Boolean No Show the action buttons when this parameter is True. Default: True options.columns Array<Object> Yes The row template. options.columns[x].cell Function Yes Returns cell template object. Cell template object must implement init and update functions - init: to return DOM element for initializing cell's DOM - update: to update DOM of the cell based on the data returned options.columns[x].header String Yes Header of column. options.data Array<Object> Yes The value of table. Refer to the getValue() and setValue(value) for more information options.defaultRowData Object Yes The default value of new row. options.onCellChange Callback No Handler for cell change event. Return row data object to overwrite default row data object. options.onRowAdd Callback No Handler for row add event options.onRowRemove Callback No Handler for row remove event Sample Javascript (function(){ // custom cell containing 2 text fields var customCell = function() { return { init: function({rowData, updateRowData}) { var span = document.createElement('span'); var textfield1 = new kintoneUIComponent.Text({value: rowData.text1.value}); var textfield2 = new kintoneUIComponent.Text({value: rowData.text2.value}); span.appendChild(textfield1.render()); span.appendChild(textfield2.render()); textfield1.on('change', function(newValue){ updateRowData({text1: {value: newValue}}, false); }); textfield2.on('change', function(newValue){ updateRowData({text2: {value: newValue}}, false); }); this.textfield1 = textfield1; this.textfield2 = textfield2; return span; }, update: function({ rowData }) { var text1val = rowData.text1; var text2val = rowData.text2; if (text1val && this.textfield1._reactObject) { this.textfield1.setValue(text1val.value); } if (text2val && this.textfield2._reactObject) { this.textfield2.setValue(text2val.value); } } } }; // initial data of a table var initialData = [ { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' }, // initial data of radio buttons fruit: { name: 'fruit', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }, // initial data of multiple choices colors: { items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ], value: ['red'] }, // initial data of checkbox vegetables: { items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: false }, { label: 'Carrot', value: 'carrot', isDisabled: true }, ], value: ['potato', 'celery'] }, // initial data of dropdown toys: { items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ], value: 'cars' }, label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, iconBtn: { type: 'insert', color:'blue', size: 'small' }, alert: { text: 'Network error', type: 'error' } }, ]; // default row data of a table, this data will be used to create new row var defaultRowData = { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' }, // default data of radio buttons fruit: { name: 'fruit', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }, // default data of multiple choices colors: { items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ], value: ['red'] }, // default data of checkbox vegetables: { items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: true }, { label: 'Carrot', value: 'carrot', isDisabled: true }, ], value: ['potato', 'celery'] }, // default data of dropdown toys: { items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ], value: 'cars' }, label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, iconBtn: { type: 'insert', color:'blue', size: 'small' }, alert: { text: 'Network error', type: 'error' } }; // return this data to override default row data onRowAdd var overriddenRowData = { text: {value: 'overwritten field value'}, text1: { value: 'overwritten field1 value' }, text2: { value: 'overwritten field2 value' }, // overridden data of radio buttons fruit: { name: 'fruit', items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ], value: 'Banana' }, // overridden data of multiple choices colors: { items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ], value: ['red'] }, // overridden data of checkbox vegetables: { items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: true }, { label: 'Carrot', value: 'carrot', isDisabled: false }, ], value: ['potato', 'celery'] }, // overridden data of dropdown toys: { items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ], value: 'cars' }, label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, iconBtn: { type: 'insert', color:'blue', size: 'small' }, alert: { text: 'Network error', type: 'error' } }; var table = new kintoneUIComponent.Table({ // initial table data data: initialData, // default row data on row add defaultRowData: defaultRowData, onRowAdd: function(e) { console.log('table.onAdd', e); // if onRowAdd does not return anything, defaultRowData will be used to create new table row // if below row data is returned, it will override defaultRowData to be used to create new table row return JSON.parse(JSON.stringify(overriddenRowData)); }, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, { header: 'Radio', cell: function() { return kintoneUIComponent.createTableCell('radio', 'fruit') } }, { header: 'Multichoice', cell: function() { return kintoneUIComponent.createTableCell('multichoice', 'colors') } }, { header: 'Checkbox', cell: function() { return kintoneUIComponent.createTableCell('checkbox', 'vegetables') } }, { header: 'Dropdown', cell: function() { return kintoneUIComponent.createTableCell('dropdown', 'toys') } }, { header: 'Label', cell: function() { return kintoneUIComponent.createTableCell('label', 'label') } }, { header: 'Icon Button', cell: function() { return kintoneUIComponent.createTableCell('icon', 'iconBtn', {onClick:function(event){ alert('icon button clicked') }}) } }, { header: 'Alert', cell: function() { return kintoneUIComponent.createTableCell('alert', 'alert') } }, { header: 'Custom cell contains 2 textfields', cell: function() { return customCell() } }, ] }); kintone.app.getHeaderSpaceElement().appendChild(table.render()); })(); React import React from 'react'; import { Table, Text} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); getValue() Get value of all rows in the table. Parameter None Returns Name Type Description value Array<Object> Value of all rows in the table Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var value = table.getValue(); value.forEach(function(rowData) { console.log(rowData) }); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <Button text=\"Get table value\" onClick={() => { console.log(this.state.tableData) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); setValue(value) Set data for every row in table. The number of rows in table's dependent on the length on this parameters. Parameter Name Type Required Description value Array<Object> Yes Value for every row in table Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.setValue([ {text: { value: 'first row' }}, {text: { value: 'second row' }}, {text: { value: 'third row' }} ]); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <Button text=\"Set table value\" onClick={() => { const tableData = [ {text: 'first row'}, {text: 'second row'}, {text: 'third row'} ] this.setState({tableData}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); on(eventName, callBack) Register callback for an event Parameter Name Type Required Description eventName String Yes Name of events: 'rowAdd' The 'rowAdd' event occurs when adding a new row in the table 'rowRemove' The 'rowRemove' event occurs when removing a row in the table 'cellChange' The 'cellChange' event occurs when the value of an element bellow has been changed: Text Drodown RadioButton MultipleChoice CheckBox callback function Yes callback Returns None Callback data Event Name Type Description rowAdd event Object Callback data event.data Array<Object> Current values of the table event.rowIndex Interger Position of the new row in the table rowRemove event object Callback data event.data Array<Object> Current values of the table event.rowIndex Interger Position of the removed row in the table cellChange event object Callback data event.data Array<Object> Values of the table data.rowIndex Interger Position of the changed row in the table data.fieldName String name of the data property which changed Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.on('rowAdd', function(event) { console.log(event); }); table.on('rowRemove', function(event) { console.log(event); }); table.on('cellChange', function(event) { console.log(event); }); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); show() Display the table Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.show(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, isVisible: false } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, isVisible, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={isVisible} /> <Button text=\"Show table\" onClick={() => { this.setState({isVisible: true}) }} /> </div> ); } } render(<App />, kintone.app.getHeaderSpaceElement()); hide() Hide the table Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.hide(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, isVisible: true } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, isVisible, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={isVisible} /> <Button text=\"Hide table\" onClick={() => { this.setState({isVisible: false}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); showActionButtons() Display table action buttons Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], actionButtonsShown: false, }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.showActionButtons(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, actionButtonsShown: false } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, actionButtonsShown, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={actionButtonsShown} /> <Button text=\"Show action buttons\" onClick={() => { this.setState({actionButtonsShown: true}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); hideActionButtons() Hide table action buttons Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], actionButtonsShown: true, }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.hideActionButtons(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, actionButtonsShown: true } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, actionButtonsShown, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={actionButtonsShown} /> <Button text=\"Hide action buttons\" onClick={() => { this.setState({actionButtonsShown: false}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); updateRowData(rowIndex, data, rerender, trigger) update data of row at rowIndex with new data Parameter Name Type Required Description rowIndex Integer Yes Position of the row which will be updated in the table. data Object Yes Data object for the row. rerender Boolean No If true , will re-render table cells according to new data. Default: true trigger Boolean No If true , will trigger onCellChange event. Default: true Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ { text: { value: 'this is a text field' }, checkbox: { items: [ {label: 'Orange', value: 'Orange', isDisabled: false}, {label: 'Banana', value: 'Banana', isDisabled: true}, {label: 'Lemon', value: 'Lemon', isDisabled: true}, ], value: ['Orange', 'Banana'] }, } ], // default row data on row add defaultRowData: { text: { value: 'default text field value' }, checkbox: { items: [ {label: 'Orange', value: 'Orange', isDisabled: false}, {label: 'Banana', value: 'Banana', isDisabled: true}, {label: 'Lemon', value: 'Lemon', isDisabled: true}, ], value: ['Orange', 'Banana'] }, }, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text', {onChange: function({data, rowIndex}){ data[rowIndex].checkbox.value = ['Lemon']; table.updateRowData(rowIndex, data[rowIndex]); }}) } }, { header: 'Checkbox', cell: function () { return kintoneUIComponent.createTableCell('checkbox', 'checkbox') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <Button text=\"Update row data\" onClick={() => { const {tableData} = this.state tableData[0].text = 'Updated text field value' this.setState({tableData}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); createTableCell(type, dataFieldName, props) create a table cell with 1 of the built-in supported components Note Below is the list components that can be created with createTableCell: Text Dropdown CheckBox MultipleChoice RadioButton Label IconButton Alert Parameter Name Type Required Description type String Yes Type of built-in cell. Can be one of the following types: 'text' 'dropdown' 'checkbox' 'multichoice' 'radio' 'label' 'icon' 'alert' dataFieldName String Yes Name of the data field associated with the table cell. props Object No Additional props to pass to component. Can be used to define custom event handler for component. Returns TableCell Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); TableCell Constructor Name Type Required Description options Object Yes The object contains the params of constructor. options.init Function Yes Cell initialization callback. Used to initialize DOM of a cell options.update Function Yes Cell update callback. Used to update DOM of a cell.","title":"Table"},{"location":"Reference/Table/#table","text":"","title":"Table"},{"location":"Reference/Table/#overview","text":"Number Description 1 Header of column 2 Icon button for insert row 3 Icon button for remove row 4 Child control component 5 Sample row Note Below is the list components that table supports: custom DOM element Text Dropdown CheckBox MultipleChoice RadioButton Label IconButton Alert","title":"Overview"},{"location":"Reference/Table/#constructor","text":"Parameter Name Type Required Description options Object Yes The object contains the params of constructor. options.actionButtonsShown Boolean No Show the action buttons when this parameter is True. Default: True options.columns Array<Object> Yes The row template. options.columns[x].cell Function Yes Returns cell template object. Cell template object must implement init and update functions - init: to return DOM element for initializing cell's DOM - update: to update DOM of the cell based on the data returned options.columns[x].header String Yes Header of column. options.data Array<Object> Yes The value of table. Refer to the getValue() and setValue(value) for more information options.defaultRowData Object Yes The default value of new row. options.onCellChange Callback No Handler for cell change event. Return row data object to overwrite default row data object. options.onRowAdd Callback No Handler for row add event options.onRowRemove Callback No Handler for row remove event Sample Javascript (function(){ // custom cell containing 2 text fields var customCell = function() { return { init: function({rowData, updateRowData}) { var span = document.createElement('span'); var textfield1 = new kintoneUIComponent.Text({value: rowData.text1.value}); var textfield2 = new kintoneUIComponent.Text({value: rowData.text2.value}); span.appendChild(textfield1.render()); span.appendChild(textfield2.render()); textfield1.on('change', function(newValue){ updateRowData({text1: {value: newValue}}, false); }); textfield2.on('change', function(newValue){ updateRowData({text2: {value: newValue}}, false); }); this.textfield1 = textfield1; this.textfield2 = textfield2; return span; }, update: function({ rowData }) { var text1val = rowData.text1; var text2val = rowData.text2; if (text1val && this.textfield1._reactObject) { this.textfield1.setValue(text1val.value); } if (text2val && this.textfield2._reactObject) { this.textfield2.setValue(text2val.value); } } } }; // initial data of a table var initialData = [ { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' }, // initial data of radio buttons fruit: { name: 'fruit', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }, // initial data of multiple choices colors: { items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ], value: ['red'] }, // initial data of checkbox vegetables: { items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: false }, { label: 'Carrot', value: 'carrot', isDisabled: true }, ], value: ['potato', 'celery'] }, // initial data of dropdown toys: { items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ], value: 'cars' }, label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, iconBtn: { type: 'insert', color:'blue', size: 'small' }, alert: { text: 'Network error', type: 'error' } }, ]; // default row data of a table, this data will be used to create new row var defaultRowData = { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' }, // default data of radio buttons fruit: { name: 'fruit', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }, // default data of multiple choices colors: { items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ], value: ['red'] }, // default data of checkbox vegetables: { items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: true }, { label: 'Carrot', value: 'carrot', isDisabled: true }, ], value: ['potato', 'celery'] }, // default data of dropdown toys: { items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ], value: 'cars' }, label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, iconBtn: { type: 'insert', color:'blue', size: 'small' }, alert: { text: 'Network error', type: 'error' } }; // return this data to override default row data onRowAdd var overriddenRowData = { text: {value: 'overwritten field value'}, text1: { value: 'overwritten field1 value' }, text2: { value: 'overwritten field2 value' }, // overridden data of radio buttons fruit: { name: 'fruit', items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ], value: 'Banana' }, // overridden data of multiple choices colors: { items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ], value: ['red'] }, // overridden data of checkbox vegetables: { items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: true }, { label: 'Carrot', value: 'carrot', isDisabled: false }, ], value: ['potato', 'celery'] }, // overridden data of dropdown toys: { items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ], value: 'cars' }, label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, iconBtn: { type: 'insert', color:'blue', size: 'small' }, alert: { text: 'Network error', type: 'error' } }; var table = new kintoneUIComponent.Table({ // initial table data data: initialData, // default row data on row add defaultRowData: defaultRowData, onRowAdd: function(e) { console.log('table.onAdd', e); // if onRowAdd does not return anything, defaultRowData will be used to create new table row // if below row data is returned, it will override defaultRowData to be used to create new table row return JSON.parse(JSON.stringify(overriddenRowData)); }, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, { header: 'Radio', cell: function() { return kintoneUIComponent.createTableCell('radio', 'fruit') } }, { header: 'Multichoice', cell: function() { return kintoneUIComponent.createTableCell('multichoice', 'colors') } }, { header: 'Checkbox', cell: function() { return kintoneUIComponent.createTableCell('checkbox', 'vegetables') } }, { header: 'Dropdown', cell: function() { return kintoneUIComponent.createTableCell('dropdown', 'toys') } }, { header: 'Label', cell: function() { return kintoneUIComponent.createTableCell('label', 'label') } }, { header: 'Icon Button', cell: function() { return kintoneUIComponent.createTableCell('icon', 'iconBtn', {onClick:function(event){ alert('icon button clicked') }}) } }, { header: 'Alert', cell: function() { return kintoneUIComponent.createTableCell('alert', 'alert') } }, { header: 'Custom cell contains 2 textfields', cell: function() { return customCell() } }, ] }); kintone.app.getHeaderSpaceElement().appendChild(table.render()); })(); React import React from 'react'; import { Table, Text} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} /> ); } }","title":"Constructor"},{"location":"Reference/Table/#methods","text":"","title":"Methods"},{"location":"Reference/Table/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"render()"},{"location":"Reference/Table/#getvalue","text":"Get value of all rows in the table. Parameter None Returns Name Type Description value Array<Object> Value of all rows in the table Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var value = table.getValue(); value.forEach(function(rowData) { console.log(rowData) }); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <Button text=\"Get table value\" onClick={() => { console.log(this.state.tableData) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"getValue()"},{"location":"Reference/Table/#setvaluevalue","text":"Set data for every row in table. The number of rows in table's dependent on the length on this parameters. Parameter Name Type Required Description value Array<Object> Yes Value for every row in table Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.setValue([ {text: { value: 'first row' }}, {text: { value: 'second row' }}, {text: { value: 'third row' }} ]); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <Button text=\"Set table value\" onClick={() => { const tableData = [ {text: 'first row'}, {text: 'second row'}, {text: 'third row'} ] this.setState({tableData}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"setValue(value)"},{"location":"Reference/Table/#oneventname-callback","text":"Register callback for an event Parameter Name Type Required Description eventName String Yes Name of events: 'rowAdd' The 'rowAdd' event occurs when adding a new row in the table 'rowRemove' The 'rowRemove' event occurs when removing a row in the table 'cellChange' The 'cellChange' event occurs when the value of an element bellow has been changed: Text Drodown RadioButton MultipleChoice CheckBox callback function Yes callback Returns None Callback data Event Name Type Description rowAdd event Object Callback data event.data Array<Object> Current values of the table event.rowIndex Interger Position of the new row in the table rowRemove event object Callback data event.data Array<Object> Current values of the table event.rowIndex Interger Position of the removed row in the table cellChange event object Callback data event.data Array<Object> Values of the table data.rowIndex Interger Position of the changed row in the table data.fieldName String name of the data property which changed Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.on('rowAdd', function(event) { console.log(event); }); table.on('rowRemove', function(event) { console.log(event); }); table.on('cellChange', function(event) { console.log(event); }); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"on(eventName, callBack)"},{"location":"Reference/Table/#show","text":"Display the table Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.show(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, isVisible: false } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, isVisible, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={isVisible} /> <Button text=\"Show table\" onClick={() => { this.setState({isVisible: true}) }} /> </div> ); } } render(<App />, kintone.app.getHeaderSpaceElement());","title":"show()"},{"location":"Reference/Table/#hide","text":"Hide the table Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.hide(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, isVisible: true } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, isVisible, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={isVisible} /> <Button text=\"Hide table\" onClick={() => { this.setState({isVisible: false}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"hide()"},{"location":"Reference/Table/#showactionbuttons","text":"Display table action buttons Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], actionButtonsShown: false, }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.showActionButtons(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, actionButtonsShown: false } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, actionButtonsShown, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={actionButtonsShown} /> <Button text=\"Show action buttons\" onClick={() => { this.setState({actionButtonsShown: true}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"showActionButtons()"},{"location":"Reference/Table/#hideactionbuttons","text":"Hide table action buttons Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], actionButtonsShown: true, }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.hideActionButtons(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, actionButtonsShown: true } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, actionButtonsShown, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={actionButtonsShown} /> <Button text=\"Hide action buttons\" onClick={() => { this.setState({actionButtonsShown: false}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"hideActionButtons()"},{"location":"Reference/Table/#updaterowdatarowindex-data-rerender-trigger","text":"update data of row at rowIndex with new data Parameter Name Type Required Description rowIndex Integer Yes Position of the row which will be updated in the table. data Object Yes Data object for the row. rerender Boolean No If true , will re-render table cells according to new data. Default: true trigger Boolean No If true , will trigger onCellChange event. Default: true Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ { text: { value: 'this is a text field' }, checkbox: { items: [ {label: 'Orange', value: 'Orange', isDisabled: false}, {label: 'Banana', value: 'Banana', isDisabled: true}, {label: 'Lemon', value: 'Lemon', isDisabled: true}, ], value: ['Orange', 'Banana'] }, } ], // default row data on row add defaultRowData: { text: { value: 'default text field value' }, checkbox: { items: [ {label: 'Orange', value: 'Orange', isDisabled: false}, {label: 'Banana', value: 'Banana', isDisabled: true}, {label: 'Lemon', value: 'Lemon', isDisabled: true}, ], value: ['Orange', 'Banana'] }, }, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text', {onChange: function({data, rowIndex}){ data[rowIndex].checkbox.value = ['Lemon']; table.updateRowData(rowIndex, data[rowIndex]); }}) } }, { header: 'Checkbox', cell: function () { return kintoneUIComponent.createTableCell('checkbox', 'checkbox') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <Button text=\"Update row data\" onClick={() => { const {tableData} = this.state tableData[0].text = 'Updated text field value' this.setState({tableData}) }} /> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"updateRowData(rowIndex, data, rerender, trigger)"},{"location":"Reference/Table/#createtablecelltype-datafieldname-props","text":"create a table cell with 1 of the built-in supported components Note Below is the list components that can be created with createTableCell: Text Dropdown CheckBox MultipleChoice RadioButton Label IconButton Alert Parameter Name Type Required Description type String Yes Type of built-in cell. Can be one of the following types: 'text' 'dropdown' 'checkbox' 'multichoice' 'radio' 'label' 'icon' 'alert' dataFieldName String Yes Name of the data field associated with the table cell. props Object No Additional props to pass to component. Can be used to define custom event handler for component. Returns TableCell Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"createTableCell(type, dataFieldName, props)"},{"location":"Reference/Table/#tablecell","text":"Constructor Name Type Required Description options Object Yes The object contains the params of constructor. options.init Function Yes Cell initialization callback. Used to initialize DOM of a cell options.update Function Yes Cell update callback. Used to update DOM of a cell.","title":"TableCell"},{"location":"Reference/Tabs/","text":"Tabs Overview Number Description 1 Selected Tab 2 Not selected Tab 3 Disabled Tab 4 Tab content Constructor Parameter Name Type Required Description options Object Yes An object contains params of constructor. options.items Array<Object> No List of tabs. options.columns[x].tabName String Yes Name of a tab. options.columns[x].tabContent String No The value of an item. options.columns[x].isDisabled Boolean No Indicate if tab will be disabled. Default value: 'false' options.value Integer No Index of selected tab. Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: \"This is Tab1\" }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } \u3000 ] }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> </div> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var button = new kintoneUIComponent.Button({ text: 'Hello', type: 'submit' }); button.on('click',function(e){ alert('hello') }) var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: button.render() }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } \u3000 ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement() el.appendChild(tab.render()); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); }); addItem(item) Add an item to end of the tab list. Parameter Name Type Required Description item Object Yes The new tab to be added. item.tabName String Yes Name of the new tab. item.tabContent String No Content of the new tab. item.isDisabled Boolean No Indicate tab will be disabled when display. Default value: 'false'. Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); var item = { tabName: \"Tab4\", tabContent: \"This is Tab4\", isDisabled: true }; el.appendChild(tab.render()); tab.addItem(item); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { const item = { tabName: \"Tab4\", tabContent: \"This is Tab4\", isDisabled: true }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); }); removeItem(index) Remove item at specific index of tab list. Parameter Name Type Required Description index Interger Yes The position of tab to be removed. If the index does not define a position in the Item, No item will be removed. Returns None Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); tab.removeItem(0); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { this.setState(prevState => { if (prevState.items) { return prevState.items.splice(0, 1); } return prevState; }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); }); getItems() Get all tabs. Parameter None Return The array contains all tabs. Name Type Description items Array<Object> The new tab to be added. items[].tabName String Name of the new tab. items[].tabContent String Content of the tab. items[].isDisabled Boolean Indicate tab is disabled when display. Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000{ tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); var items = tab.getItems(); items.forEach(function(item) { console.log(item); }); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); }); getValue() Get index of selected item. Parameter None Return Name Type Description value Interger The selected tab index. Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); console.log(tab.getValue()); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1', isDisabled: true }, { tabName: \"Tab2\", tabContent: \"This is Tab2\", isDisabled: false }, { tabName: \"Tab3\", tabContent: \"This is Tab3\", isDisabled: true } ]; this.state = { items: items, value: 0 }; } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} onSelect={(item, index) => {this.setState({value: index})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } setValue(value) Set the selected value for the tab. Parameter Name Type Required Description value Interger Yes The selected tab index. Return None Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); tab.setValue(1); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { this.setState({ value: 0 }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); }); disableItem(tabName) Disable a tab. Parameter Name Type Required Description tabName String Yes The name of tab. Return None Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); tab.disableItem('Tab2'); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Set disabled</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); }); enableItem(tabName) Enable a tab. Parameter Name Type Required Description tabName String Yes The name of tab. Return None Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\", isDisabled: true }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); tab.enableItem('Tab2'); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1', isDisabled: true }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = false; this.setState({ items: items }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Set disabled</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); });","title":"Tabs"},{"location":"Reference/Tabs/#tabs","text":"","title":"Tabs"},{"location":"Reference/Tabs/#overview","text":"Number Description 1 Selected Tab 2 Not selected Tab 3 Disabled Tab 4 Tab content","title":"Overview"},{"location":"Reference/Tabs/#constructor","text":"Parameter Name Type Required Description options Object Yes An object contains params of constructor. options.items Array<Object> No List of tabs. options.columns[x].tabName String Yes Name of a tab. options.columns[x].tabContent String No The value of an item. options.columns[x].isDisabled Boolean No Indicate if tab will be disabled. Default value: 'false' options.value Integer No Index of selected tab. Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: \"This is Tab1\" }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } \u3000 ] }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> </div> ); } }","title":"Constructor"},{"location":"Reference/Tabs/#methods","text":"","title":"Methods"},{"location":"Reference/Tabs/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var button = new kintoneUIComponent.Button({ text: 'Hello', type: 'submit' }); button.on('click',function(e){ alert('hello') }) var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: button.render() }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } \u3000 ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement() el.appendChild(tab.render()); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); });","title":"render()"},{"location":"Reference/Tabs/#additemitem","text":"Add an item to end of the tab list. Parameter Name Type Required Description item Object Yes The new tab to be added. item.tabName String Yes Name of the new tab. item.tabContent String No Content of the new tab. item.isDisabled Boolean No Indicate tab will be disabled when display. Default value: 'false'. Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); var item = { tabName: \"Tab4\", tabContent: \"This is Tab4\", isDisabled: true }; el.appendChild(tab.render()); tab.addItem(item); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { const item = { tabName: \"Tab4\", tabContent: \"This is Tab4\", isDisabled: true }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); });","title":"addItem(item)"},{"location":"Reference/Tabs/#removeitemindex","text":"Remove item at specific index of tab list. Parameter Name Type Required Description index Interger Yes The position of tab to be removed. If the index does not define a position in the Item, No item will be removed. Returns None Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); tab.removeItem(0); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { this.setState(prevState => { if (prevState.items) { return prevState.items.splice(0, 1); } return prevState; }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); });","title":"removeItem(index)"},{"location":"Reference/Tabs/#getitems","text":"Get all tabs. Parameter None Return The array contains all tabs. Name Type Description items Array<Object> The new tab to be added. items[].tabName String Name of the new tab. items[].tabContent String Content of the tab. items[].isDisabled Boolean Indicate tab is disabled when display. Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000{ tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); var items = tab.getItems(); items.forEach(function(item) { console.log(item); }); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); });","title":"getItems()"},{"location":"Reference/Tabs/#getvalue","text":"Get index of selected item. Parameter None Return Name Type Description value Interger The selected tab index. Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); console.log(tab.getValue()); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1', isDisabled: true }, { tabName: \"Tab2\", tabContent: \"This is Tab2\", isDisabled: false }, { tabName: \"Tab3\", tabContent: \"This is Tab3\", isDisabled: true } ]; this.state = { items: items, value: 0 }; } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} onSelect={(item, index) => {this.setState({value: index})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } }","title":"getValue()"},{"location":"Reference/Tabs/#setvaluevalue","text":"Set the selected value for the tab. Parameter Name Type Required Description value Interger Yes The selected tab index. Return None Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); tab.setValue(1); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { this.setState({ value: 0 }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); });","title":"setValue(value)"},{"location":"Reference/Tabs/#disableitemtabname","text":"Disable a tab. Parameter Name Type Required Description tabName String Yes The name of tab. Return None Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); tab.disableItem('Tab2'); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Set disabled</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); });","title":"disableItem(tabName)"},{"location":"Reference/Tabs/#enableitemtabname","text":"Enable a tab. Parameter Name Type Required Description tabName String Yes The name of tab. Return None Sample Javascript var tab = new kintoneUIComponent.Tabs({ items: [ { tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\", isDisabled: true }, \u3000 { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ] }); kintone.events.on('app.record.index.show', function(event) { var el = kintone.app.getHeaderSpaceElement(); el.appendChild(tab.render()); tab.enableItem('Tab2'); }); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; class Sample extends React.Component { constructor(opts) { super(opts); var items = [ { tabName: \"Tab1\", tabContent: 'This is Tab1', isDisabled: true }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" } ]; this.state = { items: items, value: 1}; } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = false; this.setState({ items: items }); } render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.handleClick}>Set disabled</button> </div> ); } } kintone.events.on('app.record.index.show', function (event) { ReactDOM.render( <Sample />, kintone.app.getHeaderSpaceElement() ); });","title":"enableItem(tabName)"},{"location":"Reference/Text/","text":"Text Overview Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.value String No The value of text field. options.isDisabled Boolean No The text field will be disabled. Default value: 'false' options.isVisible Boolean No The text field will be visible. Default value: 'true' Sample Javascript var text= new kintoneUIComponent.Text({value: '12345'}); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } setValue(value) Set the value of text field. Parameter Name Type Required Description text String Yes The value of text field. Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.setValue('input text'); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <div> <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ value: 'samp 1' }); }; } getValue() Get the value of text field. Parameter None Returns Name Type Description value String The value of text field. Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.getValue(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <div> <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { console.log(this.state.value); }; } on(eventName, callBack) Register callback for a event of component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes callback Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.on('click', function(event) { console.log('on click'); }); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} onClick={() => {console.log('click')}} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } show() Display the Text field. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.show(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } hide() Hide the Text field. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.hide(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } disable() Disabled the Text field. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.disable(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } enable() Enabled the Text field. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.enable(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"Text"},{"location":"Reference/Text/#text","text":"","title":"Text"},{"location":"Reference/Text/#overview","text":"","title":"Overview"},{"location":"Reference/Text/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.value String No The value of text field. options.isDisabled Boolean No The text field will be disabled. Default value: 'false' options.isVisible Boolean No The text field will be visible. Default value: 'true' Sample Javascript var text= new kintoneUIComponent.Text({value: '12345'}); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/Text/#methods","text":"","title":"Methods"},{"location":"Reference/Text/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"render()"},{"location":"Reference/Text/#setvaluevalue","text":"Set the value of text field. Parameter Name Type Required Description text String Yes The value of text field. Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.setValue('input text'); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <div> <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ value: 'samp 1' }); }; }","title":"setValue(value)"},{"location":"Reference/Text/#getvalue","text":"Get the value of text field. Parameter None Returns Name Type Description value String The value of text field. Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.getValue(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <div> <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { console.log(this.state.value); }; }","title":"getValue()"},{"location":"Reference/Text/#oneventname-callback","text":"Register callback for a event of component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes callback Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.on('click', function(event) { console.log('on click'); }); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} onClick={() => {console.log('click')}} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"on(eventName, callBack)"},{"location":"Reference/Text/#show","text":"Display the Text field. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.show(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"show()"},{"location":"Reference/Text/#hide","text":"Hide the Text field. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.hide(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"hide()"},{"location":"Reference/Text/#disable","text":"Disabled the Text field. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.disable(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"disable()"},{"location":"Reference/Text/#enable","text":"Enabled the Text field. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.enable(); React import { Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"enable()"},{"location":"Reference/TextArea/","text":"TextArea Overview Number Description 1 Drag and drop this icon to resize textarea Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.value String No The value of textarea field. options.isDisabled Boolean No The textarea field will be disabled. Default value: 'false' options.isVisible Boolean No The textarea field will be visible. Default value: 'true' Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <TextArea value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <TextArea value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } setValue(value) Set the value of textarea field. Parameter Name Type Required Description value String Yes The value of textarea field. Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.setValue('set value into textarea'); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <div> <TextArea value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ value: 'set value into textarea' }); }; } getValue() Get the value of textarea field. Parameter None Returns Name Type Description value String The value of textarea field. Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.getValue(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <div> <TextArea value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { console.log(this.state.value); }; } on(eventName, callBack) Register callback for a event of component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes callback Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.on('click', function(event) { console.log('on click'); }); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} onClick={() => {console.log('click')}} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } show() Display the TextArea field. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.show(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } hide() Hide the TextArea field. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.hide(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } disable() Disabled the TextArea field. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.disable(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } enable() Enabled the TextArea field. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.enable(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"TextArea"},{"location":"Reference/TextArea/#textarea","text":"","title":"TextArea"},{"location":"Reference/TextArea/#overview","text":"Number Description 1 Drag and drop this icon to resize textarea","title":"Overview"},{"location":"Reference/TextArea/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.value String No The value of textarea field. options.isDisabled Boolean No The textarea field will be disabled. Default value: 'false' options.isVisible Boolean No The textarea field will be visible. Default value: 'true' Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <TextArea value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/TextArea/#methods","text":"","title":"Methods"},{"location":"Reference/TextArea/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <TextArea value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"render()"},{"location":"Reference/TextArea/#setvaluevalue","text":"Set the value of textarea field. Parameter Name Type Required Description value String Yes The value of textarea field. Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.setValue('set value into textarea'); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <div> <TextArea value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ value: 'set value into textarea' }); }; }","title":"setValue(value)"},{"location":"Reference/TextArea/#getvalue","text":"Get the value of textarea field. Parameter None Returns Name Type Description value String The value of textarea field. Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.getValue(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <div> <TextArea value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { console.log(this.state.value); }; }","title":"getValue()"},{"location":"Reference/TextArea/#oneventname-callback","text":"Register callback for a event of component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes callback Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.on('click', function(event) { console.log('on click'); }); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} onClick={() => {console.log('click')}} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"on(eventName, callBack)"},{"location":"Reference/TextArea/#show","text":"Display the TextArea field. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.show(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"show()"},{"location":"Reference/TextArea/#hide","text":"Hide the TextArea field. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.hide(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"hide()"},{"location":"Reference/TextArea/#disable","text":"Disabled the TextArea field. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.disable(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"disable()"},{"location":"Reference/TextArea/#enable","text":"Enabled the TextArea field. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.enable(); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: 'textarea'} render() { return ( <TextArea value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } }","title":"enable()"}]}