{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Note We released kintone UI Component version 1.0.0 on 04 March 2021. If you want to use it, please check this website for details. (Now it's only available in Japanese. We will also support English documents in near future.) With the release of v1, we will continue to mainly fix bugs and update libraries for v0. We don't plan to develop new functions for now. Quick start QuickStart Javascript QuickStart React All components are displayed as block (vertically), except for Table , NotifyPopup , Dialog and Spinner components. References Alert Attachment Button CheckBox ColorPicker DateTime Dialog Dropdown FieldGroup IconButton Label MultipleChoice NotifyPopup RadioButton Spinner Table Tabs Text TextArea","title":"Home"},{"location":"#quick-start","text":"QuickStart Javascript QuickStart React All components are displayed as block (vertically), except for Table , NotifyPopup , Dialog and Spinner components.","title":"Quick start"},{"location":"#references","text":"Alert Attachment Button CheckBox ColorPicker DateTime Dialog Dropdown FieldGroup IconButton Label MultipleChoice NotifyPopup RadioButton Spinner Table Tabs Text TextArea","title":"References"},{"location":"versions/","text":"kintone-ui-component Versions Current Version (Latest) Latest version of kintone-ui-component. Versions Documentation Release 0.9.0 Documentation Release Notes Past Versions Here you can find documentation for previous versions of kintone-ui-component. Versions Documentation Release 0.8.3 Documentation Release Notes 0.8.1 Documentation Release Notes 0.8.0 Documentation Release Notes 0.7.8 Documentation Release Notes 0.7.7 Documentation Release Notes 0.7.6 Documentation Release Notes 0.7.5 Documentation Release Notes 0.7.4 Documentation Release Notes 0.7.3 Documentation Release Notes 0.7.2 Documentation Release Notes 0.7.1 Documentation Release Notes 0.7.0 Documentation Release Notes 0.6.0 Documentation Release Notes 0.5.0 Documentation Release Notes 0.4.5 Documentation Release Notes 0.4.3 Documentation Release Notes 0.4.2 Documentation Release Notes 0.4.1 Documentation Release Notes 0.4.0 Documentation Release Notes 0.3.8 Documentation Release Notes 0.3.6 Documentation Release Notes 0.3.5 Documentation Release Notes 0.3.4 Documentation Release Notes 0.3.3 Documentation Release Notes 0.3.2 Documentation Release Notes 0.3.1 Documentation Release Notes 0.3.0 Documentation Release Notes 0.2.0 Documentation Release Notes 0.1.5 Documentation Release Notes","title":"kintone-ui-component Versions"},{"location":"versions/#kintone-ui-component-versions","text":"","title":"kintone-ui-component Versions"},{"location":"versions/#current-version-latest","text":"Latest version of kintone-ui-component. Versions Documentation Release 0.9.0 Documentation Release Notes","title":"Current Version (Latest)"},{"location":"versions/#past-versions","text":"Here you can find documentation for previous versions of kintone-ui-component. Versions Documentation Release 0.8.3 Documentation Release Notes 0.8.1 Documentation Release Notes 0.8.0 Documentation Release Notes 0.7.8 Documentation Release Notes 0.7.7 Documentation Release Notes 0.7.6 Documentation Release Notes 0.7.5 Documentation Release Notes 0.7.4 Documentation Release Notes 0.7.3 Documentation Release Notes 0.7.2 Documentation Release Notes 0.7.1 Documentation Release Notes 0.7.0 Documentation Release Notes 0.6.0 Documentation Release Notes 0.5.0 Documentation Release Notes 0.4.5 Documentation Release Notes 0.4.3 Documentation Release Notes 0.4.2 Documentation Release Notes 0.4.1 Documentation Release Notes 0.4.0 Documentation Release Notes 0.3.8 Documentation Release Notes 0.3.6 Documentation Release Notes 0.3.5 Documentation Release Notes 0.3.4 Documentation Release Notes 0.3.3 Documentation Release Notes 0.3.2 Documentation Release Notes 0.3.1 Documentation Release Notes 0.3.0 Documentation Release Notes 0.2.0 Documentation Release Notes 0.1.5 Documentation Release Notes","title":"Past Versions"},{"location":"Getting-Started/QuickStart-Javascript/","text":"QuickStart Javascript ESM usage Step 1: Run commands $ mkdir my-customization $ cd my-customization $ npm init -y $ npm install cross-env css-loader style-loader webpack@^4.46.0 webpack-cli@^3.3.12 babel-loader @babel/core @babel/preset-env@^7.2.3 tslib --save $ npm install @kintone/kintone-ui-component $ mkdir src Step 2: Add index.js file to src/ folder: import {Button} from '@kintone/kintone-ui-component/esm/js' (function () { kintone.events.on(\"app.record.index.show\", function () { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); var button = new Button({text: 'Submit', type:'submit'}); button.on('click', function(){ alert('This is my customization'); }) kintoneSpaceElement.appendChild(button.render()); }); })(); Step 3: Add webpack.config.js file to my-customization/ folder const path = require('path'); module.exports = (env = {}) => { return { entry: { \"my-customization.min\": './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { \"presets\": [ \"@babel/env\" ] } } }, { test: /\\.css$/, use: [ { loader: \"style-loader\" }, { loader: \"css-loader\" } ] } ] }, watch: env.watch } } Step 4: Add a script for buiding by webpack to package.json \"scripts\": { \"build-webpack\": \"rm -rf dist && webpack --mode production\", ... } Run command to build the customization file $ npm run build-webpack result: * ./dist/my-customization.min.js Attach my-customization.min.js into kintone app setting UMD usage (function(){ var current_vesion = document.getElementById('current_vesion').getAttribute('data-version'); var content = '* Attach 2 below files from \"./dist\" the folder in '; content += '<a target=\"_blank\" href=\"https://github.com/kintone-labs/kintone-ui-component/releases/tag/v'+current_vesion+'\">kintone-kintone-ui-component-'+current_vesion+'.tgz</a>'; content += ' into kintone app.'; document.getElementById(\"attach_files\").innerHTML = content; })(); ./dist/kintone-ui-component.min.js ./dist/kintone-ui-component.min.css Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); var button = new kintoneUIComponent.Button({ text: 'Submit' }); kintoneSpaceElement.appendChild(button.render()); button.on('click', function(){ alert('This is my customization'); }) }); })(); Attach index.js file into kintone app setting","title":"QuickStart Javascript"},{"location":"Getting-Started/QuickStart-Javascript/#quickstart-javascript","text":"","title":"QuickStart Javascript"},{"location":"Getting-Started/QuickStart-Javascript/#esm-usage","text":"Step 1: Run commands $ mkdir my-customization $ cd my-customization $ npm init -y $ npm install cross-env css-loader style-loader webpack@^4.46.0 webpack-cli@^3.3.12 babel-loader @babel/core @babel/preset-env@^7.2.3 tslib --save $ npm install @kintone/kintone-ui-component $ mkdir src Step 2: Add index.js file to src/ folder: import {Button} from '@kintone/kintone-ui-component/esm/js' (function () { kintone.events.on(\"app.record.index.show\", function () { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); var button = new Button({text: 'Submit', type:'submit'}); button.on('click', function(){ alert('This is my customization'); }) kintoneSpaceElement.appendChild(button.render()); }); })(); Step 3: Add webpack.config.js file to my-customization/ folder const path = require('path'); module.exports = (env = {}) => { return { entry: { \"my-customization.min\": './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { \"presets\": [ \"@babel/env\" ] } } }, { test: /\\.css$/, use: [ { loader: \"style-loader\" }, { loader: \"css-loader\" } ] } ] }, watch: env.watch } } Step 4: Add a script for buiding by webpack to package.json \"scripts\": { \"build-webpack\": \"rm -rf dist && webpack --mode production\", ... } Run command to build the customization file $ npm run build-webpack result: * ./dist/my-customization.min.js Attach my-customization.min.js into kintone app setting","title":"ESM usage"},{"location":"Getting-Started/QuickStart-Javascript/#umd-usage","text":"(function(){ var current_vesion = document.getElementById('current_vesion').getAttribute('data-version'); var content = '* Attach 2 below files from \"./dist\" the folder in '; content += '<a target=\"_blank\" href=\"https://github.com/kintone-labs/kintone-ui-component/releases/tag/v'+current_vesion+'\">kintone-kintone-ui-component-'+current_vesion+'.tgz</a>'; content += ' into kintone app.'; document.getElementById(\"attach_files\").innerHTML = content; })(); ./dist/kintone-ui-component.min.js ./dist/kintone-ui-component.min.css Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); var button = new kintoneUIComponent.Button({ text: 'Submit' }); kintoneSpaceElement.appendChild(button.render()); button.on('click', function(){ alert('This is my customization'); }) }); })(); Attach index.js file into kintone app setting","title":"UMD usage"},{"location":"Getting-Started/QuickStart-React/","text":"QuickStart React Requirement Nodejs Git ESM usage with JSX Step 1: init your project $ mkdir customization $ cd customization $ npm init -y Step 2: install devDependencies $ npm i -D webpack-cli webpack $ npm i -D tslib babel-loader @babel/core @babel/preset-env @babel/preset-react $ npm i -D style-loader css-loader $ npm i -D react@17.0.2 react-dom@17.0.2 $ npm i -D @kintone/kintone-ui-component Step 3: creating /customization/src/index.jsx import React, { Component } from 'react'; import ReactDOM from 'react-dom'; import {Button} from '@kintone/kintone-ui-component'; class MyCustomization extends Component { constructor(props) { super(props); } render() { return ( <Button text='Submit' type='submit' onClick={function() {alert('This is my customization');}}/> ); } } // Adding your customization into header space of kintone app kintone.events.on(\"app.record.index.show\", function(ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); ReactDOM.render(<MyCustomization />, kintoneSpaceElement); }); Step 4: creating /customization/webpack.config.js const path = require('path'); module.exports = (env = {}) => { return { entry: { \"customization.min\": './src/index.jsx' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.jsx$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { presets: ['@babel/preset-react', '@babel/preset-env'] } } }, { test: /\\.css$/i, use: [\"style-loader\", \"css-loader\"], } ] } } } Step 5: Add a script to buiding by webpack to package.json \"scripts\": { \"build:webpack\": \"webpack --mode=production\", ... } Run command to build the customization file $ npm run build:webpack result: * ./dist/customization.min.js Attach customization.min.js into kintone app setting UMD usage without JSX Attach 'react' and 'react-dom' UMD scripts into kintone app https://unpkg.com/react@17/umd/react.production.min.js https://unpkg.com/react-dom@17/umd/react-dom.production.min.js (function(){ var current_vesion = document.getElementById('current_vesion').getAttribute('data-version'); var content = '* Attach 2 below files from \"./dist\" the folder in '; content += '<a target=\"_blank\" href=\"https://github.com/kintone-labs/kintone-ui-component/releases/tag/v'+current_vesion+'\">kintone-kintone-ui-component-'+current_vesion+'.tgz</a>'; content += ' into kintone app.'; document.getElementById(\"attach_files\").innerHTML = content; })(); ./dist/react/kintone-ui-component.min.js ./dist/react/kintone-ui-component.min.css Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); ReactDOM.render( React.createElement(kintoneUIComponent.Button, {text: 'Submit', type: 'submit', onClick: function(){ alert('This is my customization'); }}), kintoneSpaceElement ); }); })(); Attach index.js file into kintone app setting","title":"QuickStart React"},{"location":"Getting-Started/QuickStart-React/#quickstart-react","text":"","title":"QuickStart React"},{"location":"Getting-Started/QuickStart-React/#requirement","text":"Nodejs Git","title":"Requirement"},{"location":"Getting-Started/QuickStart-React/#esm-usage-with-jsx","text":"Step 1: init your project $ mkdir customization $ cd customization $ npm init -y Step 2: install devDependencies $ npm i -D webpack-cli webpack $ npm i -D tslib babel-loader @babel/core @babel/preset-env @babel/preset-react $ npm i -D style-loader css-loader $ npm i -D react@17.0.2 react-dom@17.0.2 $ npm i -D @kintone/kintone-ui-component Step 3: creating /customization/src/index.jsx import React, { Component } from 'react'; import ReactDOM from 'react-dom'; import {Button} from '@kintone/kintone-ui-component'; class MyCustomization extends Component { constructor(props) { super(props); } render() { return ( <Button text='Submit' type='submit' onClick={function() {alert('This is my customization');}}/> ); } } // Adding your customization into header space of kintone app kintone.events.on(\"app.record.index.show\", function(ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); ReactDOM.render(<MyCustomization />, kintoneSpaceElement); }); Step 4: creating /customization/webpack.config.js const path = require('path'); module.exports = (env = {}) => { return { entry: { \"customization.min\": './src/index.jsx' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.jsx$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { presets: ['@babel/preset-react', '@babel/preset-env'] } } }, { test: /\\.css$/i, use: [\"style-loader\", \"css-loader\"], } ] } } } Step 5: Add a script to buiding by webpack to package.json \"scripts\": { \"build:webpack\": \"webpack --mode=production\", ... } Run command to build the customization file $ npm run build:webpack result: * ./dist/customization.min.js Attach customization.min.js into kintone app setting","title":"ESM usage with JSX"},{"location":"Getting-Started/QuickStart-React/#umd-usage-without-jsx","text":"Attach 'react' and 'react-dom' UMD scripts into kintone app https://unpkg.com/react@17/umd/react.production.min.js https://unpkg.com/react-dom@17/umd/react-dom.production.min.js (function(){ var current_vesion = document.getElementById('current_vesion').getAttribute('data-version'); var content = '* Attach 2 below files from \"./dist\" the folder in '; content += '<a target=\"_blank\" href=\"https://github.com/kintone-labs/kintone-ui-component/releases/tag/v'+current_vesion+'\">kintone-kintone-ui-component-'+current_vesion+'.tgz</a>'; content += ' into kintone app.'; document.getElementById(\"attach_files\").innerHTML = content; })(); ./dist/react/kintone-ui-component.min.js ./dist/react/kintone-ui-component.min.css Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); ReactDOM.render( React.createElement(kintoneUIComponent.Button, {text: 'Submit', type: 'submit', onClick: function(){ alert('This is my customization'); }}), kintoneSpaceElement ); }); })(); Attach index.js file into kintone app setting","title":"UMD usage without JSX"},{"location":"Reference/Alert/","text":"Alert Overview Number Description 1 Success alert 2 Error alert 3 Display text Constructor Parameter Name Type Required Description options Object No The object contains parameter of the constructor. options.text String No The content of the alert. options.type String No The type of alert: 'error' 'success' Default value is 'error'. options.isVisible Boolean No The alert will be visible. Default value: 'true' Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Methods render() Get dom element of the component. Parameter None Returns Dom element Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); })() React import { Alert} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } setText(text) Set the content of the alert. Parameter Name Type Required Description text String Yes The content of the alert. If text is undefined, null or true, The alert will be displayed blank. Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setText('Network error'); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = { text: \"abc\", type: \"error\" }; } setText = (text) => { this.setState({ text }); }; render() { return ( <div> <button onClick={()=>this.setText(\"790\")}>Set Text</button> <Alert text={this.state.text} type={this.state.type} /> </div> ); } } Reactdom.render(<Plugin/>, kintoneSpaceElement); setType(type) Set the type of the alert. Parameter Name Type Required Description type String Yes The type of alert. \"success\": success alert. \"error\": error alert Default value is \"error\". Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setType('success'); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = { text: \"abc\", type: \"error\" }; } setType = (type) => { this.setState({ type }); }; render() { return ( <div> <button onClick={()=>this.setType(\"success\")}>Set Type</button> <Alert text={this.state.text} type={this.state.type} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callBack) The callBack function will be executed after user click the alert. Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.on('click', function(event) { console.log('on click'); }); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' onClick={this.handleClick}/> ); } handleClick(){ console.log('click'); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display the Alert. Parameter None Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.show(); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = { text: \"abc\", isVisible:false }; } show = () => { this.setState({ isVisible:true }); }; render() { return ( <div> <button onClick={()=>this.show()}>Show</button> <Alert text={this.state.text} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide the Alert. Parameter None Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.hide(); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = { text: \"abc\", isVisible:true }; } hide = () => { this.setState({ isVisible:false }); }; render() { return ( <div> <button onClick={()=>this.hide()}>Hide</button> <Alert text={this.state.text} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"Alert"},{"location":"Reference/Alert/#alert","text":"","title":"Alert"},{"location":"Reference/Alert/#overview","text":"Number Description 1 Success alert 2 Error alert 3 Display text","title":"Overview"},{"location":"Reference/Alert/#constructor","text":"Parameter Name Type Required Description options Object No The object contains parameter of the constructor. options.text String No The content of the alert. options.type String No The type of alert: 'error' 'success' Default value is 'error'. options.isVisible Boolean No The alert will be visible. Default value: 'true' Sample Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } }","title":"Constructor"},{"location":"Reference/Alert/#methods","text":"","title":"Methods"},{"location":"Reference/Alert/#render","text":"Get dom element of the component. Parameter None Returns Dom element Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); })() React import { Alert} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } }","title":"render()"},{"location":"Reference/Alert/#settexttext","text":"Set the content of the alert. Parameter Name Type Required Description text String Yes The content of the alert. If text is undefined, null or true, The alert will be displayed blank. Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setText('Network error'); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = { text: \"abc\", type: \"error\" }; } setText = (text) => { this.setState({ text }); }; render() { return ( <div> <button onClick={()=>this.setText(\"790\")}>Set Text</button> <Alert text={this.state.text} type={this.state.type} /> </div> ); } } Reactdom.render(<Plugin/>, kintoneSpaceElement);","title":"setText(text)"},{"location":"Reference/Alert/#settypetype","text":"Set the type of the alert. Parameter Name Type Required Description type String Yes The type of alert. \"success\": success alert. \"error\": error alert Default value is \"error\". Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setType('success'); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = { text: \"abc\", type: \"error\" }; } setType = (type) => { this.setState({ type }); }; render() { return ( <div> <button onClick={()=>this.setType(\"success\")}>Set Type</button> <Alert text={this.state.text} type={this.state.type} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setType(type)"},{"location":"Reference/Alert/#oneventname-callback","text":"The callBack function will be executed after user click the alert. Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.on('click', function(event) { console.log('on click'); }); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' onClick={this.handleClick}/> ); } handleClick(){ console.log('click'); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callBack)"},{"location":"Reference/Alert/#show","text":"Display the Alert. Parameter None Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.show(); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = { text: \"abc\", isVisible:false }; } show = () => { this.setState({ isVisible:true }); }; render() { return ( <div> <button onClick={()=>this.show()}>Show</button> <Alert text={this.state.text} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/Alert/#hide","text":"Hide the Alert. Parameter None Returns None Sample Javascript (function(){ var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.hide(); })() React import { Alert } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = { text: \"abc\", isVisible:true }; } hide = () => { this.setState({ isVisible:false }); }; render() { return ( <div> <button onClick={()=>this.hide()}>Hide</button> <Alert text={this.state.text} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/Attachment/","text":"Attachment Overview Number Description 1 \"X\" button to remove the related file 2 File name If the length is too long, it will show like \"xxx...\" 3 File size If the length is too long, it will show like \"xxx...\" There are 4 types to show the size. 1. size >= 1073741824 : xxx GB 2. 1073741824 > size >= 1048576 : xxx MB 3. 1048576 > size >= 1024 : xxx KB 4. 1024 > size : xxx bytes 4 Link to show \"file select\" pop-up box 5 Text to show file limit message 6 Error message 7 Drag drop zone Constructor Parameter Name Type Required Description options Object No An object contains parameter of the constructor. options.dropZoneText String No Text will show when the file is dragged over the attachment field. (item 7) Default value: 'Drop files here.' options.browseButtonText String No Text of the browse button. (item 4) Default value: 'Browse' options.fileLimitText String No Text of the file limit warn part. (item 5) options.errorMessage String No Error message (item 6) options.isErrorVisible Boolean No Only when it is true , \"errorMessage\" will show. Default value: false options.files Array<Object> No File objects (ref. https://developer.mozilla.org/en-US/docs/Web/API/File ) Or objects contain \"name\" and \"size\" options.files[].name String No The file name options.files[].size Integer No The file size options.isVisible Boolean No The attachment component will be visible. Default value: true Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return (<Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} />); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return (<Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} />); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setFiles(files) Set the files of attachment field. Parameter Name Type Required Description files Array<Object> Yes File objects (ref. https://developer.mozilla.org/en-US/docs/Web/API/File ) Or objects contain \"name\" and \"size\" files[].name String No The file name files[].size Integer No The file size Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); const button = new kintoneUIComponent.Button({text: 'Set Files'}); body.appendChild(button.render()); button.on('click', () => { attachment.setFiles([{name: 'test_1', size: 12345}]); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; handleClick = () => { this.setState({files: [{name: 'test_1', size: 12345}]}); }; render() { return ( <div> <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={this.handleClick}>Set Files</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getFiles() Get all files information on attachment field. Parameter None Returns Name Type Description files Array<Object> List of all file objects in the attachment field Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); body.appendChild(attachment.render()); const button = new kintoneUIComponent.Button({text: 'Get Files'}); body.appendChild(button.render()); button.on('click', () => { console.log('files:', attachment.getFiles()); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; handleClick = () => { console.log('files:', this.state.files); }; render() { return ( <div> <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={this.handleClick}>Get Files</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setDropZoneText(dropZoneText) Set the text of the drop zone Parameter Name Type Required Description dropZoneText String Yes Text will show when the file is dragged over the attachment field. Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setDropZoneText('Drop files here.'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [],dropZoneText:\"Drop files here.\" }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; setDropZoneText = dropZoneText => { this.setState({ dropZoneText }); }; render() { return ( <div> <button onClick={()=>this.setDropZoneText(\"new drop file\")}>setDropZoneText</button> <Attachment files={this.state.files} dropZoneText={this.state.dropZoneText} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setBrowseButtonText(browseButtonText) Set the text of the browse button Parameter Name Type Required Description browseButtonText String Yes Text of the browse button Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setBrowseButtonText('Browse'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], browseButtonText: \"Browse\" }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; browseButtonText = browseButtonText => { this.setState({ browseButtonText }); }; render() { return ( <div> <Attachment files={this.state.files} browseButtonText={this.state.browseButtonText} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.browseButtonText(\"new browse\")}>Set Browse Button Text</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setFileLimitText(fileLimitText) Set the text of the file limit warn part. Parameter Name Type Required Description fileLimitText String Yes Text of the file limit warn part Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setFileLimitText('Maximum: 1 GB'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], fileLimitText: \"Maximum: 1 GB\" }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; setFileLimitText = fileLimitText => { this.setState({ fileLimitText }); }; render() { return ( <div> <Attachment files={this.state.files} fileLimitText={this.state.fileLimitText} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.setFileLimitText(\"new file limit text\")}>Set File Limit Text</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setErrorMessage(errorMessage) Set the error message. Parameter Name Type Required Description errorMessage String Yes Error message Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setErrorMessage('Error message'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\" }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; setErrorMessage = errorMessage => { this.setState({ errorMessage }); }; render() { return ( <div> <Attachment files={this.state.files} errorMessage={this.state.errorMessage} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.setErrorMessage(\"new error message\")}>Set Error Message</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); showError() Show the error message Parameter None Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({errorMessage: 'Error message'}); body.appendChild(attachment.render()); const showButton = new kintoneUIComponent.Button({text: 'Show Error'}); body.appendChild(showButton.render()); showButton.on('click', () => { attachment.showError(); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\",isErrorVisible:false }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; showError = () => { this.setState({ isErrorVisible: true }); }; render() { return ( <div> <Attachment files={this.state.files} errorMessage={this.state.errorMessage} isErrorVisible={this.state.isErrorVisible} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.showError()}>Show error</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hideError() Hide the error message Parameter None Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({errorMessage: 'Error message'}); body.appendChild(attachment.render()); const showButton = new kintoneUIComponent.Button({text: 'Show Error'}); body.appendChild(showButton.render()); showButton.on('click', () => { attachment.showError(); }); const hideButton = new kintoneUIComponent.Button({text: 'Hide Error'}); body.appendChild(hideButton.render()); hideButton.on('click', () => { attachment.hideError(); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\",isErrorVisible:true }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; hideError = () => { this.setState({ isErrorVisible: false }); }; render() { return ( <div> <Attachment files={this.state.files} errorMessage={this.state.errorMessage} isErrorVisible={this.state.isErrorVisible} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.hideError()}>Hide error</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callBack) Register callback for an event Parameter Name Type Required Description eventName String Yes Name of event: 'filesAdd' 'fileRemove' callback Function Yes callback Returns Callback data Event Name Type Description filesAdd files Array<Object> List of all file objects that are displayed in the attachment field after files are added. fileRemove files Array<Object> List of all file objects that are displayed in the attachment field after a file is removed. Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.on('filesAdd', (files) => { console.log('files:', files); }); attachment.on('fileRemove', (files) => { console.log('files:', files); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); console.log('files:', files); }; handleFileRemove = (files) => { this.setState({files}); console.log('files:', files); }; render() { return ( <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display the attachment component. Parameter None Returns None Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); attachment.show(); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\",isVisible:false }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <Attachment files={this.state.files} isVisible={this.state.isVisible} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.show()}>Show</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide the the attachment component.. Parameter None Returns None Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); attachment.hide(); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\",isVisible:true }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; hide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <Attachment files={this.state.files} isVisible={this.state.isVisible} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.hide()}>Hide</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"Attachment"},{"location":"Reference/Attachment/#attachment","text":"","title":"Attachment"},{"location":"Reference/Attachment/#overview","text":"Number Description 1 \"X\" button to remove the related file 2 File name If the length is too long, it will show like \"xxx...\" 3 File size If the length is too long, it will show like \"xxx...\" There are 4 types to show the size. 1. size >= 1073741824 : xxx GB 2. 1073741824 > size >= 1048576 : xxx MB 3. 1048576 > size >= 1024 : xxx KB 4. 1024 > size : xxx bytes 4 Link to show \"file select\" pop-up box 5 Text to show file limit message 6 Error message 7 Drag drop zone","title":"Overview"},{"location":"Reference/Attachment/#constructor","text":"Parameter Name Type Required Description options Object No An object contains parameter of the constructor. options.dropZoneText String No Text will show when the file is dragged over the attachment field. (item 7) Default value: 'Drop files here.' options.browseButtonText String No Text of the browse button. (item 4) Default value: 'Browse' options.fileLimitText String No Text of the file limit warn part. (item 5) options.errorMessage String No Error message (item 6) options.isErrorVisible Boolean No Only when it is true , \"errorMessage\" will show. Default value: false options.files Array<Object> No File objects (ref. https://developer.mozilla.org/en-US/docs/Web/API/File ) Or objects contain \"name\" and \"size\" options.files[].name String No The file name options.files[].size Integer No The file size options.isVisible Boolean No The attachment component will be visible. Default value: true Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return (<Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} />); } }","title":"Constructor"},{"location":"Reference/Attachment/#methods","text":"","title":"Methods"},{"location":"Reference/Attachment/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; render() { return (<Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} />); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/Attachment/#setfilesfiles","text":"Set the files of attachment field. Parameter Name Type Required Description files Array<Object> Yes File objects (ref. https://developer.mozilla.org/en-US/docs/Web/API/File ) Or objects contain \"name\" and \"size\" files[].name String No The file name files[].size Integer No The file size Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); const button = new kintoneUIComponent.Button({text: 'Set Files'}); body.appendChild(button.render()); button.on('click', () => { attachment.setFiles([{name: 'test_1', size: 12345}]); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; handleClick = () => { this.setState({files: [{name: 'test_1', size: 12345}]}); }; render() { return ( <div> <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={this.handleClick}>Set Files</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setFiles(files)"},{"location":"Reference/Attachment/#getfiles","text":"Get all files information on attachment field. Parameter None Returns Name Type Description files Array<Object> List of all file objects in the attachment field Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); body.appendChild(attachment.render()); const button = new kintoneUIComponent.Button({text: 'Get Files'}); body.appendChild(button.render()); button.on('click', () => { console.log('files:', attachment.getFiles()); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); }; handleFileRemove = (files) => { this.setState({files}); }; handleClick = () => { console.log('files:', this.state.files); }; render() { return ( <div> <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={this.handleClick}>Get Files</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getFiles()"},{"location":"Reference/Attachment/#setdropzonetextdropzonetext","text":"Set the text of the drop zone Parameter Name Type Required Description dropZoneText String Yes Text will show when the file is dragged over the attachment field. Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setDropZoneText('Drop files here.'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [],dropZoneText:\"Drop files here.\" }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; setDropZoneText = dropZoneText => { this.setState({ dropZoneText }); }; render() { return ( <div> <button onClick={()=>this.setDropZoneText(\"new drop file\")}>setDropZoneText</button> <Attachment files={this.state.files} dropZoneText={this.state.dropZoneText} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setDropZoneText(dropZoneText)"},{"location":"Reference/Attachment/#setbrowsebuttontextbrowsebuttontext","text":"Set the text of the browse button Parameter Name Type Required Description browseButtonText String Yes Text of the browse button Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setBrowseButtonText('Browse'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], browseButtonText: \"Browse\" }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; browseButtonText = browseButtonText => { this.setState({ browseButtonText }); }; render() { return ( <div> <Attachment files={this.state.files} browseButtonText={this.state.browseButtonText} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.browseButtonText(\"new browse\")}>Set Browse Button Text</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setBrowseButtonText(browseButtonText)"},{"location":"Reference/Attachment/#setfilelimittextfilelimittext","text":"Set the text of the file limit warn part. Parameter Name Type Required Description fileLimitText String Yes Text of the file limit warn part Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setFileLimitText('Maximum: 1 GB'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], fileLimitText: \"Maximum: 1 GB\" }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; setFileLimitText = fileLimitText => { this.setState({ fileLimitText }); }; render() { return ( <div> <Attachment files={this.state.files} fileLimitText={this.state.fileLimitText} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.setFileLimitText(\"new file limit text\")}>Set File Limit Text</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setFileLimitText(fileLimitText)"},{"location":"Reference/Attachment/#seterrormessageerrormessage","text":"Set the error message. Parameter Name Type Required Description errorMessage String Yes Error message Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.setErrorMessage('Error message'); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\" }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; setErrorMessage = errorMessage => { this.setState({ errorMessage }); }; render() { return ( <div> <Attachment files={this.state.files} errorMessage={this.state.errorMessage} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.setErrorMessage(\"new error message\")}>Set Error Message</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setErrorMessage(errorMessage)"},{"location":"Reference/Attachment/#showerror","text":"Show the error message Parameter None Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({errorMessage: 'Error message'}); body.appendChild(attachment.render()); const showButton = new kintoneUIComponent.Button({text: 'Show Error'}); body.appendChild(showButton.render()); showButton.on('click', () => { attachment.showError(); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\",isErrorVisible:false }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; showError = () => { this.setState({ isErrorVisible: true }); }; render() { return ( <div> <Attachment files={this.state.files} errorMessage={this.state.errorMessage} isErrorVisible={this.state.isErrorVisible} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.showError()}>Show error</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"showError()"},{"location":"Reference/Attachment/#hideerror","text":"Hide the error message Parameter None Returns None Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment({errorMessage: 'Error message'}); body.appendChild(attachment.render()); const showButton = new kintoneUIComponent.Button({text: 'Show Error'}); body.appendChild(showButton.render()); showButton.on('click', () => { attachment.showError(); }); const hideButton = new kintoneUIComponent.Button({text: 'Hide Error'}); body.appendChild(hideButton.render()); hideButton.on('click', () => { attachment.hideError(); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\",isErrorVisible:true }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; hideError = () => { this.setState({ isErrorVisible: false }); }; render() { return ( <div> <Attachment files={this.state.files} errorMessage={this.state.errorMessage} isErrorVisible={this.state.isErrorVisible} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.hideError()}>Hide error</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hideError()"},{"location":"Reference/Attachment/#oneventname-callback","text":"Register callback for an event Parameter Name Type Required Description eventName String Yes Name of event: 'filesAdd' 'fileRemove' callback Function Yes callback Returns Callback data Event Name Type Description filesAdd files Array<Object> List of all file objects that are displayed in the attachment field after files are added. fileRemove files Array<Object> List of all file objects that are displayed in the attachment field after a file is removed. Sample Javascript const body = document.getElementsByTagName(\"BODY\")[0]; const attachment = new kintoneUIComponent.Attachment(); body.appendChild(attachment.render()); attachment.on('filesAdd', (files) => { console.log('files:', files); }); attachment.on('fileRemove', (files) => { console.log('files:', files); }); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {files: []}; }; handleFilesAdd = (files) => { this.setState({files}); console.log('files:', files); }; handleFileRemove = (files) => { this.setState({files}); console.log('files:', files); }; render() { return ( <Attachment files={this.state.files} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callBack)"},{"location":"Reference/Attachment/#show","text":"Display the attachment component. Parameter None Returns None Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); attachment.show(); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\",isVisible:false }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <Attachment files={this.state.files} isVisible={this.state.isVisible} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.show()}>Show</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/Attachment/#hide","text":"Hide the the attachment component.. Parameter None Returns None Sample Javascript const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const body = document.getElementsByTagName('BODY')[0]; body.appendChild(attachment.render()); attachment.hide(); React import {Attachment} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { files: [], errorMessage: \"error message\",isVisible:true }; } handleFilesAdd = files => { this.setState({ files }); }; handleFileRemove = files => { this.setState({ files }); }; hide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <Attachment files={this.state.files} isVisible={this.state.isVisible} onFilesAdd={this.handleFilesAdd} onFileRemove={this.handleFileRemove} /> <button onClick={()=>this.hide()}>Hide</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/Button/","text":"Button Overview Number Description 1 Normal button 2 Submit button Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Text will be displayed in button. options.type String No Style of the button: 'normal' 'submit' Default value: 'normal' options.isDisabled Boolean No The button will be disabled. Default value: 'false' options.isVisible Boolean No The button will be visible. Default value: 'true' Sample Javascript var button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setText(text) Set displayed text in button. Parameter Name Type Required Description text String Yes Display text in button Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setText('submit'); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ text:\"Submit\" } } setText=(text)=>{ this.setState({text}) } render() { return ( <div> <Button text={this.state.text} type='normal' /> <button onClick={()=>this.setText(\"New Button\")}>setText</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setType(type) Set the displayed type for button. Parameter Name Type Required Description type String Yes Style of the button: 'normal' 'submit' Default value: 'normal' Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setType('normal'); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ type:\"Submit\", text:\"text\" } } setType=(type)=>{ this.setState({type}) } render() { return ( <div> <Button text={this.state.text} type={this.state.type} /> <button onClick={()=>this.setType(\"submit\")}>Set Type</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.on('click', function(event) { console.log('on click'); }); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <Button onClick={this.handleButtonClick} /> ); } handleButtonClick = (event) => { console.log('on click'); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.show(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ isVisible:false, text:\"avc\" } } show=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <Button text={this.state.text} isVisible={this.state.isVisible} /> <button onClick={()=>this.show()}>show</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.hide(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ isVisible:true, text:\"avc\" } } hide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <Button text={this.state.text} isVisible={this.state.isVisible} /> <button onClick={()=>this.hide()}>hide</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disable() Disable button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.disable(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isDisabled: false, text: \"avc\" }; } disable = () => { this.setState({ isDisabled: true }); }; render() { return ( <div> <Button text={this.state.text} isDisabled={this.state.isDisabled} /> <button onClick={() => this.disable()}>disable</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enable() Enable button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.enable(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isDisabled: true, text: \"avc\" }; } enable = () => { this.setState({ isDisabled: false }); }; render() { return ( <div> <Button text={this.state.text} isDisabled={this.state.isDisabled} /> <button onClick={() => this.enable()}>enable</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"Button"},{"location":"Reference/Button/#button","text":"","title":"Button"},{"location":"Reference/Button/#overview","text":"Number Description 1 Normal button 2 Submit button","title":"Overview"},{"location":"Reference/Button/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Text will be displayed in button. options.type String No Style of the button: 'normal' 'submit' Default value: 'normal' options.isDisabled Boolean No The button will be disabled. Default value: 'false' options.isVisible Boolean No The button will be visible. Default value: 'true' Sample Javascript var button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } }","title":"Constructor"},{"location":"Reference/Button/#methods","text":"","title":"Methods"},{"location":"Reference/Button/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/Button/#settexttext","text":"Set displayed text in button. Parameter Name Type Required Description text String Yes Display text in button Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setText('submit'); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ text:\"Submit\" } } setText=(text)=>{ this.setState({text}) } render() { return ( <div> <Button text={this.state.text} type='normal' /> <button onClick={()=>this.setText(\"New Button\")}>setText</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setText(text)"},{"location":"Reference/Button/#settypetype","text":"Set the displayed type for button. Parameter Name Type Required Description type String Yes Style of the button: 'normal' 'submit' Default value: 'normal' Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setType('normal'); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ type:\"Submit\", text:\"text\" } } setType=(type)=>{ this.setState({type}) } render() { return ( <div> <Button text={this.state.text} type={this.state.type} /> <button onClick={()=>this.setType(\"submit\")}>Set Type</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setType(type)"},{"location":"Reference/Button/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.on('click', function(event) { console.log('on click'); }); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <Button onClick={this.handleButtonClick} /> ); } handleButtonClick = (event) => { console.log('on click'); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callback)"},{"location":"Reference/Button/#show","text":"Display button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.show(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ isVisible:false, text:\"avc\" } } show=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <Button text={this.state.text} isVisible={this.state.isVisible} /> <button onClick={()=>this.show()}>show</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/Button/#hide","text":"Hide button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.hide(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ isVisible:true, text:\"avc\" } } hide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <Button text={this.state.text} isVisible={this.state.isVisible} /> <button onClick={()=>this.hide()}>hide</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/Button/#disable","text":"Disable button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.disable(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isDisabled: false, text: \"avc\" }; } disable = () => { this.setState({ isDisabled: true }); }; render() { return ( <div> <Button text={this.state.text} isDisabled={this.state.isDisabled} /> <button onClick={() => this.disable()}>disable</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disable()"},{"location":"Reference/Button/#enable","text":"Enable button. Parameter None Returns None Sample Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.enable(); React import { Button } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isDisabled: true, text: \"avc\" }; } enable = () => { this.setState({ isDisabled: false }); }; render() { return ( <div> <Button text={this.state.text} isDisabled={this.state.isDisabled} /> <button onClick={() => this.enable()}>enable</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enable()"},{"location":"Reference/CheckBox/","text":"CheckBox Overview Number Description 1 Icon when the item is selected 2 Label of an item 3 Not selected item 4 Disabled item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on checkbox. options.items[x].value String Conditional String value of item. This is required if options.items[x] is specified. If the value is duplicate, the error message will be displayed options.items[x].label String No String label of item options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' options.value Array No List of checked item. If the 'options.value[]' has nonexistent value, the valid value will be checked. If the 'value[]' has no valid value, no item will be checked. options.isDisabled Boolean No The checkBox will be disabled. Default value: 'false' options.isVisible Boolean No The checkBox will be visible. Default value: 'true' Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); addItem(item) Add an item to the end of checkbox list. Parameter Name Type Required Description item Object Yes The item will be added to checkbox list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.addItem({ label: 'Grape', value: 'grape', isDisabled: false }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getItem(index) Get the value of specific position in checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item Object the item of the checkbox item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var firstItem = checkbox.getItem(0); console.log(firstItem); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] }; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]) } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); removeItem(index) Remove the specific item from checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.removeItem(0); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] }; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getItems() Get all items from the checkbox. Parameter None Returns The list contains all items of the dropdown. Name Type Description items Array<Object> List items of the checkbox items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var items = checkbox.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setItems(items) Set all items of the checkbox. When using this function in pure js, selected value is released. Parameter Name Type Required Description options Object No A object contains params of constructor. options.items Array<Object> Yes List of items which will be displayed on checkbox. options.items[x].value String Yes If the value is duplicate, the error message will be displayed. options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. Returns None Sample Javascript vvar checkbox = new kintoneUIComponent.CheckBox({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; checkbox.setItems(newItems); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Set Items</button> </div> ); } handleClick = () => { const newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; this.setState({ items: newItems, value: ['Apple'] }); }; } getValue() Get the checked values of the checkbox. Parameter None Returns List of checked items. Name Type Description value List<String> The value of selected items. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var value = checkbox.getValue(); value.forEach(function(item) { console.log(item); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Values</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setValue(value) Set the checked value of checkbox. Parameter Name Type Required Description value Array<String> Yes The array contains checked value in list. If the 'value[]' has nonexistent value, the valid value will be checked. If the 'value[]' has no valid value, no item will be checked. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.setValue(['Lemon']); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: []}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: this.state.value.concat(['Lemon']) }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disableItem(value) Set the disabled item of checkbox. Parameter Name Type Required Description value String Yes The value of the checkbox item you want to disable. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disableItem('Orange'); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disable item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enableItem(value) Set the enable item of checkbox. Parameter Name Type Required Description value String Yes The value of the checkbox item you want to enable. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enableItem('Banana'); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.on('change', function(value) { console.log('on change'); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; const value= ['Orange', 'Banana'] this.state = {items: items,value}; } render() { return ( <CheckBox value={this.state.value} items={this.state.items} onChange={this.handleChange} /> ); } handleChange= (value) => { this.setState({value}) console.log(\"onChange\",value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.show(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, isVisible: false }; } render() { return ( <div> <CheckBox value={this.state.value} isVisible={this.state.isVisible} items={this.state.items} onChange={value => { this.setState({ value }); }} /> <button onClick={() => this.setState({ isVisible: true })}>Show</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.hide(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, isVisible: true }; } render() { return ( <div> <CheckBox value={this.state.value} isVisible={this.state.isVisible} items={this.state.items} onChange={value => { this.setState({ value }); }} /> <button onClick={() => this.setState({ isVisible: false })}>Hide</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disable() Disabled the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disable(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, isDisabled: false }; } render() { return ( <div> <CheckBox value={this.state.value} isDisabled={this.state.isDisabled} items={this.state.items} onChange={value => { this.setState({ value }); }} /> <button onClick={() => this.setState({ isDisabled: true })}>Disable</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enable() Enabled the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enable(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, isDisabled: true }; } render() { return ( <div> <CheckBox value={this.state.value} isDisabled={this.state.isDisabled} items={this.state.items} onChange={value => { this.setState({ value }); }} /> <button onClick={() => this.setState({ isDisabled: false })}>Enable</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"CheckBox"},{"location":"Reference/CheckBox/#checkbox","text":"","title":"CheckBox"},{"location":"Reference/CheckBox/#overview","text":"Number Description 1 Icon when the item is selected 2 Label of an item 3 Not selected item 4 Disabled item","title":"Overview"},{"location":"Reference/CheckBox/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on checkbox. options.items[x].value String Conditional String value of item. This is required if options.items[x] is specified. If the value is duplicate, the error message will be displayed options.items[x].label String No String label of item options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' options.value Array No List of checked item. If the 'options.value[]' has nonexistent value, the valid value will be checked. If the 'value[]' has no valid value, no item will be checked. options.isDisabled Boolean No The checkBox will be disabled. Default value: 'false' options.isVisible Boolean No The checkBox will be visible. Default value: 'true' Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/CheckBox/#methods","text":"","title":"Methods"},{"location":"Reference/CheckBox/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/CheckBox/#additemitem","text":"Add an item to the end of checkbox list. Parameter Name Type Required Description item Object Yes The item will be added to checkbox list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.addItem({ label: 'Grape', value: 'grape', isDisabled: false }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"addItem(item)"},{"location":"Reference/CheckBox/#getitemindex","text":"Get the value of specific position in checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item Object the item of the checkbox item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var firstItem = checkbox.getItem(0); console.log(firstItem); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] }; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]) } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getItem(index)"},{"location":"Reference/CheckBox/#removeitemindex","text":"Remove the specific item from checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.removeItem(0); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] }; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"removeItem(index)"},{"location":"Reference/CheckBox/#getitems","text":"Get all items from the checkbox. Parameter None Returns The list contains all items of the dropdown. Name Type Description items Array<Object> List items of the checkbox items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var items = checkbox.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getItems()"},{"location":"Reference/CheckBox/#setitemsitems","text":"Set all items of the checkbox. When using this function in pure js, selected value is released. Parameter Name Type Required Description options Object No A object contains params of constructor. options.items Array<Object> Yes List of items which will be displayed on checkbox. options.items[x].value String Yes If the value is duplicate, the error message will be displayed. options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. Returns None Sample Javascript vvar checkbox = new kintoneUIComponent.CheckBox({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; checkbox.setItems(newItems); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Set Items</button> </div> ); } handleClick = () => { const newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; this.setState({ items: newItems, value: ['Apple'] }); }; }","title":"setItems(items)"},{"location":"Reference/CheckBox/#getvalue","text":"Get the checked values of the checkbox. Parameter None Returns List of checked items. Name Type Description value List<String> The value of selected items. Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var value = checkbox.getValue(); value.forEach(function(item) { console.log(item); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Values</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getValue()"},{"location":"Reference/CheckBox/#setvaluevalue","text":"Set the checked value of checkbox. Parameter Name Type Required Description value Array<String> Yes The array contains checked value in list. If the 'value[]' has nonexistent value, the valid value will be checked. If the 'value[]' has no valid value, no item will be checked. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.setValue(['Lemon']); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: []}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: this.state.value.concat(['Lemon']) }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setValue(value)"},{"location":"Reference/CheckBox/#disableitemvalue","text":"Set the disabled item of checkbox. Parameter Name Type Required Description value String Yes The value of the checkbox item you want to disable. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disableItem('Orange'); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disable item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disableItem(value)"},{"location":"Reference/CheckBox/#enableitemvalue","text":"Set the enable item of checkbox. Parameter Name Type Required Description value String Yes The value of the checkbox item you want to enable. Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enableItem('Banana'); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enableItem(value)"},{"location":"Reference/CheckBox/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.on('change', function(value) { console.log('on change'); }); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; const value= ['Orange', 'Banana'] this.state = {items: items,value}; } render() { return ( <CheckBox value={this.state.value} items={this.state.items} onChange={this.handleChange} /> ); } handleChange= (value) => { this.setState({value}) console.log(\"onChange\",value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callBack)"},{"location":"Reference/CheckBox/#show","text":"Display the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.show(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, isVisible: false }; } render() { return ( <div> <CheckBox value={this.state.value} isVisible={this.state.isVisible} items={this.state.items} onChange={value => { this.setState({ value }); }} /> <button onClick={() => this.setState({ isVisible: true })}>Show</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/CheckBox/#hide","text":"Hide the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.hide(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, isVisible: true }; } render() { return ( <div> <CheckBox value={this.state.value} isVisible={this.state.isVisible} items={this.state.items} onChange={value => { this.setState({ value }); }} /> <button onClick={() => this.setState({ isVisible: false })}>Hide</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/CheckBox/#disable","text":"Disabled the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disable(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, isDisabled: false }; } render() { return ( <div> <CheckBox value={this.state.value} isDisabled={this.state.isDisabled} items={this.state.items} onChange={value => { this.setState({ value }); }} /> <button onClick={() => this.setState({ isDisabled: true })}>Disable</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disable()"},{"location":"Reference/CheckBox/#enable","text":"Enabled the checkbox. Parameter None Returns None Sample Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enable(); React import { CheckBox } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, isDisabled: true }; } render() { return ( <div> <CheckBox value={this.state.value} isDisabled={this.state.isDisabled} items={this.state.items} onChange={value => { this.setState({ value }); }} /> <button onClick={() => this.setState({ isDisabled: false })}>Enable</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enable()"},{"location":"Reference/ColorPicker/","text":"ColorPicker Overview Number Description 1 HEX input 2 ColorPicker popup window 3 Saturation 4 Hue 5 RGB input 6 HSV input 7 OK button 8 Cancel button Constructor Parameter Name Type Required Description options Object No An object contains params of constructor. options.color HEX String No The ColorPicker's input value. If setted color is not valid, an error will be displayed. Default value is '#FF0000'. options.isDisabled Boolean No The ColorPicker will be disabled. Default value: 'false' options.isVisible Boolean No The ColorPicker will be visible. Default value: 'true' options.onChange Callback No Handler for color change event. Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: ''}; }; render() { return ( <ColorPicker color={this.state.color} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: ''}; }; render() { return ( <ColorPicker color={this.state.color} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setColor(color) Set the color of colorpicker . Parameter Name Type Required Description color String Yes The color of colorpicker. Returns None Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); colorPicker.setColor('#666666'); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: '#FF0000'}; }; render() { return ( <div> <ColorPicker color={this.state.color} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ color: '#666666' }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getColor() Get the color of colorpicker. Parameter None Returns Name Type Description color String The color of colorpicker. Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); colorPicker.getColor(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: '#FF0000'}; }; render() { return ( <div> <ColorPicker color={this.state.color} /> <button onClick={this.handleClick}>Get Color</button> </div> ); } handleClick= () => { console.log(this.state.color); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callback) Register callback for an event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); colorPicker.on('change', function(color) { console.log(color); }); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: '#FF0000'}; }; render() { return ( <ColorPicker color={this.state.color} onChange={this.handleChange} /> ); } handleChange = (color) => { console.log(color); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.show(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: false }; } handleShow = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <button onClick={this.handleShow}>Show</button> <ColorPicker color=\"#FF0000\" isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.hide(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } handleHide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <ColorPicker color=\"#FF0000\" isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disable() Disable ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.disable(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isDisabled: false }; } handleDisable = () => { this.setState({ isDisabled: true }); }; render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <ColorPicker color=\"#FF0000\" isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enable() Enable ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.enable(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isDisabled: true }; } handleEnable= () => { this.setState({ isDisabled: false }); }; render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <ColorPicker color=\"#FF0000\" isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"ColorPicker"},{"location":"Reference/ColorPicker/#colorpicker","text":"","title":"ColorPicker"},{"location":"Reference/ColorPicker/#overview","text":"Number Description 1 HEX input 2 ColorPicker popup window 3 Saturation 4 Hue 5 RGB input 6 HSV input 7 OK button 8 Cancel button","title":"Overview"},{"location":"Reference/ColorPicker/#constructor","text":"Parameter Name Type Required Description options Object No An object contains params of constructor. options.color HEX String No The ColorPicker's input value. If setted color is not valid, an error will be displayed. Default value is '#FF0000'. options.isDisabled Boolean No The ColorPicker will be disabled. Default value: 'false' options.isVisible Boolean No The ColorPicker will be visible. Default value: 'true' options.onChange Callback No Handler for color change event. Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: ''}; }; render() { return ( <ColorPicker color={this.state.color} /> ); } }","title":"Constructor"},{"location":"Reference/ColorPicker/#methods","text":"","title":"Methods"},{"location":"Reference/ColorPicker/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: ''}; }; render() { return ( <ColorPicker color={this.state.color} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/ColorPicker/#setcolorcolor","text":"Set the color of colorpicker . Parameter Name Type Required Description color String Yes The color of colorpicker. Returns None Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); colorPicker.setColor('#666666'); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: '#FF0000'}; }; render() { return ( <div> <ColorPicker color={this.state.color} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ color: '#666666' }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setColor(color)"},{"location":"Reference/ColorPicker/#getcolor","text":"Get the color of colorpicker. Parameter None Returns Name Type Description color String The color of colorpicker. Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(colorPicker.render()); colorPicker.getColor(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: '#FF0000'}; }; render() { return ( <div> <ColorPicker color={this.state.color} /> <button onClick={this.handleClick}>Get Color</button> </div> ); } handleClick= () => { console.log(this.state.color); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getColor()"},{"location":"Reference/ColorPicker/#oneventname-callback","text":"Register callback for an event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var colorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); colorPicker.on('change', function(color) { console.log(color); }); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = {color: '#FF0000'}; }; render() { return ( <ColorPicker color={this.state.color} onChange={this.handleChange} /> ); } handleChange = (color) => { console.log(color); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callback)"},{"location":"Reference/ColorPicker/#show","text":"Display ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.show(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: false }; } handleShow = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <button onClick={this.handleShow}>Show</button> <ColorPicker color=\"#FF0000\" isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/ColorPicker/#hide","text":"Hide ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.hide(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } handleHide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <ColorPicker color=\"#FF0000\" isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/ColorPicker/#disable","text":"Disable ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.disable(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isDisabled: false }; } handleDisable = () => { this.setState({ isDisabled: true }); }; render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <ColorPicker color=\"#FF0000\" isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disable()"},{"location":"Reference/ColorPicker/#enable","text":"Enable ColorPicker. Parameter None Returns None Sample Javascript var myColorPicker = new kintoneUIComponent.ColorPicker({color: '#FF0000'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myColorPicker.render()); myColorPicker.enable(); React import { ColorPicker } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isDisabled: true }; } handleEnable= () => { this.setState({ isDisabled: false }); }; render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <ColorPicker color=\"#FF0000\" isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enable()"},{"location":"Reference/DateTime/","text":"DateTime Overview Number Description 1 date form 2 time form 3 date picker 4 select today button 5 clear button 6 selected item pointer 7 today pointer 8 time picker 9 year selection dropdown 10 month selection dropdown Note For datetime type, both date (item-1) and time (item-2) will be cleared (set to empty string) when: The value options is set to null on Constructor or setValue method. Clicking clear (item-5) on date picker (item-3) . Constructor Parameter Name Type Required Description options Object No An object contains params of constructor. options.value Date|null No The Default DateTime Value. options.type String No The component type date time datetime Default value: 'datetime' options.locale String No The setting of date picker display language ja en zh Default value: 'ja' options.dateFormat String No The date format for the date text input part of the component. Supported format: Valid separators: \"/\", \"-\", \" \", \":\" Date: d (Date Short): 1,2 ... dd (Date Full): 01, 02... Month: MM (Month Number): 01, 02 ... Year: YYYY (Year): 2019, 2020... All formats should contain MM and YYYY identifiers. For example: YYYY/MM - correct format YYYY/dd - incorrect format Default format: MM/dd/YYYY options.isVisible Boolean No The DatePicker will be visible. Default value: 'true' options.isDisabled Boolean No The DateTime field will be disabled. Default value: 'false' Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: new Date(), type: 'datetime', locale: 'en'}); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: new Date(), type: 'datetime', locale: 'en'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getValue() Get the value of datetime field. Parameter None Returns Name Type Description value Date|null The value of datetime field. Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: new Date(), type: 'datetime', locale: 'en'}); console.log(dateTime.getValue()); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {value: new Date()}; } render() { return ( <div> <DateTime value={this.state.value} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Get Value </button> </div> ); } handleClick= () => { console.log(this.state.value); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setValue(value) Set the value of datetime field. Parameter Name Type Required Description value Date|null Yes The value of datetime field. Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: new Date(), type: 'datetime', locale: 'en'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.setValue(new Date()); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {value: new Date()}; } render() { return ( <div> <DateTime value={this.state.value} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Set Value </button> </div> ); } handleClick= () => { this.setState({value: new Date('1995-12-17T03:24:00')}) }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getLocale() Get the setting of language. Parameter None Returns Name Type Description locale String The setting of language. ja en zh Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); console.log(dateTime.getLocale()); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {locale: 'ja'}; } render() { return ( <div> <DateTime locale={this.state.locale} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Get Locale </button> </div> ); } handleClick= () => { console.log(this.state.locale); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setLocale(locale) Set the language setting. Parameters Name Type Required Description locale String Yes The setting of language. ja en zh Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.setLocale('en'); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {locale: 'en'}; } render() { return ( <div> <DateTime locale={this.state.locale} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Set Locale </button> </div> ); } handleClick= () => { this.setState({locale: 'ja'}) }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display DateTime. Parameter None Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.show(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date(),isVisible:false}; } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <DateTime value={this.state.date} type='datetime' locale='en' isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date()}); kintone.events.on('app.record.index.show', function(event) { var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.hide(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date(),isVisible:true}; } handleShow=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleShow}>Hide</button> <DateTime value={this.state.date} type='datetime' locale='en' isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disable() Disable DateTime. Parameter None Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.disable(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date(),isDisabled:false}; } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <DateTime value={this.state.date} type='datetime' locale='en' isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enable() Enable DateTime. Parameter None Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.enable(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date(),isDisabled:true}; } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <DateTime value={this.state.date} type='datetime' locale='en' isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"DateTime"},{"location":"Reference/DateTime/#datetime","text":"","title":"DateTime"},{"location":"Reference/DateTime/#overview","text":"Number Description 1 date form 2 time form 3 date picker 4 select today button 5 clear button 6 selected item pointer 7 today pointer 8 time picker 9 year selection dropdown 10 month selection dropdown Note For datetime type, both date (item-1) and time (item-2) will be cleared (set to empty string) when: The value options is set to null on Constructor or setValue method. Clicking clear (item-5) on date picker (item-3) .","title":"Overview"},{"location":"Reference/DateTime/#constructor","text":"Parameter Name Type Required Description options Object No An object contains params of constructor. options.value Date|null No The Default DateTime Value. options.type String No The component type date time datetime Default value: 'datetime' options.locale String No The setting of date picker display language ja en zh Default value: 'ja' options.dateFormat String No The date format for the date text input part of the component. Supported format: Valid separators: \"/\", \"-\", \" \", \":\" Date: d (Date Short): 1,2 ... dd (Date Full): 01, 02... Month: MM (Month Number): 01, 02 ... Year: YYYY (Year): 2019, 2020... All formats should contain MM and YYYY identifiers. For example: YYYY/MM - correct format YYYY/dd - incorrect format Default format: MM/dd/YYYY options.isVisible Boolean No The DatePicker will be visible. Default value: 'true' options.isDisabled Boolean No The DateTime field will be disabled. Default value: 'false' Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: new Date(), type: 'datetime', locale: 'en'}); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' /> ); } }","title":"Constructor"},{"location":"Reference/DateTime/#methods","text":"","title":"Methods"},{"location":"Reference/DateTime/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: new Date(), type: 'datetime', locale: 'en'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date()}; } render() { return ( <DateTime value={this.state.date} type='datetime' locale='en' /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/DateTime/#getvalue","text":"Get the value of datetime field. Parameter None Returns Name Type Description value Date|null The value of datetime field. Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: new Date(), type: 'datetime', locale: 'en'}); console.log(dateTime.getValue()); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {value: new Date()}; } render() { return ( <div> <DateTime value={this.state.value} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Get Value </button> </div> ); } handleClick= () => { console.log(this.state.value); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getValue()"},{"location":"Reference/DateTime/#setvaluevalue","text":"Set the value of datetime field. Parameter Name Type Required Description value Date|null Yes The value of datetime field. Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({value: new Date(), type: 'datetime', locale: 'en'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.setValue(new Date()); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {value: new Date()}; } render() { return ( <div> <DateTime value={this.state.value} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Set Value </button> </div> ); } handleClick= () => { this.setState({value: new Date('1995-12-17T03:24:00')}) }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setValue(value)"},{"location":"Reference/DateTime/#getlocale","text":"Get the setting of language. Parameter None Returns Name Type Description locale String The setting of language. ja en zh Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); console.log(dateTime.getLocale()); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {locale: 'ja'}; } render() { return ( <div> <DateTime locale={this.state.locale} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Get Locale </button> </div> ); } handleClick= () => { console.log(this.state.locale); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getLocale()"},{"location":"Reference/DateTime/#setlocalelocale","text":"Set the language setting. Parameters Name Type Required Description locale String Yes The setting of language. ja en zh Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.setLocale('en'); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {locale: 'en'}; } render() { return ( <div> <DateTime locale={this.state.locale} onChange={(value) => {this.setState({value})}}/> <button onClick={this.handleClick}>Set Locale </button> </div> ); } handleClick= () => { this.setState({locale: 'ja'}) }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setLocale(locale)"},{"location":"Reference/DateTime/#show","text":"Display DateTime. Parameter None Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.show(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date(),isVisible:false}; } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <DateTime value={this.state.date} type='datetime' locale='en' isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/DateTime/#hide","text":"Hide DateTime. Parameter None Returns None Sample Javascript var myDateTime = new kintoneUIComponent.DateTime({value: new Date()}); kintone.events.on('app.record.index.show', function(event) { var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.hide(); }); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date(),isVisible:true}; } handleShow=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleShow}>Hide</button> <DateTime value={this.state.date} type='datetime' locale='en' isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/DateTime/#disable","text":"Disable DateTime. Parameter None Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.disable(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date(),isDisabled:false}; } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <DateTime value={this.state.date} type='datetime' locale='en' isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disable()"},{"location":"Reference/DateTime/#enable","text":"Enable DateTime. Parameter None Returns None Sample Javascript var dateTime = new kintoneUIComponent.DateTime({ value: new Date(), type: \"datetime\", locale: \"en\" }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dateTime.render()); dateTime.enable(); React import { DateTime } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from 'react-dom'; class DateTimeComponent extends React.Component { constructor(props){ super(props); this.state = {date: new Date(),isDisabled:true}; } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <DateTime value={this.state.date} type='datetime' locale='en' isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enable()"},{"location":"Reference/Dialog/","text":"Dialog Overview Item Description Item-1 Header section Item-2 Content section Item-3 Footer section Item-4 Close button Constructor Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.header String, DOM, React Element No Header of Dialog. options.content String, DOM, React Element No Content of Dialog. options.footer String, DOM, React Element No Footer of Dialog. options.isVisible Boolean No If set to true, Dialog will show up. Otherwise Dialog will hide. Default: true options.showCloseButton Boolean No If set to true, close button in Item-1 will show up. Otherwise close button will hide. Default: true Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); React import {Dialog} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({isVisible: false}) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Methods render() Get DOM element of component. Parameter None Returns DOM element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); React import {Dialog} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({isVisible: false}) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById('root')); show() Display the Dialog. Parameter None Returns None Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: false, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide the Dialog. Parameter None Returns None Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.hide(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={false} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setHeader(header) Set header for Dialog. Parameter Name Type Required Description header String, DOM, React Element Yes Header of Dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Announcement' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setHeader(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} header=\"Announcement\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getHeader() Get header of Dialog. Parameter None Returns Header of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); console.log('Header: ', myDialog.getHeader()); // return \"Dialog header\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true, header: 'Announcement' }; } onClose = () => { this.setState({ isVisible: false }) } handleClick= () => { console.log(this.state.header); }; render() { return ( <div> <Dialog showCloseButton={true} header={this.state.header} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Header</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setContent(content) Set content for Dialog. Parameter Name Type Required Description content String, DOM, React Element Yes Content of Dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Content' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setContent(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} content=\"content\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getContent() Get content of Dialog. Parameter None Returns Content of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); console.log('Content: ', myDialog.getContent()); // return \"This is content\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { content: \"Dialog content\", isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } handleClick= () => { console.log(this.state.content); }; render() { return ( <div> <Dialog showCloseButton={true} content={this.state.content} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Content</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setFooter(footer) Set footer for Dialog. Parameter Name Type Required Description footer String, DOM, React Element Yes Footer of Dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Footer' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setFooter(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} footer=\"footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getFooter() Get footer of Dialog. Parameter None Returns Footer of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"This is footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); console.log('Footer: ', myDialog.getFooter()); // return \"Footer\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { footer: \"Dialog footer\", isVisible: true }; } handleClick= () => { console.log(this.state.footer); }; onClose = () => { this.setState({ isVisible: false }) } render() { return ( <div> <Dialog showCloseButton={true} footer={this.state.footer} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Footer</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"Dialog"},{"location":"Reference/Dialog/#dialog","text":"","title":"Dialog"},{"location":"Reference/Dialog/#overview","text":"Item Description Item-1 Header section Item-2 Content section Item-3 Footer section Item-4 Close button","title":"Overview"},{"location":"Reference/Dialog/#constructor","text":"Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.header String, DOM, React Element No Header of Dialog. options.content String, DOM, React Element No Content of Dialog. options.footer String, DOM, React Element No Footer of Dialog. options.isVisible Boolean No If set to true, Dialog will show up. Otherwise Dialog will hide. Default: true options.showCloseButton Boolean No If set to true, close button in Item-1 will show up. Otherwise close button will hide. Default: true Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); React import {Dialog} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({isVisible: false}) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } }","title":"Constructor"},{"location":"Reference/Dialog/#methods","text":"","title":"Methods"},{"location":"Reference/Dialog/#render","text":"Get DOM element of component. Parameter None Returns DOM element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); React import {Dialog} from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({isVisible: false}) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById('root'));","title":"render()"},{"location":"Reference/Dialog/#show","text":"Display the Dialog. Parameter None Returns None Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: false, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/Dialog/#hide","text":"Hide the Dialog. Parameter None Returns None Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.hide(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <Dialog showCloseButton={true} header=\"Dialog header\" content=\"This is content\" footer=\"Footer\" isVisible={false} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/Dialog/#setheaderheader","text":"Set header for Dialog. Parameter Name Type Required Description header String, DOM, React Element Yes Header of Dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Announcement' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setHeader(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} header=\"Announcement\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setHeader(header)"},{"location":"Reference/Dialog/#getheader","text":"Get header of Dialog. Parameter None Returns Header of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); console.log('Header: ', myDialog.getHeader()); // return \"Dialog header\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true, header: 'Announcement' }; } onClose = () => { this.setState({ isVisible: false }) } handleClick= () => { console.log(this.state.header); }; render() { return ( <div> <Dialog showCloseButton={true} header={this.state.header} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Header</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getHeader()"},{"location":"Reference/Dialog/#setcontentcontent","text":"Set content for Dialog. Parameter Name Type Required Description content String, DOM, React Element Yes Content of Dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Content' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setContent(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} content=\"content\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setContent(content)"},{"location":"Reference/Dialog/#getcontent","text":"Get content of Dialog. Parameter None Returns Content of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"Footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); console.log('Content: ', myDialog.getContent()); // return \"This is content\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { content: \"Dialog content\", isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } handleClick= () => { console.log(this.state.content); }; render() { return ( <div> <Dialog showCloseButton={true} content={this.state.content} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Content</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getContent()"},{"location":"Reference/Dialog/#setfooterfooter","text":"Set footer for Dialog. Parameter Name Type Required Description footer String, DOM, React Element Yes Footer of Dialog. Returns Dialog instance Sample Javascript var myDialog = new kintoneUIComponent.Dialog(); var elements = 'Footer' var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(myDialog.render()); myDialog.setFooter(elements); myDialog.show(); React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; } onClose = () => { this.setState({ isVisible: false }) } render() { return ( <Dialog showCloseButton={true} footer=\"footer\" isVisible={this.state.isVisible} onClose={this.onClose} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setFooter(footer)"},{"location":"Reference/Dialog/#getfooter","text":"Get footer of Dialog. Parameter None Returns Footer of Dialog: string | DOM | React Element Sample Javascript var myDialog = new kintoneUIComponent.Dialog({ header: \"Dialog header\", content: \"This is content\", footer: \"This is footer\", isVisible: true, showCloseButton: true }); document.body.append(myDialog.render()); console.log('Footer: ', myDialog.getFooter()); // return \"Footer\" React import { Dialog } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { footer: \"Dialog footer\", isVisible: true }; } handleClick= () => { console.log(this.state.footer); }; onClose = () => { this.setState({ isVisible: false }) } render() { return ( <div> <Dialog showCloseButton={true} footer={this.state.footer} isVisible={this.state.isVisible} onClose={this.onClose} /> <button onClick={this.handleClick}>Get Footer</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getFooter()"},{"location":"Reference/Dropdown/","text":"Dropdown Overview Number Description 1 Main area 2 Content area 3 Selected item 4 Not selected item 5 Disabled item 6 Hover item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items will be displayed on dropdown. options.items[x].value String Conditional The value of an item. This is required if options.items[x] is specified. If the value is duplicate, the error will be displayed options.items[x].label String No The label of an item. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected value. If the 'options.value' is nonexistent value, it will be set blank on UI, and no item will be selected in dropdown list. options.isDisabled Boolean No The dropdown will be disabled. Default value: 'false' options.isVisible Boolean No The dropdown will be visible. Default value: 'true' Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); addItem(item) Add an item to dropdown list. Parameter Name Type Required Description item Object Yes The item will be added to dropdown list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [{ label:\"hehe\", value:\"123\" }], value: \"123\" }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick= () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); removeItem(index) Remove an item at specific position in dropdown's list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var firstItem = dropdown.getItems()[0]; dropdown.removeItem(0); console.log(firstItem); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value:\"Orange\" }; } handleClick= (index) => { let {items}=this.state; items = items.slice(index+1); let value = items[0].value; this.setState({items,value}); }; render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={()=>this.handleClick(0)}>Remove Item</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getItems() Get all items of the dropdown. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var list = dropdown.getItems(); list.forEach(function(item) { console.log(item); }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, value: \"Banana\" }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setItems(items) Set all items of the dropdown list. When using this function in pure js, selected value is released. Parameter Name Type Required Description options Object No A object contains params of constructor. options.items Array<Object> Yes List of items will be displayed on dropdown. options.items[x].value String Yes If the value is duplicate, the error message will be displayed. options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; dropdown.setItems(newItems); React import { DropDown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Set Items</button> </div> ); } handleClick = () => { const newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; this.setState({ items: newItems, value: 'Apple' }); }; } getValue() Get value of the selected item Parameter None Returns Name Type Description value String The value of the selected item Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var selectedItem = dropdown.getValue(); console.log(selectedItem); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setValue(value) Set the selected value for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. If the 'value' is nonexistent value, it will be set blank on UI, and no item will be selected in dropdown list. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.setValue('Orange'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disableItem(value) Set the disabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disableItem('Orange'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enableItem(value) Set the enabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enableItem('Banana'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.on('change', function(value) { console.log('on change'); }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.show(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isVisible:false }; } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <Dropdown items={this.state.items} value={this.state.value} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.hide(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { c constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isVisible:true }; } handleHide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <Dropdown items={this.state.items} value={this.state.value} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disable() Disabled the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disable(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isDisabled:false }; } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <Dropdown items={this.state.items} value={this.state.value} isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enable() Enabled the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enable(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isDisabled:true }; } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <Dropdown items={this.state.items} value={this.state.value} isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"Dropdown"},{"location":"Reference/Dropdown/#dropdown","text":"","title":"Dropdown"},{"location":"Reference/Dropdown/#overview","text":"Number Description 1 Main area 2 Content area 3 Selected item 4 Not selected item 5 Disabled item 6 Hover item","title":"Overview"},{"location":"Reference/Dropdown/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items will be displayed on dropdown. options.items[x].value String Conditional The value of an item. This is required if options.items[x] is specified. If the value is duplicate, the error will be displayed options.items[x].label String No The label of an item. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected value. If the 'options.value' is nonexistent value, it will be set blank on UI, and no item will be selected in dropdown list. options.isDisabled Boolean No The dropdown will be disabled. Default value: 'false' options.isVisible Boolean No The dropdown will be visible. Default value: 'true' Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/Dropdown/#methods","text":"","title":"Methods"},{"location":"Reference/Dropdown/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/Dropdown/#additemitem","text":"Add an item to dropdown list. Parameter Name Type Required Description item Object Yes The item will be added to dropdown list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [{ label:\"hehe\", value:\"123\" }], value: \"123\" }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick= () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"addItem(item)"},{"location":"Reference/Dropdown/#removeitemindex","text":"Remove an item at specific position in dropdown's list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var firstItem = dropdown.getItems()[0]; dropdown.removeItem(0); console.log(firstItem); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value:\"Orange\" }; } handleClick= (index) => { let {items}=this.state; items = items.slice(index+1); let value = items[0].value; this.setState({items,value}); }; render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={()=>this.handleClick(0)}>Remove Item</button> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"removeItem(index)"},{"location":"Reference/Dropdown/#getitems","text":"Get all items of the dropdown. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var list = dropdown.getItems(); list.forEach(function(item) { console.log(item); }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ]; this.state = { items: items, value: \"Banana\" }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getItems()"},{"location":"Reference/Dropdown/#setitemsitems","text":"Set all items of the dropdown list. When using this function in pure js, selected value is released. Parameter Name Type Required Description options Object No A object contains params of constructor. options.items Array<Object> Yes List of items will be displayed on dropdown. options.items[x].value String Yes If the value is duplicate, the error message will be displayed. options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; dropdown.setItems(newItems); React import { DropDown } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Set Items</button> </div> ); } handleClick = () => { const newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; this.setState({ items: newItems, value: 'Apple' }); }; }","title":"setItems(items)"},{"location":"Reference/Dropdown/#getvalue","text":"Get value of the selected item Parameter None Returns Name Type Description value String The value of the selected item Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var selectedItem = dropdown.getValue(); console.log(selectedItem); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getValue()"},{"location":"Reference/Dropdown/#setvaluevalue","text":"Set the selected value for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. If the 'value' is nonexistent value, it will be set blank on UI, and no item will be selected in dropdown list. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.setValue('Orange'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setValue(value)"},{"location":"Reference/Dropdown/#disableitemvalue","text":"Set the disabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disableItem('Orange'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disableItem(value)"},{"location":"Reference/Dropdown/#enableitemvalue","text":"Set the enabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enableItem('Banana'); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enableItem(value)"},{"location":"Reference/Dropdown/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.on('change', function(value) { console.log('on change'); }); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callBack)"},{"location":"Reference/Dropdown/#show","text":"Display the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.show(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isVisible:false }; } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <Dropdown items={this.state.items} value={this.state.value} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/Dropdown/#hide","text":"Hide the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.hide(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { c constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isVisible:true }; } handleHide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <Dropdown items={this.state.items} value={this.state.value} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/Dropdown/#disable","text":"Disabled the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disable(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isDisabled:false }; } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <Dropdown items={this.state.items} value={this.state.value} isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disable()"},{"location":"Reference/Dropdown/#enable","text":"Enabled the dropdown. Parameter None Returns None Sample Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enable(); React import { Dropdown } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isDisabled:true }; } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <Dropdown items={this.state.items} value={this.state.value} isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enable()"},{"location":"Reference/FieldGroup/","text":"FieldGroup Overview Number Description 1 Expanding icon. 2 Field group name. 3 Display item zone. When the width of display items is over 517px, the width of Field Group component changes according to display items. If the width of Field Group component is over the width of its parent DOM, scroll bar is shown. 4 Collapse icon. Constructor Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.content DOM Element No Content of Field Group. options.name String No Field group name. options.toggle String No Set the toggle state. Default value: 'collapse' Following value can be set: collapse expand options.onToggle Function No Set the toggle function. \u203bThis prop is for react. When you use pure JavaScript interface, there is no need to use this prop. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); const dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); const insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); const label = new kintoneUIComponent.Label({text: 'My label', isRequired: true}); const mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); const alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); const radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: 'Banana' }); const textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); const customCell = function() { return { init: function({rowData, updateRowData}) { const span = document.createElement('span'); const textfield1 = new kintoneUIComponent.Text({value: rowData.text1.value}); const textfield2 = new kintoneUIComponent.Text({value: rowData.text2.value}); span.appendChild(textfield1.render()); span.appendChild(textfield2.render()); textfield1.on('change', function(newValue){ updateRowData({text1: {value: newValue}}, false); }); textfield2.on('change', function(newValue){ updateRowData({text2: {value: newValue}}, false); }); this.textfield1 = textfield1; this.textfield2 = textfield2; return span; }, update: function({ rowData }) { const text1val = rowData.text1; const text2val = rowData.text2; if (text1val && this.textfield1._reactObject) { this.textfield1.setValue(text1val.value); } if (text2val && this.textfield2._reactObject) { this.textfield2.setValue(text2val.value); } } } }; const table = new kintoneUIComponent.Table({ // initial table data data: [ { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' } } ], // default row data on row add defaultRowData: { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' } }, onRowAdd: function(e) { console.log('table.onAdd', e); return { text: {value: 'overwritten field value'}, text1: { value: 'overwritten field1 value' }, text2: { value: 'overwritten field2 value' } } }, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, { header: 'Custom cell contains 2 textfields', cell: function() { return customCell() } } ] }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(alert.render()) fieldGroupContent.appendChild(attachment.render()) fieldGroupContent.appendChild(button.render()) fieldGroupContent.appendChild(checkbox.render()) fieldGroupContent.appendChild(dropdown.render()) fieldGroupContent.appendChild(insertBtn.render()) fieldGroupContent.appendChild(label.render()) fieldGroupContent.appendChild(mulChoice.render()) fieldGroupContent.appendChild(radioBtn.render()) fieldGroupContent.appendChild(table.render()) fieldGroupContent.appendChild(text.render()) fieldGroupContent.appendChild(textArea.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }) React import { FieldGroup, RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ]; this.state = { items: items, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <RadioButton name='radio' items={this.state.items} value={this.state.radioValue} onChange={(radioValue) => {this.setState({radioValue})}} /> </FieldGroup> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } } Methods render() Get DOM element of component. Parameter None Returns DOM element Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ]; this.state = { items: items, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <RadioButton name='radio' items={this.state.items} value={this.state.radioValue} onChange={(radioValue) => {this.setState({radioValue})}} /> </FieldGroup> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setContent(content) Add an item to end of Field Group. Parameter Name Type Required Description content DOM Yes The content of Field Group. Returns None Sample Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{ label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }], value: 'orange', name: 'Fruit' }); const button = new kintoneUIComponent.Button({ text: 'Set content', type: 'normal' }); button.on('click', function () { const text = new kintoneUIComponent.Text({ value: \"12345\" }); fieldGroup.setContent(text.render()); }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(radioBtn.render()) fieldGroupContent.appendChild(button.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { content: <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} />, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} content={this.state.content} > </FieldGroup> <button onClick={this.handleClick}>Set Item</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ content: <Label text='updated Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getContent() Get content of Field Group. Parameter None Returns Name Type Required Description content DOM Yes The content of Field Group. Sample Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{ label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }], value: 'orange', name: 'Fruit' }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: radioBtn.render(), name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); console.log(fieldGroup.getContent()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { content: <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} />, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} content={this.state.content} > </FieldGroup> <button onClick={this.handleClick}>Get Item</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.content) } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setName(name) Set the name for Field Group. Parameter Name Type Required Description name String Yes The Field Group name. Returns None Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const button = new kintoneUIComponent.Button({ text: 'Set name', type: 'normal' }); button.on('click', function () { fieldGroup.setName('New Group Name'); }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(text.render()) fieldGroupContent.appendChild(button.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Set Name</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ name: 'NEW FIELD GROUP' }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getName() Get name of Field Group. Parameter None Returns Name Type Description name String The content of Field Group. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); console.log(fieldGroup.getName()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Get Name</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.name); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setToggle(toggle) Set the toggle state for Field Group. Parameter Name Type Required Description toggle String Yes The toggle state of Field Group. collapse expand Returns None Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const button = new kintoneUIComponent.Button({ text: 'Set toggle is collapse', type: 'normal' }); button.on('click', function () { fieldGroup.setToggle('collapse'); }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(text.render()) fieldGroupContent.appendChild(button.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Set Toggle</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ toggle: 'collapse' }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getToggle() Get toggle state of Field Group. Parameter None Returns Name Type Description toggle String The toggle state of Field Group. collapse expand Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); console.log(fieldGroup.getToggle()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Get Toggle</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.toggle); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"FieldGroup"},{"location":"Reference/FieldGroup/#fieldgroup","text":"","title":"FieldGroup"},{"location":"Reference/FieldGroup/#overview","text":"Number Description 1 Expanding icon. 2 Field group name. 3 Display item zone. When the width of display items is over 517px, the width of Field Group component changes according to display items. If the width of Field Group component is over the width of its parent DOM, scroll bar is shown. 4 Collapse icon.","title":"Overview"},{"location":"Reference/FieldGroup/#constructor","text":"Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.content DOM Element No Content of Field Group. options.name String No Field group name. options.toggle String No Set the toggle state. Default value: 'collapse' Following value can be set: collapse expand options.onToggle Function No Set the toggle function. \u203bThis prop is for react. When you use pure JavaScript interface, there is no need to use this prop. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); const attachment = new kintoneUIComponent.Attachment({files: [{name: 'test_1', size: 12345}]}); const checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); const dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); const insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); const label = new kintoneUIComponent.Label({text: 'My label', isRequired: true}); const mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); const alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); const radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: 'Banana' }); const textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); const customCell = function() { return { init: function({rowData, updateRowData}) { const span = document.createElement('span'); const textfield1 = new kintoneUIComponent.Text({value: rowData.text1.value}); const textfield2 = new kintoneUIComponent.Text({value: rowData.text2.value}); span.appendChild(textfield1.render()); span.appendChild(textfield2.render()); textfield1.on('change', function(newValue){ updateRowData({text1: {value: newValue}}, false); }); textfield2.on('change', function(newValue){ updateRowData({text2: {value: newValue}}, false); }); this.textfield1 = textfield1; this.textfield2 = textfield2; return span; }, update: function({ rowData }) { const text1val = rowData.text1; const text2val = rowData.text2; if (text1val && this.textfield1._reactObject) { this.textfield1.setValue(text1val.value); } if (text2val && this.textfield2._reactObject) { this.textfield2.setValue(text2val.value); } } } }; const table = new kintoneUIComponent.Table({ // initial table data data: [ { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' } } ], // default row data on row add defaultRowData: { text: { value: 'text field' }, text1: { value: 'text field 1' }, text2: { value: 'text field 2' } }, onRowAdd: function(e) { console.log('table.onAdd', e); return { text: {value: 'overwritten field value'}, text1: { value: 'overwritten field1 value' }, text2: { value: 'overwritten field2 value' } } }, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, { header: 'Custom cell contains 2 textfields', cell: function() { return customCell() } } ] }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(alert.render()) fieldGroupContent.appendChild(attachment.render()) fieldGroupContent.appendChild(button.render()) fieldGroupContent.appendChild(checkbox.render()) fieldGroupContent.appendChild(dropdown.render()) fieldGroupContent.appendChild(insertBtn.render()) fieldGroupContent.appendChild(label.render()) fieldGroupContent.appendChild(mulChoice.render()) fieldGroupContent.appendChild(radioBtn.render()) fieldGroupContent.appendChild(table.render()) fieldGroupContent.appendChild(text.render()) fieldGroupContent.appendChild(textArea.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }) React import { FieldGroup, RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ]; this.state = { items: items, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <RadioButton name='radio' items={this.state.items} value={this.state.radioValue} onChange={(radioValue) => {this.setState({radioValue})}} /> </FieldGroup> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } }","title":"Constructor"},{"location":"Reference/FieldGroup/#methods","text":"","title":"Methods"},{"location":"Reference/FieldGroup/#render","text":"Get DOM element of component. Parameter None Returns DOM element Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ]; this.state = { items: items, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <RadioButton name='radio' items={this.state.items} value={this.state.radioValue} onChange={(radioValue) => {this.setState({radioValue})}} /> </FieldGroup> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/FieldGroup/#setcontentcontent","text":"Add an item to end of Field Group. Parameter Name Type Required Description content DOM Yes The content of Field Group. Returns None Sample Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{ label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }], value: 'orange', name: 'Fruit' }); const button = new kintoneUIComponent.Button({ text: 'Set content', type: 'normal' }); button.on('click', function () { const text = new kintoneUIComponent.Text({ value: \"12345\" }); fieldGroup.setContent(text.render()); }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(radioBtn.render()) fieldGroupContent.appendChild(button.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { content: <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} />, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} content={this.state.content} > </FieldGroup> <button onClick={this.handleClick}>Set Item</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ content: <Label text='updated Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setContent(content)"},{"location":"Reference/FieldGroup/#getcontent","text":"Get content of Field Group. Parameter None Returns Name Type Required Description content DOM Yes The content of Field Group. Sample Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{ label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }], value: 'orange', name: 'Fruit' }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: radioBtn.render(), name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); console.log(fieldGroup.getContent()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { content: <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} />, radioValue: 'Orange', name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} content={this.state.content} > </FieldGroup> <button onClick={this.handleClick}>Get Item</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.content) } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getContent()"},{"location":"Reference/FieldGroup/#setnamename","text":"Set the name for Field Group. Parameter Name Type Required Description name String Yes The Field Group name. Returns None Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const button = new kintoneUIComponent.Button({ text: 'Set name', type: 'normal' }); button.on('click', function () { fieldGroup.setName('New Group Name'); }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(text.render()) fieldGroupContent.appendChild(button.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Set Name</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ name: 'NEW FIELD GROUP' }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setName(name)"},{"location":"Reference/FieldGroup/#getname","text":"Get name of Field Group. Parameter None Returns Name Type Description name String The content of Field Group. Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); console.log(fieldGroup.getName()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Get Name</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.name); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getName()"},{"location":"Reference/FieldGroup/#settoggletoggle","text":"Set the toggle state for Field Group. Parameter Name Type Required Description toggle String Yes The toggle state of Field Group. collapse expand Returns None Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const button = new kintoneUIComponent.Button({ text: 'Set toggle is collapse', type: 'normal' }); button.on('click', function () { fieldGroup.setToggle('collapse'); }); const fieldGroupContent = document.createElement('div') fieldGroupContent.appendChild(text.render()) fieldGroupContent.appendChild(button.render()) const fieldGroup = new kintoneUIComponent.FieldGroup({ content: fieldGroupContent, name: 'Group', toggle: 'expand' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Set Toggle</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { this.setState({ toggle: 'collapse' }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setToggle(toggle)"},{"location":"Reference/FieldGroup/#gettoggle","text":"Get toggle state of Field Group. Parameter None Returns Name Type Description toggle String The toggle state of Field Group. collapse expand Sample Javascript const text = new kintoneUIComponent.Text({ value: \"12345\" }); const fieldGroup = new kintoneUIComponent.FieldGroup({ content: text.render(), name: 'Group', toggle: 'expand' }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(fieldGroup.render()); console.log(fieldGroup.getToggle()); React import { FieldGroup, Label } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { name: 'Group', toggle: 'expand' }; } render() { return ( <div> <FieldGroup name={this.state.name} toggle={this.state.toggle} onToggle={this._handleToggleClick} > <Label text='Field Group Content Label' textColor='#e74c3c' backgroundColor='yellow' isRequired={true} /> </FieldGroup> <button onClick={this.handleClick}>Get Toggle</button> </div> ); } _handleToggleClick = () => { this.setState({ toggle: this.state.toggle === 'expand' ? 'collapse' : 'expand' }); } handleClick = () => { console.log(this.state.toggle); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getToggle()"},{"location":"Reference/IconButton/","text":"IconButton Overview Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.color String No Color of icon button: 'gray' 'blue' 'red' 'green' 'transparent' Default value is 'gray'. options.size String No Size of icon button: 'normal' 'small' Default value is 'normal'. options.shape String No The shape of of button. The value is one of:: 'circle' 'square' Default value is 'circle'. options.type String No The type of of button. The value is one of: 'insert' 'remove' 'close' 'file' 'right' 'left' Default value is 'insert'. options.isDisabled Boolean No The icon button will be disabled. Default value: 'false' options.isVisible Boolean No The icon button will be visible. Default value: 'true' Sample Javascript var insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setColor(color) Change color of icon button. Parameter Name Type Required Description color String Yes The color of the button. The value is one of the following: 'gray' 'blue' 'red' 'green' 'transparent' Default value is 'gray'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setColor('green'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", } } handleSetColor=()=>{ this.setState({color:\"blue\"}) } render() { return ( <div> <button onClick={this.handleSetColor}>Set Color</button> <IconButton type='insert' color={this.state.color} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setShape(shape) Change shape of icon button. Parameter Name Type Required Description shape String Yes The shape of the button. The value is one of the following: 'circle' 'square' Default value is 'circle'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setShape('square'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", shape:\"circle\" } } handleSetShape=()=>{ this.setState({shape:\"square\"}) } render() { return ( <div> <button onClick={this.handleSetShape}>Set Shape</button> <IconButton type='insert' color={this.state.color} shape={this.state.shape}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setSize(size) Change size of icon button. Parameter Name Type Required Description size String Yes The size of the button. The value is one of the following: 'normal' 'small' Default value is 'normal'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setSize('small'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", size:\"normal\" } } handleSetSize=()=>{ this.setState({size:\"small\"}) } render() { return ( <div> <button onClick={this.handleSetSize}>Set Size</button> <IconButton type='insert' color={this.state.color} size={this.state.size}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setType(type) Set the type of the button. Parameter Name Type Required Description type String Yes The type of button. The value is one of following: 'insert' 'remove' 'close' 'file' 'right' 'left' Default value is 'insert'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setType('remove'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", type:'insert' } } handleSetType=()=>{ this.setState({type:\"remove\"}) } render() { return ( <div> <button onClick={this.handleSetType}>Set type</button> <IconButton color={this.state.color} type={this.state.type}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.on('click', function(event) { console.log('on click'); }); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' onClick={this.handleClick} /> ); } handleClick = () => { console.log('on click'); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.show(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", isVisible:false } } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <IconButton color={this.state.color} isVisible={this.state.isVisible}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.hide(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", isVisible:true } } handleHide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <IconButton color={this.state.color} isVisible={this.state.isVisible}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disable() Disabled the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.disable(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", isDisabled:false } } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <IconButton color={this.state.color} isDisabled={this.state.isDisabled}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enable() Enabled the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.enable(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", isDisabled:true } } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <IconButton color={this.state.color} isDisabled={this.state.isDisabled}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"IconButton"},{"location":"Reference/IconButton/#iconbutton","text":"","title":"IconButton"},{"location":"Reference/IconButton/#overview","text":"","title":"Overview"},{"location":"Reference/IconButton/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.color String No Color of icon button: 'gray' 'blue' 'red' 'green' 'transparent' Default value is 'gray'. options.size String No Size of icon button: 'normal' 'small' Default value is 'normal'. options.shape String No The shape of of button. The value is one of:: 'circle' 'square' Default value is 'circle'. options.type String No The type of of button. The value is one of: 'insert' 'remove' 'close' 'file' 'right' 'left' Default value is 'insert'. options.isDisabled Boolean No The icon button will be disabled. Default value: 'false' options.isVisible Boolean No The icon button will be visible. Default value: 'true' Sample Javascript var insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } }","title":"Constructor"},{"location":"Reference/IconButton/#methods","text":"","title":"Methods"},{"location":"Reference/IconButton/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/IconButton/#setcolorcolor","text":"Change color of icon button. Parameter Name Type Required Description color String Yes The color of the button. The value is one of the following: 'gray' 'blue' 'red' 'green' 'transparent' Default value is 'gray'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setColor('green'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", } } handleSetColor=()=>{ this.setState({color:\"blue\"}) } render() { return ( <div> <button onClick={this.handleSetColor}>Set Color</button> <IconButton type='insert' color={this.state.color} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setColor(color)"},{"location":"Reference/IconButton/#setshapeshape","text":"Change shape of icon button. Parameter Name Type Required Description shape String Yes The shape of the button. The value is one of the following: 'circle' 'square' Default value is 'circle'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setShape('square'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", shape:\"circle\" } } handleSetShape=()=>{ this.setState({shape:\"square\"}) } render() { return ( <div> <button onClick={this.handleSetShape}>Set Shape</button> <IconButton type='insert' color={this.state.color} shape={this.state.shape}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setShape(shape)"},{"location":"Reference/IconButton/#setsizesize","text":"Change size of icon button. Parameter Name Type Required Description size String Yes The size of the button. The value is one of the following: 'normal' 'small' Default value is 'normal'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setSize('small'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", size:\"normal\" } } handleSetSize=()=>{ this.setState({size:\"small\"}) } render() { return ( <div> <button onClick={this.handleSetSize}>Set Size</button> <IconButton type='insert' color={this.state.color} size={this.state.size}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setSize(size)"},{"location":"Reference/IconButton/#settypetype","text":"Set the type of the button. Parameter Name Type Required Description type String Yes The type of button. The value is one of following: 'insert' 'remove' 'close' 'file' 'right' 'left' Default value is 'insert'. Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setType('remove'); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", type:'insert' } } handleSetType=()=>{ this.setState({type:\"remove\"}) } render() { return ( <div> <button onClick={this.handleSetType}>Set type</button> <IconButton color={this.state.color} type={this.state.type}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setType(type)"},{"location":"Reference/IconButton/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.on('click', function(event) { console.log('on click'); }); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' onClick={this.handleClick} /> ); } handleClick = () => { console.log('on click'); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callback)"},{"location":"Reference/IconButton/#show","text":"Display the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.show(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", isVisible:false } } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <IconButton color={this.state.color} isVisible={this.state.isVisible}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/IconButton/#hide","text":"Hide the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.hide(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", isVisible:true } } handleHide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <IconButton color={this.state.color} isVisible={this.state.isVisible}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/IconButton/#disable","text":"Disabled the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.disable(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", isDisabled:false } } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <IconButton color={this.state.color} isDisabled={this.state.isDisabled}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disable()"},{"location":"Reference/IconButton/#enable","text":"Enabled the icon button. Parameter None Returns None Sample Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.enable(); React import { IconButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state={ color:\"red\", isDisabled:true } } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <IconButton color={this.state.color} isDisabled={this.state.isDisabled}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enable()"},{"location":"Reference/Label/","text":"Label Overview Constructor Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.text String No Caption of label. options.isRequired Boolean No Display '*' character at the end of caption. Default value is false . options.textColor String No Color of caption. Can set using the following formats: Color Names : red, yellow, black, etc. HEX: #e74c3c, #0000ff, etc. RGBA: rgba(0, 0, 0, 1), rgba(255, 99, 71, 1), etc options.backgroundColor String No Color of background. Can set using the following formats: Color Names : red, yellow, black, etc. HEX: #e74c3c, #0000ff, etc. RGBA: rgba(0, 0, 0, 1), rgba(255, 99, 71, 1), etc options.isVisible Boolean No The label will be visible. Default value: 'true' Sample Javascript var label = new kintoneUIComponent.Label({ text: 'This is Label' }); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='This is Label' /> ); }; }; Methods render() Get DOM element of Label component. Parameter None Returns DOM element Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <Label text='This is Label' /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); setText(text) Setting text of Label component. Parameter Name Type Required Description text String Yes Caption of label. If text is undefined, null or true, The label will be displayed blank Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Set text of Label'; btn.onclick = function() { label.setText('Set text') }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { text: 'This is Label' }; }; setText = () => { this.setState({ text: 'Set text' }); }; render() { return ( <div> <Label text={this.state.text} /> <button onClick={this.setText}>Set text</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); setTextColor(color) Setting color of caption. Parameter Name Type Required Description color String Yes Color of caption. Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Set color of Label'; btn.onclick = function() { label.setTextColor('#e74c3c'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { textColor: 'black' }; }; setTextColor = () => { this.setState({ textColor: 'red' }); }; render() { return ( <div> <Label text='This is Label' textColor={this.state.textColor} /> <button onClick={this.setTextColor}>Set color of Label</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); setBackgroundColor(color) Setting color of background of Label component. Parameter Name Type Required Description color String Yes Color of background. Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Set background color of Label'; btn.onclick = function() { label.setBackgroundColor('#e74c3c'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { backgroundColor: 'white' }; }; setBackgroundColor = () => { this.setState({ backgroundColor: 'red' }); }; render() { return ( <div> <Label text='This is Label' backgroundColor={this.state.backgroundColor} /> <button onClick={this.setBackgroundColor}>Set background color of Label</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); setRequired(required) Setting the required for Label component. Parameter Name Type Required Description required Boolean Yes Required options: true : The * character will be displayed at the end of the caption. false : The * character will be hidden Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Set required'; btn.onclick = function() { label.setRequired(true); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isRequired: false }; }; setRequired = () => { this.setState({ isRequired: true }); }; render() { return ( <div> <Label text='This is Label' isRequired={this.state.isRequired} /> <button onClick={this.setRequired}>Set required</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); on(eventName, callBack) Register callback for an event of Label component. Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes The callback function call when the event occurs Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); label.on('click', function () { console.log('Label onClick'); }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isRequired: false }; }; onClick = () => { console.log('Label onClick'); }; render() { return ( <Label text='This is Label' onClick={this.onClick} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); show() Display Label component. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label', isVisible: false}); var btn = document.createElement('button'); btn.textContent = 'Show label'; btn.onclick = function() { label.show() }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: false }; }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <Label text='This is Label' isVisible={this.state.isVisible} /> <button onClick={this.show}>Show label</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); hide() Hide Label component. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Hide label'; btn.onclick = function() { label.hide() }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; }; hide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <Label text='This is Label' isVisible={this.state.isVisible} /> <button onClick={this.hide}>Hide label</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"Label"},{"location":"Reference/Label/#label","text":"","title":"Label"},{"location":"Reference/Label/#overview","text":"","title":"Overview"},{"location":"Reference/Label/#constructor","text":"Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.text String No Caption of label. options.isRequired Boolean No Display '*' character at the end of caption. Default value is false . options.textColor String No Color of caption. Can set using the following formats: Color Names : red, yellow, black, etc. HEX: #e74c3c, #0000ff, etc. RGBA: rgba(0, 0, 0, 1), rgba(255, 99, 71, 1), etc options.backgroundColor String No Color of background. Can set using the following formats: Color Names : red, yellow, black, etc. HEX: #e74c3c, #0000ff, etc. RGBA: rgba(0, 0, 0, 1), rgba(255, 99, 71, 1), etc options.isVisible Boolean No The label will be visible. Default value: 'true' Sample Javascript var label = new kintoneUIComponent.Label({ text: 'This is Label' }); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='This is Label' /> ); }; };","title":"Constructor"},{"location":"Reference/Label/#methods","text":"","title":"Methods"},{"location":"Reference/Label/#render","text":"Get DOM element of Label component. Parameter None Returns DOM element Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <Label text='This is Label' /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"render()"},{"location":"Reference/Label/#settexttext","text":"Setting text of Label component. Parameter Name Type Required Description text String Yes Caption of label. If text is undefined, null or true, The label will be displayed blank Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Set text of Label'; btn.onclick = function() { label.setText('Set text') }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { text: 'This is Label' }; }; setText = () => { this.setState({ text: 'Set text' }); }; render() { return ( <div> <Label text={this.state.text} /> <button onClick={this.setText}>Set text</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"setText(text)"},{"location":"Reference/Label/#settextcolorcolor","text":"Setting color of caption. Parameter Name Type Required Description color String Yes Color of caption. Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Set color of Label'; btn.onclick = function() { label.setTextColor('#e74c3c'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { textColor: 'black' }; }; setTextColor = () => { this.setState({ textColor: 'red' }); }; render() { return ( <div> <Label text='This is Label' textColor={this.state.textColor} /> <button onClick={this.setTextColor}>Set color of Label</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"setTextColor(color)"},{"location":"Reference/Label/#setbackgroundcolorcolor","text":"Setting color of background of Label component. Parameter Name Type Required Description color String Yes Color of background. Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Set background color of Label'; btn.onclick = function() { label.setBackgroundColor('#e74c3c'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { backgroundColor: 'white' }; }; setBackgroundColor = () => { this.setState({ backgroundColor: 'red' }); }; render() { return ( <div> <Label text='This is Label' backgroundColor={this.state.backgroundColor} /> <button onClick={this.setBackgroundColor}>Set background color of Label</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"setBackgroundColor(color)"},{"location":"Reference/Label/#setrequiredrequired","text":"Setting the required for Label component. Parameter Name Type Required Description required Boolean Yes Required options: true : The * character will be displayed at the end of the caption. false : The * character will be hidden Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Set required'; btn.onclick = function() { label.setRequired(true); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isRequired: false }; }; setRequired = () => { this.setState({ isRequired: true }); }; render() { return ( <div> <Label text='This is Label' isRequired={this.state.isRequired} /> <button onClick={this.setRequired}>Set required</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"setRequired(required)"},{"location":"Reference/Label/#oneventname-callback","text":"Register callback for an event of Label component. Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes The callback function call when the event occurs Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); label.on('click', function () { console.log('Label onClick'); }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); React import { Label } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isRequired: false }; }; onClick = () => { console.log('Label onClick'); }; render() { return ( <Label text='This is Label' onClick={this.onClick} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"on(eventName, callBack)"},{"location":"Reference/Label/#show","text":"Display Label component. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label', isVisible: false}); var btn = document.createElement('button'); btn.textContent = 'Show label'; btn.onclick = function() { label.show() }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: false }; }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <Label text='This is Label' isVisible={this.state.isVisible} /> <button onClick={this.show}>Show label</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"show()"},{"location":"Reference/Label/#hide","text":"Hide Label component. Parameter None Returns None Sample Javascript var label = new kintoneUIComponent.Label({text: 'This is Label'}); var btn = document.createElement('button'); btn.textContent = 'Hide label'; btn.onclick = function() { label.hide() }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); body.appendChild(btn); React import {Label} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; }; hide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <Label text='This is Label' isVisible={this.state.isVisible} /> <button onClick={this.hide}>Hide label</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"hide()"},{"location":"Reference/MultipleChoice/","text":"MultipleChoice Overview Number Description 1 Title 2 Selected item 3 Not selected item 4 Disabled item 5 Hover item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on multiple choices. options.items[x].value String Conditional String value of item. This is required if options.items[x] is specified. If the value is duplicate, the error message will be displayed options.items[x].label String No String label of item options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. options.value Array No List of checked item. If the 'options.value[]' has nonexistent value, the valid value will be checked. If the 'value[]' has no valid value, no item will be checked. options.isDisabled Boolean No The multiple choices will be disabled. Default value: 'false' options.isVisible Boolean No The multiple choices will be visible. Default value: 'true' Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); addItem(item) Add an item to the end of multiple choices list. Parameter Name Type Required Description item Object Yes The item will be added to multiple choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.addItem({ label: 'Grape', value: 'Grape', isDisabled: false }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } handleAddItem=(item)=>{ this.state.items.push(item); this.setState({items:this.state.items}); } render() { let item={ label: 'Lemon1', value: 'Lemon1', } return ( <div> <button onClick={()=>this.handleAddItem(item)}>Add Item</button> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getItem(index) Get the item of specific position in multiple choices list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item Object The item of specific position in multiple choices list. item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var firstItem = mulChoice.getItem(0); console.log(firstItem); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items= [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); removeItem(index) Remove the specific item from multiple choice list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.removeItem(0); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getItems() Get all items of the multiple choice. Parameter None Returns Multiple choice list item. Name Type Description items Array<Object> List items of the multiple choice items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var items = mulChoice.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setItems(items) Set all items of the multiple choices list. When using this function in pure js, selected value is released. Parameter Name Type Required Description options Object No A object contains params of constructor. options.items Array<Object> Yes List of items which will be displayed on multiple choice. options.items[x].value String Yes If the value is duplicate, the error message will be displayed. options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. Return None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(mulChoice.render()); var newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; mulChoice.setItems(newItems); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Set Items</button> </div> ); } handleClick = () => { const newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; this.setState({ items: newItems, value: ['Apple'] }); }; } getValue() Get the checked values of multiple choice. Parameter None Returns List of checked items. Name Type Description value Array<String> List selected values of the multiple choice. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e);} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var selectedItems = mulChoice.getValue(); selectedItems.forEach(function(item) { console.log(item); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange', 'Banana'] }; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setValue(value) Set the checked value of multiple choice. Parameter Name Type Required Description value Array<String> yes The value of an item. If the 'value[]' has nonexistent value, the valid value will be checked. If the 'value[]' has no valid value, no item will be checked. Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ], onChange: e => { console.log(e); }, value: [\"Orange\", \"Banana\"] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.setValue([\"Lemon\"]); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: ['Lemon'] }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disableItem(value) Set the disabled items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disableItem('Orange'); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enableItem(value) Set the enable items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enableItem('Banana'); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.on('change', function(value) { console.log('on change'); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={this.handleChange} /> ); } handleChange= (e) => { console.log(\"change\",e); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)}, }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.show(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items,isVisible:false}; } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <MultipleChoice value={this.state.value} isVisible={this.state.isVisible} items={this.state.items}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.hide(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items,isVisible:true}; } handleHide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <MultipleChoice value={this.state.value} isVisible={this.state.isVisible} items={this.state.items}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disable() Disabled the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disable(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items,isDisabled:false}; } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <MultipleChoice value={this.state.value} isDisabled={this.state.isDisabled} items={this.state.items}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enable() Enabled the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enable(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items,isDisabled:true}; } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <MultipleChoice value={this.state.value} isDisabled={this.state.isDisabled} items={this.state.items}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"MultipleChoice"},{"location":"Reference/MultipleChoice/#multiplechoice","text":"","title":"MultipleChoice"},{"location":"Reference/MultipleChoice/#overview","text":"Number Description 1 Title 2 Selected item 3 Not selected item 4 Disabled item 5 Hover item","title":"Overview"},{"location":"Reference/MultipleChoice/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on multiple choices. options.items[x].value String Conditional String value of item. This is required if options.items[x] is specified. If the value is duplicate, the error message will be displayed options.items[x].label String No String label of item options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. options.value Array No List of checked item. If the 'options.value[]' has nonexistent value, the valid value will be checked. If the 'value[]' has no valid value, no item will be checked. options.isDisabled Boolean No The multiple choices will be disabled. Default value: 'false' options.isVisible Boolean No The multiple choices will be visible. Default value: 'true' Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/MultipleChoice/#methods","text":"","title":"Methods"},{"location":"Reference/MultipleChoice/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/MultipleChoice/#additemitem","text":"Add an item to the end of multiple choices list. Parameter Name Type Required Description item Object Yes The item will be added to multiple choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.addItem({ label: 'Grape', value: 'Grape', isDisabled: false }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } handleAddItem=(item)=>{ this.state.items.push(item); this.setState({items:this.state.items}); } render() { let item={ label: 'Lemon1', value: 'Lemon1', } return ( <div> <button onClick={()=>this.handleAddItem(item)}>Add Item</button> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"addItem(item)"},{"location":"Reference/MultipleChoice/#getitemindex","text":"Get the item of specific position in multiple choices list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item Object The item of specific position in multiple choices list. item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var firstItem = mulChoice.getItem(0); console.log(firstItem); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items= [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getItem(index)"},{"location":"Reference/MultipleChoice/#removeitemindex","text":"Remove the specific item from multiple choice list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.removeItem(0); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"removeItem(index)"},{"location":"Reference/MultipleChoice/#getitems","text":"Get all items of the multiple choice. Parameter None Returns Multiple choice list item. Name Type Description items Array<Object> List items of the multiple choice items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var items = mulChoice.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getItems()"},{"location":"Reference/MultipleChoice/#setitemsitems","text":"Set all items of the multiple choices list. When using this function in pure js, selected value is released. Parameter Name Type Required Description options Object No A object contains params of constructor. options.items Array<Object> Yes List of items which will be displayed on multiple choice. options.items[x].value String Yes If the value is duplicate, the error message will be displayed. options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. Return None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(mulChoice.render()); var newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; mulChoice.setItems(newItems); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: ['Orange', 'Banana'] }; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Set Items</button> </div> ); } handleClick = () => { const newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; this.setState({ items: newItems, value: ['Apple'] }); }; }","title":"setItems(items)"},{"location":"Reference/MultipleChoice/#getvalue","text":"Get the checked values of multiple choice. Parameter None Returns List of checked items. Name Type Description value Array<String> List selected values of the multiple choice. Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e);} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var selectedItems = mulChoice.getValue(); selectedItems.forEach(function(item) { console.log(item); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange', 'Banana'] }; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getValue()"},{"location":"Reference/MultipleChoice/#setvaluevalue","text":"Set the checked value of multiple choice. Parameter Name Type Required Description value Array<String> yes The value of an item. If the 'value[]' has nonexistent value, the valid value will be checked. If the 'value[]' has no valid value, no item will be checked. Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: \"Orange\", value: \"Orange\", isDisabled: false }, { label: \"Banana\", value: \"Banana\", isDisabled: true }, { label: \"Lemon\", value: \"Lemon\", isDisabled: true } ], onChange: e => { console.log(e); }, value: [\"Orange\", \"Banana\"] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.setValue([\"Lemon\"]); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: ['Lemon'] }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setValue(value)"},{"location":"Reference/MultipleChoice/#disableitemvalue","text":"Set the disabled items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disableItem('Orange'); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disableItem(value)"},{"location":"Reference/MultipleChoice/#enableitemvalue","text":"Set the enable items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enableItem('Banana'); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enableItem(value)"},{"location":"Reference/MultipleChoice/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.on('change', function(value) { console.log('on change'); }); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={this.handleChange} /> ); } handleChange= (e) => { console.log(\"change\",e); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callBack)"},{"location":"Reference/MultipleChoice/#show","text":"Display the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)}, }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.show(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items,isVisible:false}; } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <MultipleChoice value={this.state.value} isVisible={this.state.isVisible} items={this.state.items}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/MultipleChoice/#hide","text":"Hide the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.hide(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items,isVisible:true}; } handleHide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <MultipleChoice value={this.state.value} isVisible={this.state.isVisible} items={this.state.items}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/MultipleChoice/#disable","text":"Disabled the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disable(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items,isDisabled:false}; } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Disable</button> <MultipleChoice value={this.state.value} isDisabled={this.state.isDisabled} items={this.state.items}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disable()"},{"location":"Reference/MultipleChoice/#enable","text":"Enabled the multiple choice. Parameter None Returns None Sample Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'], onChange:(e)=>{console.log(e)} }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enable(); React import { MultipleChoice } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items,isDisabled:true}; } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <MultipleChoice value={this.state.value} isDisabled={this.state.isDisabled} items={this.state.items}/> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enable()"},{"location":"Reference/NotifyPopup/","text":"NotifyPopup Overview Number Description 1 Success popup 2 Error popup 3 Icon button for closing popup 4 Title of popup 5 Information popup Constructor Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.text String No Content of notify popup. options.type String No Type of notify popup: 'error' 'success' 'info' Default value: error options.isVisible Boolean No The notify popup will be visible. Default value: 'true' Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success' }); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props){ super(props); }; render() { return ( <NotifyPopup text='Here is NotifyPopup' type='success' /> ); }; }; Methods render() Get DOM element of NotifyPopup component. Parameter None Returns DOM element Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = {isVisible: true}; }; handleClickToCloseNotifyPopup = () => { this.setState({isVisible: false}); }; render() { return ( <NotifyPopup text='Here is NotifyPopup' type='success' isVisible={this.state.isVisible} onClose={this.handleClickToCloseNotifyPopup} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); setText(text) Setting the text content of NotifyPopup component. Parameter Name Type Required Description text String Yes Text content of notify popup. If text is undefined, null or true, The popup will be displayed blank. Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success' }); var btn = document.createElement('button'); btn.textContent = 'Set text of NotifyPopup'; btn.onclick = function() { notifyPopup.setText('Set text'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); body.appendChild(btn); React import {NotifyPopup} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { text: 'Here is NotifyPopup' }; }; setText = () => { this.setState({ text: 'Set text' }); }; render() { return ( <div> <NotifyPopup text={this.state.text} type='success' /> <button onClick={this.setText}>Set text</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); setType(type) Setting type of NotifyPopup component. Parameter Name Type Required Description type String Yes Type of NotifyPopup: 'error' 'success' 'info' Default value: 'error' Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success', }); var btn = document.createElement('button'); btn.textContent = 'Set type of NotifyPopup'; btn.onclick = function() { notifyPopup.setType('info'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); body.appendChild(btn); React import {NotifyPopup} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { type: 'success' }; }; setType = () => { this.setState({ type: 'info' }); }; render() { return ( <div> <NotifyPopup text='Here is NotifyPopup' type={this.state.type}/> <button onClick={this.setType}>Set type</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); on(eventName, callback) Register callback for an event of NotifyPopup component. Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'close' callback function Yes The callback function call when the event occurs Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success', }); notifyPopup.on('click', function(event) { console.log('NotifyPopup onClick'); }); notifyPopup.on('close', () => { console.log('NotifyPopup onClose'); }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; }; onClose = (event) => { console.log('NotifyPopup onClose', event.timeStamp); this.setState({isVisible: false}); }; onClick = (event) => { console.log('NotifyPopup onClick', event.timeStamp); } render() { return ( <NotifyPopup text='Here is NotifyPopup' type='success' isVisible={this.state.isVisible} onClose={this.onClose} onClick={this.onClick} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); show() Display NotifyPopup component. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success', isVisible: false }); var btn = document.createElement('button'); btn.textContent = 'Show NotifyPopup'; btn.onclick = function() { notifyPopup.show(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); body.appendChild(btn); React import {NotifyPopup} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: false }; }; show = () => { this.setState({isVisible: true}); }; render() { return ( <div> <NotifyPopup text='Here is NotifyPopup' type='success' isVisible={this.state.isVisible} /> <button onClick={this.show}>Show NotifyPopup</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); hide() Hide NotifyPopup component. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success', }); var btn = document.createElement('button'); btn.textContent = 'Hide NotifyPopup'; btn.onclick = function() { notifyPopup.hide(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); body.appendChild(btn); React import {NotifyPopup} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; }; hide = () => { this.setState({isVisible: false}); }; render() { return ( <div> <NotifyPopup text='Here is NotifyPopup' type='success' isVisible={this.state.isVisible} /> <button onClick={this.hide}>Hide NotifyPopup</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"NotifyPopup"},{"location":"Reference/NotifyPopup/#notifypopup","text":"","title":"NotifyPopup"},{"location":"Reference/NotifyPopup/#overview","text":"Number Description 1 Success popup 2 Error popup 3 Icon button for closing popup 4 Title of popup 5 Information popup","title":"Overview"},{"location":"Reference/NotifyPopup/#constructor","text":"Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.text String No Content of notify popup. options.type String No Type of notify popup: 'error' 'success' 'info' Default value: error options.isVisible Boolean No The notify popup will be visible. Default value: 'true' Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success' }); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props){ super(props); }; render() { return ( <NotifyPopup text='Here is NotifyPopup' type='success' /> ); }; };","title":"Constructor"},{"location":"Reference/NotifyPopup/#methods","text":"","title":"Methods"},{"location":"Reference/NotifyPopup/#render","text":"Get DOM element of NotifyPopup component. Parameter None Returns DOM element Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props){ super(props); this.state = {isVisible: true}; }; handleClickToCloseNotifyPopup = () => { this.setState({isVisible: false}); }; render() { return ( <NotifyPopup text='Here is NotifyPopup' type='success' isVisible={this.state.isVisible} onClose={this.handleClickToCloseNotifyPopup} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"render()"},{"location":"Reference/NotifyPopup/#settexttext","text":"Setting the text content of NotifyPopup component. Parameter Name Type Required Description text String Yes Text content of notify popup. If text is undefined, null or true, The popup will be displayed blank. Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success' }); var btn = document.createElement('button'); btn.textContent = 'Set text of NotifyPopup'; btn.onclick = function() { notifyPopup.setText('Set text'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); body.appendChild(btn); React import {NotifyPopup} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { text: 'Here is NotifyPopup' }; }; setText = () => { this.setState({ text: 'Set text' }); }; render() { return ( <div> <NotifyPopup text={this.state.text} type='success' /> <button onClick={this.setText}>Set text</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"setText(text)"},{"location":"Reference/NotifyPopup/#settypetype","text":"Setting type of NotifyPopup component. Parameter Name Type Required Description type String Yes Type of NotifyPopup: 'error' 'success' 'info' Default value: 'error' Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success', }); var btn = document.createElement('button'); btn.textContent = 'Set type of NotifyPopup'; btn.onclick = function() { notifyPopup.setType('info'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); body.appendChild(btn); React import {NotifyPopup} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { type: 'success' }; }; setType = () => { this.setState({ type: 'info' }); }; render() { return ( <div> <NotifyPopup text='Here is NotifyPopup' type={this.state.type}/> <button onClick={this.setType}>Set type</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"setType(type)"},{"location":"Reference/NotifyPopup/#oneventname-callback","text":"Register callback for an event of NotifyPopup component. Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'close' callback function Yes The callback function call when the event occurs Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success', }); notifyPopup.on('click', function(event) { console.log('NotifyPopup onClick'); }); notifyPopup.on('close', () => { console.log('NotifyPopup onClose'); }) var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); React import { NotifyPopup } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; }; onClose = (event) => { console.log('NotifyPopup onClose', event.timeStamp); this.setState({isVisible: false}); }; onClick = (event) => { console.log('NotifyPopup onClick', event.timeStamp); } render() { return ( <NotifyPopup text='Here is NotifyPopup' type='success' isVisible={this.state.isVisible} onClose={this.onClose} onClick={this.onClick} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"on(eventName, callback)"},{"location":"Reference/NotifyPopup/#show","text":"Display NotifyPopup component. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success', isVisible: false }); var btn = document.createElement('button'); btn.textContent = 'Show NotifyPopup'; btn.onclick = function() { notifyPopup.show(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); body.appendChild(btn); React import {NotifyPopup} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: false }; }; show = () => { this.setState({isVisible: true}); }; render() { return ( <div> <NotifyPopup text='Here is NotifyPopup' type='success' isVisible={this.state.isVisible} /> <button onClick={this.show}>Show NotifyPopup</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"show()"},{"location":"Reference/NotifyPopup/#hide","text":"Hide NotifyPopup component. Parameter None Returns None Sample Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Here is NotifyPopup', type: 'success', }); var btn = document.createElement('button'); btn.textContent = 'Hide NotifyPopup'; btn.onclick = function() { notifyPopup.hide(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); body.appendChild(btn); React import {NotifyPopup} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; }; hide = () => { this.setState({isVisible: false}); }; render() { return ( <div> <NotifyPopup text='Here is NotifyPopup' type='success' isVisible={this.state.isVisible} /> <button onClick={this.hide}>Hide NotifyPopup</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"hide()"},{"location":"Reference/RadioButton/","text":"RadioButton Overview Number Description 1 Title 2 Icon when item is selected 3 Value of item 4 Icon when item isn't selected Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.name String Conditional Name of radio button for submit. Name is required if options exists. If value isn't set, the error message will be displayed. options.items Array<Object> No List of item which displayed in radio button. options.items[x].value String Conditional The value of an item. This is required if options.items[x] is specified. If the value is duplicate, the error will be displayed options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected item. If the options.value is nonexistent value, no item will be selected. options.isDisabled Boolean No The radio button will be disabled. Default value: 'false' options.isVisible Boolean No The radio button will be visible. Default value: 'true' Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); addItem(item) Add an item to end of the radio button list. Parameter Name Type Required Description item Object Yes The item object will be added. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [{label:\"Banana\",value:\"Banana\"}], value: \"Banana\" }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); removeItem(index) Remove item at specific index of radio button list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.removeItem(0); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [{ label: 'Lemon', value: 'Lemon', isDisabled: true }], value:\"Lemon\" }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\")); getItems() Get all items in radio button list. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); var items = radioBtn.getItems(); items.forEach(function(item) { console.log(item); }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setItems(items) Set all items of the radio button list. When using this function in pure js, selected value is released. Parameter Name Type Required Description options Object No A object contains params of constructor. options.items Array<Object> Yes List of items will be displayed in radio button. options.items[x].value String Yes If the value is duplicate, the error message will be displayed. options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: 'fruit', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: 'Banana' }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(radioBtn.render()); var newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; radioBtn.setItems(newItems); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }; } render() { return ( <div> <RadioButton name=\"fruit\" items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Set Items</button> </div> ); } handleClick = () => { const newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; this.setState({ items: newItems, value: 'Apple' }); }; } getValue() Get the selected item in radio button. Parameter None Returns Name Type Description value String The value of the selected item Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); console.log(radioBtn.getValue()); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); setValue(value) Set the selected item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. If the value is nonexistent value, no item will be selected. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.setValue('Lemon'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disableItem(value) Set the disabled item for the radio button. Parameter Name Type Required Description value String Yes The value of an item in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disableItem('Orange'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enableItem(value) Set the enabled item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enableItem('Banana'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.on('change', function(value) { console.log('on change'); }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); show() Display the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.show(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isVisible:false, }; } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); hide() Hide the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.hide(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isVisible:true, }; } handleHide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); disable() Disabled the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disable(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isDisabled:false, }; } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Dsiable</button> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\")); enable() Enabled the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enable(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isDisabled:true, }; } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"RadioButton"},{"location":"Reference/RadioButton/#radiobutton","text":"","title":"RadioButton"},{"location":"Reference/RadioButton/#overview","text":"Number Description 1 Title 2 Icon when item is selected 3 Value of item 4 Icon when item isn't selected","title":"Overview"},{"location":"Reference/RadioButton/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.name String Conditional Name of radio button for submit. Name is required if options exists. If value isn't set, the error message will be displayed. options.items Array<Object> No List of item which displayed in radio button. options.items[x].value String Conditional The value of an item. This is required if options.items[x] is specified. If the value is duplicate, the error will be displayed options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected item. If the options.value is nonexistent value, no item will be selected. options.isDisabled Boolean No The radio button will be disabled. Default value: 'false' options.isVisible Boolean No The radio button will be visible. Default value: 'true' Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } }","title":"Constructor"},{"location":"Reference/RadioButton/#methods","text":"","title":"Methods"},{"location":"Reference/RadioButton/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"render()"},{"location":"Reference/RadioButton/#additemitem","text":"Add an item to end of the radio button list. Parameter Name Type Required Description item Object Yes The item object will be added. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [{label:\"Banana\",value:\"Banana\"}], value: \"Banana\" }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"addItem(item)"},{"location":"Reference/RadioButton/#removeitemindex","text":"Remove item at specific index of radio button list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.removeItem(0); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: [{ label: 'Lemon', value: 'Lemon', isDisabled: true }], value:\"Lemon\" }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"removeItem(index)"},{"location":"Reference/RadioButton/#getitems","text":"Get all items in radio button list. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); var items = radioBtn.getItems(); items.forEach(function(item) { console.log(item); }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getItems()"},{"location":"Reference/RadioButton/#setitemsitems","text":"Set all items of the radio button list. When using this function in pure js, selected value is released. Parameter Name Type Required Description options Object No A object contains params of constructor. options.items Array<Object> Yes List of items will be displayed in radio button. options.items[x].value String Yes If the value is duplicate, the error message will be displayed. options.items[x].label String No Display string. options.items[x].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: 'fruit', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ], value: 'Banana' }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(radioBtn.render()); var newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; radioBtn.setItems(newItems); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }; } render() { return ( <div> <RadioButton name=\"fruit\" items={this.state.items} value={this.state.value} onChange={value => { this.setState({ value }); }} /> <button onClick={this.handleClick}>Set Items</button> </div> ); } handleClick = () => { const newItems = [ { label: 'Apple', value: 'Apple', isDisabled: true }, { label: 'Grapes', value: 'Grapes', isDisabled: false } ]; this.setState({ items: newItems, value: 'Apple' }); }; }","title":"setItems(items)"},{"location":"Reference/RadioButton/#getvalue","text":"Get the selected item in radio button. Parameter None Returns Name Type Description value String The value of the selected item Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); console.log(radioBtn.getValue()); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"getValue()"},{"location":"Reference/RadioButton/#setvaluevalue","text":"Set the selected item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. If the value is nonexistent value, no item will be selected. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.setValue('Lemon'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"setValue(value)"},{"location":"Reference/RadioButton/#disableitemvalue","text":"Set the disabled item for the radio button. Parameter Name Type Required Description value String Yes The value of an item in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disableItem('Orange'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disableItem(value)"},{"location":"Reference/RadioButton/#enableitemvalue","text":"Set the enabled item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enableItem('Banana'); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enableItem(value)"},{"location":"Reference/RadioButton/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.on('change', function(value) { console.log('on change'); }); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"on(eventName, callBack)"},{"location":"Reference/RadioButton/#show","text":"Display the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.show(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isVisible:false, }; } handleShow=()=>{ this.setState({isVisible:true}) } render() { return ( <div> <button onClick={this.handleShow}>Show</button> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"show()"},{"location":"Reference/RadioButton/#hide","text":"Hide the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.hide(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isVisible:true, }; } handleHide=()=>{ this.setState({isVisible:false}) } render() { return ( <div> <button onClick={this.handleHide}>Hide</button> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isVisible={this.state.isVisible} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"hide()"},{"location":"Reference/RadioButton/#disable","text":"Disabled the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disable(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isDisabled:false, }; } handleDisable=()=>{ this.setState({isDisabled:true}) } render() { return ( <div> <button onClick={this.handleDisable}>Dsiable</button> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"disable()"},{"location":"Reference/RadioButton/#enable","text":"Enabled the radio button. Parameter None Returns None Sample Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enable(); React import { RadioButton } from '@kintone/kintone-ui-component'; import React from 'react'; import Reactdom from \"react-dom\"; export default class Plugin extends React.Component { constructor(props) { super(props); const items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana', isDisabled:true, }; } handleEnable=()=>{ this.setState({isDisabled:false}) } render() { return ( <div> <button onClick={this.handleEnable}>Enable</button> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isDisabled={this.state.isDisabled} /> </div> ); } } Reactdom.render(<Plugin />, document.getElementById(\"root\"));","title":"enable()"},{"location":"Reference/Spinner/","text":"Spinner Overview Constructor Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.isVisible Boolean No The spinner will be visible. Default value: 'false' Sample Javascript var spinner = new kintoneUIComponent.Spinner({isVisible: true}); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); }; }; Methods render() Get DOM element of Spinner component. Parameter None Returns DOM element Sample Javascript var spinner = new kintoneUIComponent.Spinner({isVisible: true}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); show() Display Spinner component. Parameter None Returns None Sample Javascript var spinner = new kintoneUIComponent.Spinner(); var btn = document.createElement('button'); btn.textContent = 'Open spinner'; btn.onclick = function() { spinner.show(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); body.appendChild(btn); React import {Spinner} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: false }; }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <Spinner isVisible={this.state.isVisible} /> <button onClick={this.show}>Open spinner</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); hide() Hide Spinner component. Parameter None Returns None Sample Javascript var spinner = new kintoneUIComponent.Spinner({ isVisible: true }); setTimeout(() => { spinner.hide(); }, 3000); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); React import {Spinner} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; }; hide = () => { this.setState({ isVisible: false }); }; componentDidMount() { setTimeout(() => { this.hide(); }, 3000); }; render() { return ( <Spinner isVisible={this.state.isVisible} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"Spinner"},{"location":"Reference/Spinner/#spinner","text":"","title":"Spinner"},{"location":"Reference/Spinner/#overview","text":"","title":"Overview"},{"location":"Reference/Spinner/#constructor","text":"Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.isVisible Boolean No The spinner will be visible. Default value: 'false' Sample Javascript var spinner = new kintoneUIComponent.Spinner({isVisible: true}); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); }; };","title":"Constructor"},{"location":"Reference/Spinner/#methods","text":"","title":"Methods"},{"location":"Reference/Spinner/#render","text":"Get DOM element of Spinner component. Parameter None Returns DOM element Sample Javascript var spinner = new kintoneUIComponent.Spinner({isVisible: true}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); React import { Spinner } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"render()"},{"location":"Reference/Spinner/#show","text":"Display Spinner component. Parameter None Returns None Sample Javascript var spinner = new kintoneUIComponent.Spinner(); var btn = document.createElement('button'); btn.textContent = 'Open spinner'; btn.onclick = function() { spinner.show(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); body.appendChild(btn); React import {Spinner} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: false }; }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <Spinner isVisible={this.state.isVisible} /> <button onClick={this.show}>Open spinner</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"show()"},{"location":"Reference/Spinner/#hide","text":"Hide Spinner component. Parameter None Returns None Sample Javascript var spinner = new kintoneUIComponent.Spinner({ isVisible: true }); setTimeout(() => { spinner.hide(); }, 3000); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); React import {Spinner} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { isVisible: true }; }; hide = () => { this.setState({ isVisible: false }); }; componentDidMount() { setTimeout(() => { this.hide(); }, 3000); }; render() { return ( <Spinner isVisible={this.state.isVisible} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"hide()"},{"location":"Reference/Table/","text":"Table Overview Number Description 1 Header of column 2 Icon button for insert row 3 Icon button for remove row 4 Child control component 5 Sample row Note The Table are supporting child control components (Item-4) as below: Built-in supported components: Text Dropdown CheckBox MultipleChoice RadioButton Label Alert Custom components (DOM Elements) \u203b Child control components must be an instance of TableCell . Constructor Parameter Name Type Required Description options Object No The object contains the parameters of constructor. options.columns Array<Object> No The row template. options.columns[x].header String No Header of column. options.columns[x].cell Function No Returns cell template object. Refer TableCell for more information. options.data Array<Object> No The value of table. Refer to the getValue() and setValue(value) for more information. options.defaultRowData Object No The default value of new row. options.actionButtonsShown Boolean No Show the action buttons when this parameter is True . Default: True options.onRowAdd Callback No Handler for row add event. Return row data object to overwrite default row data object. options.onRowRemove Callback No Handler for row remove event. options.onCellChange Callback No Handler for cell change event. Sample JS Simple (function() { // create built-in cell component var textBuiltInCell = function () { return kintoneUIComponent.createTableCell('text', 'textBuiltIn'); }; // create custom cell component var textCustomCell = function() { return { init: function({rowData, updateRowData}) { var text = document.createElement('input'); text.onchange = function(event) { updateRowData({textCustom: {value: event.target.value}}, false); }; this.textCustom = text; return text; }, update: function({ rowData }) { this.textCustom.value = rowData.textCustom.value; } } }; var columns = [ { header: 'Built-in cell', cell: function() { return textBuiltInCell() }}, { header: 'Custom cell', cell: function() { return textCustomCell() }} ]; var initialData = [ { textBuiltIn: { value: 'built-in' }, textCustom: { value: 'custom' } } ]; var defaultRowData = { textBuiltIn: { value: '' }, textCustom: { value: '' } }; var table = new kintoneUIComponent.Table({ columns: columns, data: initialData, defaultRowData: defaultRowData }); document.body.appendChild(table.render()); })(); JS Advanced (function () { // custom cell containing 2 text fields var customCell = function () { return { init: function ({ rowData, updateRowData }) { var wrapper = document.createElement('span'); this.textfield1 = new kintoneUIComponent.Text({ value: rowData.text1.value }); this.textfield1.on('change', function (event) { updateRowData({ text1: { value: event.target.value } }, false); }); wrapper.appendChild(this.textfield1.render()); this.textfield2 = new kintoneUIComponent.Text({ value: rowData.text2.value }); this.textfield2.on('change', function (event) { updateRowData({ text2: { value: event.target.value } }, false); }); wrapper.appendChild(this.textfield2.render()); return wrapper; }, update: function ({ rowData }) { if (rowData.text1) this.textfield1.setValue(rowData.text1.value); if (rowData.text2) this.textfield2.setValue(rowData.text2.value); } } }; // initial data of a table var initialData = [ { // initial data of text text: { value: 'text field' }, // initial data of radio buttons fruit: { name: 'fruit', value: 'Banana', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ] }, // initial data of multiple choices colors: { value: ['red'], items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ] }, // initial data of checkbox vegetables: { value: ['potato', 'celery'], items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: false }, { label: 'Carrot', value: 'carrot', isDisabled: true }, ] }, // initial data of dropdown toys: { value: 'cars', items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ] }, // initial data of label label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, // initial data of icon button iconBtn: { type: 'insert', color: 'blue', size: 'small' }, // initial data of alert alert: { text: 'Network error', type: 'error' }, // initial data of custom cell containing 2 text fields text1: { value: 'text field 1' }, text2: { value: 'text field 2' }, }, ]; // default row data of a table, this data will be used to create new row var defaultRowData = { // default data of text text: { value: 'text field' }, // default data of radio buttons fruit: { name: 'fruit', value: 'Banana', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ] }, // default data of multiple choices colors: { value: ['red'], items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ] }, // default data of checkbox vegetables: { value: ['potato', 'celery'], items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: true }, { label: 'Carrot', value: 'carrot', isDisabled: true }, ] }, // default data of dropdown toys: { value: 'cars', items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ] }, // default data of label label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, // default data of icon button iconBtn: { type: 'insert', color: 'blue', size: 'small' }, // default data of alert alert: { text: 'Network error', type: 'error' }, // default data of custom cell containing 2 text fields text1: { value: 'text field 1' }, text2: { value: 'text field 2' }, }; // return this data to override default row data onRowAdd var overriddenRowData = { // overridden data of text text: { value: 'overwritten field value' }, // overridden data of radio buttons fruit: { name: 'fruit', value: 'Banana', items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ] }, // overridden data of multiple choices colors: { value: ['red'], items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ] }, // overridden data of checkbox vegetables: { value: ['potato', 'celery'], items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: true }, { label: 'Carrot', value: 'carrot', isDisabled: false }, ] }, // overridden data of dropdown toys: { value: 'cars', items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ] }, // overridden data of label label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, // overridden data of icon button iconBtn: { type: 'insert', color: 'blue', size: 'small' }, // overridden data of alert alert: { text: 'Network error', type: 'error' }, // overridden data of custom cell containing 2 text fields text1: { value: 'overwritten field1 value' }, text2: { value: 'overwritten field2 value' }, }; var table = new kintoneUIComponent.Table({ // initial table data data: initialData, // default row data on row add defaultRowData: defaultRowData, onRowAdd: function (e) { console.log('table.onAdd', e); /** * if onRowAdd does not return anything, defaultRowData will be used to create new table row * if below row data is returned, it will override defaultRowData to be used to create new table row */ return JSON.parse(JSON.stringify(overriddenRowData)); }, columns: [ { header: 'Text', cell: function () { return kintoneUIComponent.createTableCell('text', 'text') } }, { header: 'Radio', cell: function () { return kintoneUIComponent.createTableCell('radio', 'fruit') } }, { header: 'Multichoice', cell: function () { return kintoneUIComponent.createTableCell('multichoice', 'colors') } }, { header: 'Checkbox', cell: function () { return kintoneUIComponent.createTableCell('checkbox', 'vegetables') } }, { header: 'Dropdown', cell: function () { return kintoneUIComponent.createTableCell('dropdown', 'toys') } }, { header: 'Label', cell: function () { return kintoneUIComponent.createTableCell('label', 'label') } }, { header: 'Icon Button', cell: function () { return kintoneUIComponent.createTableCell('icon', 'iconBtn', { onClick: function (event) { alert('icon button clicked') } }); } }, { header: 'Alert', cell: function () { return kintoneUIComponent.createTableCell('alert', 'alert') } }, { header: 'Custom cell contains 2 textfields', cell: function () { return customCell() } }, ] }); document.body.appendChild(table.render()); })(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); Methods render() Get dom element of component. Parameter None Returns Dom element Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); getValue() Get value of all rows in the table. Parameter None Returns Name Type Description value Array<Object> Value of all rows in the table Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Get value'; button.onclick = function () { var value = table.getValue(); value.forEach(rowData => { console.log(rowData); }); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { console.log(this.state.tableData) } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <button onClick={this.handleClick}>Get table value</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); setValue(value) Set data for every row in table. The number of rows in table's dependent on the length on this parameters. Parameter Name Type Required Description value Array<Object> Yes Value for every row in table Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Set Values'; button.onclick = function () { table.setValue([ {text: { value: 'first row' }}, {text: { value: 'second row' }}, {text: { value: 'third row' }} ]); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { const tableData = [ {text: 'first row'}, {text: 'second row'}, {text: 'third row'} ] this.setState({tableData}) } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <button onClick={this.handleClick}>Set table value</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); on(eventName, callBack) Register callback for an event Parameter Name Type Required Description eventName String Yes Name of events: 'rowAdd' The 'rowAdd' event occurs when adding a new row in the table. 'rowRemove' The 'rowRemove' event occurs when removing a row in the table. 'cellChange' The 'cellChange' event occurs when the value of an element bellow has been changed: Text Drodown RadioButton MultipleChoice CheckBox For custom cells templates, you must call updateRowData provided to init callback to trigger cellChange event. callback function Yes callback Returns None Callback data Event Name Type Description rowAdd event Object Callback data. event.data Array<Object> Current values of the table. event.rowIndex Interger Position of the new row in the table. rowRemove event object Callback data. event.data Array<Object> Current values of the table. event.rowIndex Interger Position of the removed row in the table. cellChange event object Callback data. event.data Array<Object> Values of the table. event.rowIndex Interger Position of the changed row in the table. event.fieldName String name of the data property which changed. Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.on('rowAdd', function(event) { console.log(event); }); table.on('rowRemove', function(event) { console.log(event); }); table.on('cellChange', function(event) { console.log(event); }); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); showActionButtons() Display table action buttons. Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], actionButtonsShown: false }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Show action buttons'; button.onclick = function () { table.showActionButtons(); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, actionButtonsShown: false }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { this.setState({actionButtonsShown: true}) } render() { const {tableData, actionButtonsShown, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={actionButtonsShown} isVisible={true} /> <button onClick={this.handleClick}>Show action buttons</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); hideActionButtons() Hide table action buttons. Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], actionButtonsShown: true, }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Hide action buttons'; button.onclick = function () { table.hideActionButtons(); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, actionButtonsShown: true }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { this.setState({actionButtonsShown: false}); } render() { const {tableData, actionButtonsShown, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={actionButtonsShown} isVisible={true} /> <button onClick={this.handleClick}>Hide action buttons</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); updateRowData(rowIndex, data, rerender, trigger) Update data of row at rowIndex with new data Parameter Name Type Required Description rowIndex Integer Yes Position of the row which will be updated in the table. data Object Yes Data object for the row. rerender Boolean No If true , will re-render table cells according to new data. Default: true trigger Boolean No If true , will trigger onCellChange event. Default: true Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ { text: { value: 'this is a text field1' }, checkbox: { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }, } ], // default row data on row add defaultRowData: { text: { value: 'default text field value' }, checkbox: { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }, }, columns: [ { header: 'Text', cell: function () { return kintoneUIComponent.createTableCell('text', 'text', { onChange: function ({ data, rowIndex }) { data[rowIndex].checkbox.value = ['Lemon']; table.updateRowData(rowIndex, data[rowIndex]); } }) } }, { header: 'Checkbox', cell: function () { return kintoneUIComponent.createTableCell('checkbox', 'checkbox') } } ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { const {tableData} = this.state; tableData[0].text = 'Updated text field value'; this.setState({tableData}); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <button onClick={this.handleClick}>Update row data</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); createTableCell(type, dataFieldName, props) Note This function support to create built-in components for options.columns[x].cell on Constructor . Components: Text Dropdown CheckBox MultipleChoice RadioButton Label Alert Parameter Name Type Required Description type String Yes Type of built-in cell. Can be one of the following types: 'text' 'dropdown' 'checkbox' 'multichoice' 'radio' 'label' 'icon' 'alert' dataFieldName String Yes Name of the data field associated with the table cell. props Object No Additional props to pass to component. It can be used to define custom event handler for component. You should specify this arg like following object. {'on+eventName': callback } Returns TableCell Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell( 'text', 'text', {onClick: function(event) { alert('text box was clicked'); console.log(event); }} )} }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); show() Display the table Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], isVisible: false }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Show table'; button.onclick = function () { table.show(); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, isVisible: false } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { this.setState({isVisible: true}); } render() { const {tableData, isVisible, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={isVisible} /> <button onClick={this.handleClick}>Show table</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); hide() Hide the table Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], isVisible: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Hide table'; button.onclick = function () { table.hide(); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, isVisible: true }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { this.setState({isVisible: false}) } render() { const {tableData, isVisible, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={isVisible} /> <button onClick={this.handleClick}>Hide table</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement()); Model TableCell Note TableCell is the template object for options.columns[x].cell on Constructor . Cell template can be creating by createTableCell(type, dataFieldName, props) or custom funcions. If using custom function, Cell template object must implement init and update functions. Name Type Required Description init Function Yes Cell initialization callback. Used to initialize DOM of a cell update Function Yes Cell update callback. Used to update DOM of a cell. Sample Javascript // create built-in cell component var textBuiltInCell = function () { return kintoneUIComponent.createTableCell('text', 'textBuiltIn'); }; // create custom cell component var textCustomCell = function() { return { init: function({rowData, updateRowData}) { var text = document.createElement('input'); text.onchange = function(event) { updateRowData({textCustom: {value: event.target.value}}, false); }; this.textCustom = text; return text; }, update: function({ rowData }) { this.textCustom.value = rowData.textCustom.value; } } }; var columns = [ { header: 'Built-in cell', cell: function() { return textBuiltInCell() }}, { header: 'Custom cell', cell: function() { return textCustomCell() }} ]; var initialData = [ { textBuiltIn: { value: 'built-in' }, textCustom: { value: 'custom' } } ]; var defaultRowData = { textBuiltIn: { value: '' }, textCustom: { value: '' } }; var table = new kintoneUIComponent.Table({ columns: columns, data: initialData, defaultRowData: defaultRowData }); document.body.appendChild(table.render());","title":"Table"},{"location":"Reference/Table/#table","text":"","title":"Table"},{"location":"Reference/Table/#overview","text":"Number Description 1 Header of column 2 Icon button for insert row 3 Icon button for remove row 4 Child control component 5 Sample row Note The Table are supporting child control components (Item-4) as below: Built-in supported components: Text Dropdown CheckBox MultipleChoice RadioButton Label Alert Custom components (DOM Elements) \u203b Child control components must be an instance of TableCell .","title":"Overview"},{"location":"Reference/Table/#constructor","text":"Parameter Name Type Required Description options Object No The object contains the parameters of constructor. options.columns Array<Object> No The row template. options.columns[x].header String No Header of column. options.columns[x].cell Function No Returns cell template object. Refer TableCell for more information. options.data Array<Object> No The value of table. Refer to the getValue() and setValue(value) for more information. options.defaultRowData Object No The default value of new row. options.actionButtonsShown Boolean No Show the action buttons when this parameter is True . Default: True options.onRowAdd Callback No Handler for row add event. Return row data object to overwrite default row data object. options.onRowRemove Callback No Handler for row remove event. options.onCellChange Callback No Handler for cell change event. Sample JS Simple (function() { // create built-in cell component var textBuiltInCell = function () { return kintoneUIComponent.createTableCell('text', 'textBuiltIn'); }; // create custom cell component var textCustomCell = function() { return { init: function({rowData, updateRowData}) { var text = document.createElement('input'); text.onchange = function(event) { updateRowData({textCustom: {value: event.target.value}}, false); }; this.textCustom = text; return text; }, update: function({ rowData }) { this.textCustom.value = rowData.textCustom.value; } } }; var columns = [ { header: 'Built-in cell', cell: function() { return textBuiltInCell() }}, { header: 'Custom cell', cell: function() { return textCustomCell() }} ]; var initialData = [ { textBuiltIn: { value: 'built-in' }, textCustom: { value: 'custom' } } ]; var defaultRowData = { textBuiltIn: { value: '' }, textCustom: { value: '' } }; var table = new kintoneUIComponent.Table({ columns: columns, data: initialData, defaultRowData: defaultRowData }); document.body.appendChild(table.render()); })(); JS Advanced (function () { // custom cell containing 2 text fields var customCell = function () { return { init: function ({ rowData, updateRowData }) { var wrapper = document.createElement('span'); this.textfield1 = new kintoneUIComponent.Text({ value: rowData.text1.value }); this.textfield1.on('change', function (event) { updateRowData({ text1: { value: event.target.value } }, false); }); wrapper.appendChild(this.textfield1.render()); this.textfield2 = new kintoneUIComponent.Text({ value: rowData.text2.value }); this.textfield2.on('change', function (event) { updateRowData({ text2: { value: event.target.value } }, false); }); wrapper.appendChild(this.textfield2.render()); return wrapper; }, update: function ({ rowData }) { if (rowData.text1) this.textfield1.setValue(rowData.text1.value); if (rowData.text2) this.textfield2.setValue(rowData.text2.value); } } }; // initial data of a table var initialData = [ { // initial data of text text: { value: 'text field' }, // initial data of radio buttons fruit: { name: 'fruit', value: 'Banana', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ] }, // initial data of multiple choices colors: { value: ['red'], items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ] }, // initial data of checkbox vegetables: { value: ['potato', 'celery'], items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: false }, { label: 'Carrot', value: 'carrot', isDisabled: true }, ] }, // initial data of dropdown toys: { value: 'cars', items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ] }, // initial data of label label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, // initial data of icon button iconBtn: { type: 'insert', color: 'blue', size: 'small' }, // initial data of alert alert: { text: 'Network error', type: 'error' }, // initial data of custom cell containing 2 text fields text1: { value: 'text field 1' }, text2: { value: 'text field 2' }, }, ]; // default row data of a table, this data will be used to create new row var defaultRowData = { // default data of text text: { value: 'text field' }, // default data of radio buttons fruit: { name: 'fruit', value: 'Banana', items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ] }, // default data of multiple choices colors: { value: ['red'], items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ] }, // default data of checkbox vegetables: { value: ['potato', 'celery'], items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: true }, { label: 'Carrot', value: 'carrot', isDisabled: true }, ] }, // default data of dropdown toys: { value: 'cars', items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ] }, // default data of label label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, // default data of icon button iconBtn: { type: 'insert', color: 'blue', size: 'small' }, // default data of alert alert: { text: 'Network error', type: 'error' }, // default data of custom cell containing 2 text fields text1: { value: 'text field 1' }, text2: { value: 'text field 2' }, }; // return this data to override default row data onRowAdd var overriddenRowData = { // overridden data of text text: { value: 'overwritten field value' }, // overridden data of radio buttons fruit: { name: 'fruit', value: 'Banana', items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false }, { label: 'Lemon', value: 'Lemon', isDisabled: false }, ] }, // overridden data of multiple choices colors: { value: ['red'], items: [ { label: 'Red', value: 'red', isDisabled: false }, { label: 'Green', value: 'green', isDisabled: true }, { label: 'Blue', value: 'blue', isDisabled: true }, ] }, // overridden data of checkbox vegetables: { value: ['potato', 'celery'], items: [ { label: 'Potato', value: 'potato', isDisabled: false }, { label: 'Celery', value: 'celery', isDisabled: true }, { label: 'Carrot', value: 'carrot', isDisabled: false }, ] }, // overridden data of dropdown toys: { value: 'cars', items: [ { label: 'Cars', value: 'cars', isDisabled: false }, { label: 'Robots', value: 'robots', isDisabled: false }, { label: 'Animals', value: 'animals', isDisabled: true }, ] }, // overridden data of label label: { text: 'Name', textColor: '#e74c3c', backgroundColor: 'yellow', isRequired: true }, // overridden data of icon button iconBtn: { type: 'insert', color: 'blue', size: 'small' }, // overridden data of alert alert: { text: 'Network error', type: 'error' }, // overridden data of custom cell containing 2 text fields text1: { value: 'overwritten field1 value' }, text2: { value: 'overwritten field2 value' }, }; var table = new kintoneUIComponent.Table({ // initial table data data: initialData, // default row data on row add defaultRowData: defaultRowData, onRowAdd: function (e) { console.log('table.onAdd', e); /** * if onRowAdd does not return anything, defaultRowData will be used to create new table row * if below row data is returned, it will override defaultRowData to be used to create new table row */ return JSON.parse(JSON.stringify(overriddenRowData)); }, columns: [ { header: 'Text', cell: function () { return kintoneUIComponent.createTableCell('text', 'text') } }, { header: 'Radio', cell: function () { return kintoneUIComponent.createTableCell('radio', 'fruit') } }, { header: 'Multichoice', cell: function () { return kintoneUIComponent.createTableCell('multichoice', 'colors') } }, { header: 'Checkbox', cell: function () { return kintoneUIComponent.createTableCell('checkbox', 'vegetables') } }, { header: 'Dropdown', cell: function () { return kintoneUIComponent.createTableCell('dropdown', 'toys') } }, { header: 'Label', cell: function () { return kintoneUIComponent.createTableCell('label', 'label') } }, { header: 'Icon Button', cell: function () { return kintoneUIComponent.createTableCell('icon', 'iconBtn', { onClick: function (event) { alert('icon button clicked') } }); } }, { header: 'Alert', cell: function () { return kintoneUIComponent.createTableCell('alert', 'alert') } }, { header: 'Custom cell contains 2 textfields', cell: function () { return customCell() } }, ] }); document.body.appendChild(table.render()); })(); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"Constructor"},{"location":"Reference/Table/#methods","text":"","title":"Methods"},{"location":"Reference/Table/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"render()"},{"location":"Reference/Table/#getvalue","text":"Get value of all rows in the table. Parameter None Returns Name Type Description value Array<Object> Value of all rows in the table Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Get value'; button.onclick = function () { var value = table.getValue(); value.forEach(rowData => { console.log(rowData); }); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { console.log(this.state.tableData) } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <button onClick={this.handleClick}>Get table value</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"getValue()"},{"location":"Reference/Table/#setvaluevalue","text":"Set data for every row in table. The number of rows in table's dependent on the length on this parameters. Parameter Name Type Required Description value Array<Object> Yes Value for every row in table Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Set Values'; button.onclick = function () { table.setValue([ {text: { value: 'first row' }}, {text: { value: 'second row' }}, {text: { value: 'third row' }} ]); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { const tableData = [ {text: 'first row'}, {text: 'second row'}, {text: 'third row'} ] this.setState({tableData}) } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <button onClick={this.handleClick}>Set table value</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"setValue(value)"},{"location":"Reference/Table/#oneventname-callback","text":"Register callback for an event Parameter Name Type Required Description eventName String Yes Name of events: 'rowAdd' The 'rowAdd' event occurs when adding a new row in the table. 'rowRemove' The 'rowRemove' event occurs when removing a row in the table. 'cellChange' The 'cellChange' event occurs when the value of an element bellow has been changed: Text Drodown RadioButton MultipleChoice CheckBox For custom cells templates, you must call updateRowData provided to init callback to trigger cellChange event. callback function Yes callback Returns None Callback data Event Name Type Description rowAdd event Object Callback data. event.data Array<Object> Current values of the table. event.rowIndex Interger Position of the new row in the table. rowRemove event object Callback data. event.data Array<Object> Current values of the table. event.rowIndex Interger Position of the removed row in the table. cellChange event object Callback data. event.data Array<Object> Values of the table. event.rowIndex Interger Position of the changed row in the table. event.fieldName String name of the data property which changed. Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.on('rowAdd', function(event) { console.log(event); }); table.on('rowRemove', function(event) { console.log(event); }); table.on('cellChange', function(event) { console.log(event); }); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"on(eventName, callBack)"},{"location":"Reference/Table/#showactionbuttons","text":"Display table action buttons. Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], actionButtonsShown: false }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Show action buttons'; button.onclick = function () { table.showActionButtons(); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, actionButtonsShown: false }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { this.setState({actionButtonsShown: true}) } render() { const {tableData, actionButtonsShown, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={actionButtonsShown} isVisible={true} /> <button onClick={this.handleClick}>Show action buttons</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"showActionButtons()"},{"location":"Reference/Table/#hideactionbuttons","text":"Hide table action buttons. Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], actionButtonsShown: true, }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Hide action buttons'; button.onclick = function () { table.hideActionButtons(); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, actionButtonsShown: true }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { this.setState({actionButtonsShown: false}); } render() { const {tableData, actionButtonsShown, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={actionButtonsShown} isVisible={true} /> <button onClick={this.handleClick}>Hide action buttons</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"hideActionButtons()"},{"location":"Reference/Table/#updaterowdatarowindex-data-rerender-trigger","text":"Update data of row at rowIndex with new data Parameter Name Type Required Description rowIndex Integer Yes Position of the row which will be updated in the table. data Object Yes Data object for the row. rerender Boolean No If true , will re-render table cells according to new data. Default: true trigger Boolean No If true , will trigger onCellChange event. Default: true Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ { text: { value: 'this is a text field1' }, checkbox: { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }, } ], // default row data on row add defaultRowData: { text: { value: 'default text field value' }, checkbox: { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }, }, columns: [ { header: 'Text', cell: function () { return kintoneUIComponent.createTableCell('text', 'text', { onChange: function ({ data, rowIndex }) { data[rowIndex].checkbox.value = ['Lemon']; table.updateRowData(rowIndex, data[rowIndex]); } }) } }, { header: 'Checkbox', cell: function () { return kintoneUIComponent.createTableCell('checkbox', 'checkbox') } } ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { const {tableData} = this.state; tableData[0].text = 'Updated text field value'; this.setState({tableData}); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> <button onClick={this.handleClick}>Update row data</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"updateRowData(rowIndex, data, rerender, trigger)"},{"location":"Reference/Table/#createtablecelltype-datafieldname-props","text":"Note This function support to create built-in components for options.columns[x].cell on Constructor . Components: Text Dropdown CheckBox MultipleChoice RadioButton Label Alert Parameter Name Type Required Description type String Yes Type of built-in cell. Can be one of the following types: 'text' 'dropdown' 'checkbox' 'multichoice' 'radio' 'label' 'icon' 'alert' dataFieldName String Yes Name of the data field associated with the table cell. props Object No Additional props to pass to component. It can be used to define custom event handler for component. You should specify this arg like following object. {'on+eventName': callback } Returns TableCell Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell( 'text', 'text', {onClick: function(event) { alert('text box was clicked'); console.log(event); }} )} }, ] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'} }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } render() { const {tableData, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={true} /> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"createTableCell(type, dataFieldName, props)"},{"location":"Reference/Table/#show","text":"Display the table Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], isVisible: false }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Show table'; button.onclick = function () { table.show(); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, isVisible: false } } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { this.setState({isVisible: true}); } render() { const {tableData, isVisible, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={isVisible} /> <button onClick={this.handleClick}>Show table</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"show()"},{"location":"Reference/Table/#hide","text":"Hide the table Parameter None Returns None Sample Javascript var table = new kintoneUIComponent.Table({ // initial table data data: [ {text: { value: 'this is a text field' }} ], // default row data on row add defaultRowData: {text: { value: 'default text field value' }}, columns: [ { header: 'Text', cell: function() { return kintoneUIComponent.createTableCell('text', 'text') } }, ], isVisible: true }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var button = document.createElement('button'); button.innerText = 'Hide table'; button.onclick = function () { table.hide(); }; body.appendChild(button); React import React from 'react'; import {render} from 'react-dom'; import { Table, Text, Button} from '@kintone/kintone-ui-component'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { tableData: [ {text: 'this is a text field'} ], // default row data on row add defaultRowData: {text: 'default text field value'}, isVisible: true }; } handleRowAdd = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleRowRemove = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleCellChange = ({data}) => { this.setState({ tableData: data }) console.log('data: ', data); } handleClick = () => { this.setState({isVisible: false}) } render() { const {tableData, isVisible, defaultRowData} = this.state; const columns = [ { header: 'Text', cell: ({ rowIndex, onCellChange }) => { return ( <Text value={tableData[rowIndex].text} onChange={newValue => onCellChange(newValue, tableData, rowIndex, 'text')} /> ) } }, ]; return ( <div> <Table columns={columns} data={this.state.tableData} defaultRowData={defaultRowData} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellChange={this.handleCellChange} actionButtonsShown={true} isVisible={isVisible} /> <button onClick={this.handleClick}>Hide table</button> </div> ); } } render(<Plugin />, kintone.app.getHeaderSpaceElement());","title":"hide()"},{"location":"Reference/Table/#model","text":"","title":"Model"},{"location":"Reference/Table/#tablecell","text":"Note TableCell is the template object for options.columns[x].cell on Constructor . Cell template can be creating by createTableCell(type, dataFieldName, props) or custom funcions. If using custom function, Cell template object must implement init and update functions. Name Type Required Description init Function Yes Cell initialization callback. Used to initialize DOM of a cell update Function Yes Cell update callback. Used to update DOM of a cell. Sample Javascript // create built-in cell component var textBuiltInCell = function () { return kintoneUIComponent.createTableCell('text', 'textBuiltIn'); }; // create custom cell component var textCustomCell = function() { return { init: function({rowData, updateRowData}) { var text = document.createElement('input'); text.onchange = function(event) { updateRowData({textCustom: {value: event.target.value}}, false); }; this.textCustom = text; return text; }, update: function({ rowData }) { this.textCustom.value = rowData.textCustom.value; } } }; var columns = [ { header: 'Built-in cell', cell: function() { return textBuiltInCell() }}, { header: 'Custom cell', cell: function() { return textCustomCell() }} ]; var initialData = [ { textBuiltIn: { value: 'built-in' }, textCustom: { value: 'custom' } } ]; var defaultRowData = { textBuiltIn: { value: '' }, textCustom: { value: '' } }; var table = new kintoneUIComponent.Table({ columns: columns, data: initialData, defaultRowData: defaultRowData }); document.body.appendChild(table.render());","title":"TableCell"},{"location":"Reference/Tabs/","text":"Tabs Overview Number Description 1 Selected Tab 2 Not selected Tab 3 Disabled Tab 4 Tab content Constructor Parameter Name Type Required Description options Object No An object contains parameters of constructor. options.items Array<Object> No List of tabs. options.items[x].tabName String Conditional Name of a tab-pane. If options.items[x] exist, the name of a tab-pane is required options.items[x].tabContent String or DOM No The content of a tab-pane. options.items[x].isDisabled Boolean No Indicate if tab-pane will be disabled. Default value: 'false' options.value Integer No Index of selected tab-pane. If the value is non-existent, the INVALID_ARGUMENT message will be displayed Sample Javascript var items = [{ tabName: \"Tab1\", }, { tabName: \"Tab2\", }, { tabName: \"Tab3\", }]; var tab = new kintoneUIComponent.Tabs({items}); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; render() { return ( <Tabs items={this.state.items} /> ); }; }; Methods render() Get DOM element of Tabs component. Parameter None Returns DOM element Sample Javascript var items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; var tab = new kintoneUIComponent.Tabs({items}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tab.render()); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; render() { return ( <Tabs items={this.state.items} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); addItem(item) Add a tab-pane to end of the list of the tabs. Parameter Name Type Required Description item Object Yes The new tab-pane to be added. item.tabName String Yes Name of the new tab-pane. item.tabContent String or DOM No Content of the new tab-pane. item.isDisabled Boolean No New tab-pane will be disabled when display. Default value: false . Sample Javascript var items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; var tabs = new kintoneUIComponent.Tabs({ items }); var newTab = { tabName: \"Tab 4\", tabContent: \"This is Tab 4\" }; var btn = document.createElement('button'); btn.textContent = 'Add Tab'; btn.onclick = function() { tabs.addItem(newTab); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; addItem = () => { const item = { tabName: \"Tab 4\"}; items.push(item); this.setState({items}); }; render() { return ( <div> <Tabs items={this.state.items} /> <button onClick={this.addItem}>Add Tab</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); removeItem(index) Remove a tab-pane at a specific index in the list of the tabs. Parameter Name Type Required Description index Interger Yes The position of a tab-pane to be removed. If the index is undefined, there isn't tab-pane will be removed. Returns None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items }); var btn = document.createElement('button'); btn.textContent = 'Remove Tab'; btn.onclick = function() { tabs.removeItem(0); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; removeItem = () => { items.splice(0, 1); this.setState({items}); }; render() { return ( <div> <Tabs items={this.state.items} /> <button onClick={this.removeItem}>Remove Tab</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); getItems() Get all tab-panes of Tabs component. Parameter None Return The array contains all tabs. Name Type Description items Array<Object> The list information of tabs items[].tabName String Name of a tab-pane. items[].tabContent String Content of a tab-pane. items[].isDisabled Boolean A tab-pane is disabled when display. Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items }); var items = tabs.getItems(); items.forEach(function(item) { console.log(item); }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; getItems = () => { this.state.items.forEach(item => { console.log(item); }); }; render() { return ( <div> <Tabs items={this.state.items} /> <button onClick={this.getItems}>Get Tabs</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); getValue() Get index of selected tab-pane. Parameter None Return Name Type Description value Interger The index position of selected tab-pane. Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 1 }); console.log(tabs.getValue()); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 1 }; }; getValue = () => { console.log(this.state.value); }; render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.getValue}>Get value</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); setValue(value) Set selected tab-pane by index. Parameter Name Type Required Description value Interger Yes The selected tab-pane index. Return None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 1 }); var btn = document.createElement('button'); btn.textContent = 'Set value'; btn.onclick = function() { tabs.setValue(2); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 1 }; }; setValue = () => { this.setState({value: 2}); }; render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.setValue}>Set value</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); disableItem(tabName) Disable a tab-pane. Parameter Name Type Required Description tabName String Yes The name of tab-pane will be disabled. Return None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 1 }); var btn = document.createElement('button'); btn.textContent = 'Disable Tab 3'; btn.onclick = function() { tabs.disableItem('Tab 3'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 1 }; }; disableItem = () => { let items = [...this.state.items]; items[2].isDisabled = true; this.setState({items: items}); }; render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.disableItem}>Disable tab3</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); enableItem(tabName) Enable a tab. Parameter Name Type Required Description tabName String Yes The name of tab-pane will be enabled. Return None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\", isDisabled: true }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 1 }); var btn = document.createElement('button'); btn.textContent = 'Enable Tab 3'; btn.onclick = function() { tabs.enableItem('Tab 3'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1', isDisabled: true }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 1 }; }; enableItem = () => { const items = [...this.state.items]; items[0].isDisabled = false; this.setState({ items: items }); }; render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} onClickTabItem={(value) => this.setState({ value })}/> <button onClick={this.enableItem}>Enable tab1</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); on(eventName, callback) Register callback for an event of Tabs component Parameter Name Type Required Description eventName String Yes Name of event: 'clickTabItem' callback function Yes The callback function call when the event occurs Return None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1', }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\", }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 0 }); tabs.on('clickTabItem', (value) => { console.log(value); }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1', }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 0 }; }; render() { return ( <Tabs items={this.state.items} value={this.state.value} onClickTabItem={(value) => this.setState({ value })} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"Tabs"},{"location":"Reference/Tabs/#tabs","text":"","title":"Tabs"},{"location":"Reference/Tabs/#overview","text":"Number Description 1 Selected Tab 2 Not selected Tab 3 Disabled Tab 4 Tab content","title":"Overview"},{"location":"Reference/Tabs/#constructor","text":"Parameter Name Type Required Description options Object No An object contains parameters of constructor. options.items Array<Object> No List of tabs. options.items[x].tabName String Conditional Name of a tab-pane. If options.items[x] exist, the name of a tab-pane is required options.items[x].tabContent String or DOM No The content of a tab-pane. options.items[x].isDisabled Boolean No Indicate if tab-pane will be disabled. Default value: 'false' options.value Integer No Index of selected tab-pane. If the value is non-existent, the INVALID_ARGUMENT message will be displayed Sample Javascript var items = [{ tabName: \"Tab1\", }, { tabName: \"Tab2\", }, { tabName: \"Tab3\", }]; var tab = new kintoneUIComponent.Tabs({items}); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; render() { return ( <Tabs items={this.state.items} /> ); }; };","title":"Constructor"},{"location":"Reference/Tabs/#methods","text":"","title":"Methods"},{"location":"Reference/Tabs/#render","text":"Get DOM element of Tabs component. Parameter None Returns DOM element Sample Javascript var items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; var tab = new kintoneUIComponent.Tabs({items}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tab.render()); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; render() { return ( <Tabs items={this.state.items} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"render()"},{"location":"Reference/Tabs/#additemitem","text":"Add a tab-pane to end of the list of the tabs. Parameter Name Type Required Description item Object Yes The new tab-pane to be added. item.tabName String Yes Name of the new tab-pane. item.tabContent String or DOM No Content of the new tab-pane. item.isDisabled Boolean No New tab-pane will be disabled when display. Default value: false . Sample Javascript var items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; var tabs = new kintoneUIComponent.Tabs({ items }); var newTab = { tabName: \"Tab 4\", tabContent: \"This is Tab 4\" }; var btn = document.createElement('button'); btn.textContent = 'Add Tab'; btn.onclick = function() { tabs.addItem(newTab); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; addItem = () => { const item = { tabName: \"Tab 4\"}; items.push(item); this.setState({items}); }; render() { return ( <div> <Tabs items={this.state.items} /> <button onClick={this.addItem}>Add Tab</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"addItem(item)"},{"location":"Reference/Tabs/#removeitemindex","text":"Remove a tab-pane at a specific index in the list of the tabs. Parameter Name Type Required Description index Interger Yes The position of a tab-pane to be removed. If the index is undefined, there isn't tab-pane will be removed. Returns None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items }); var btn = document.createElement('button'); btn.textContent = 'Remove Tab'; btn.onclick = function() { tabs.removeItem(0); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; removeItem = () => { items.splice(0, 1); this.setState({items}); }; render() { return ( <div> <Tabs items={this.state.items} /> <button onClick={this.removeItem}>Remove Tab</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"removeItem(index)"},{"location":"Reference/Tabs/#getitems","text":"Get all tab-panes of Tabs component. Parameter None Return The array contains all tabs. Name Type Description items Array<Object> The list information of tabs items[].tabName String Name of a tab-pane. items[].tabContent String Content of a tab-pane. items[].isDisabled Boolean A tab-pane is disabled when display. Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items }); var items = tabs.getItems(); items.forEach(function(item) { console.log(item); }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab 1\", }, { tabName: \"Tab 2\", }, { tabName: \"Tab 3\", }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items }; }; getItems = () => { this.state.items.forEach(item => { console.log(item); }); }; render() { return ( <div> <Tabs items={this.state.items} /> <button onClick={this.getItems}>Get Tabs</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"getItems()"},{"location":"Reference/Tabs/#getvalue","text":"Get index of selected tab-pane. Parameter None Return Name Type Description value Interger The index position of selected tab-pane. Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 1 }); console.log(tabs.getValue()); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 1 }; }; getValue = () => { console.log(this.state.value); }; render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.getValue}>Get value</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"getValue()"},{"location":"Reference/Tabs/#setvaluevalue","text":"Set selected tab-pane by index. Parameter Name Type Required Description value Interger Yes The selected tab-pane index. Return None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 1 }); var btn = document.createElement('button'); btn.textContent = 'Set value'; btn.onclick = function() { tabs.setValue(2); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 1 }; }; setValue = () => { this.setState({value: 2}); }; render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.setValue}>Set value</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"setValue(value)"},{"location":"Reference/Tabs/#disableitemtabname","text":"Disable a tab-pane. Parameter Name Type Required Description tabName String Yes The name of tab-pane will be disabled. Return None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\" }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 1 }); var btn = document.createElement('button'); btn.textContent = 'Disable Tab 3'; btn.onclick = function() { tabs.disableItem('Tab 3'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1' }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 1 }; }; disableItem = () => { let items = [...this.state.items]; items[2].isDisabled = true; this.setState({items: items}); }; render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} /> <button onClick={this.disableItem}>Disable tab3</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"disableItem(tabName)"},{"location":"Reference/Tabs/#enableitemtabname","text":"Enable a tab. Parameter Name Type Required Description tabName String Yes The name of tab-pane will be enabled. Return None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1' }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\", isDisabled: true }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 1 }); var btn = document.createElement('button'); btn.textContent = 'Enable Tab 3'; btn.onclick = function() { tabs.enableItem('Tab 3'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); body.appendChild(btn); React import {Tabs} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1', isDisabled: true }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 1 }; }; enableItem = () => { const items = [...this.state.items]; items[0].isDisabled = false; this.setState({ items: items }); }; render() { return ( <div> <Tabs items={this.state.items} value={this.state.value} onClickTabItem={(value) => this.setState({ value })}/> <button onClick={this.enableItem}>Enable tab1</button> </div> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"enableItem(tabName)"},{"location":"Reference/Tabs/#oneventname-callback","text":"Register callback for an event of Tabs component Parameter Name Type Required Description eventName String Yes Name of event: 'clickTabItem' callback function Yes The callback function call when the event occurs Return None Sample Javascript var items = [{ tabName: \"Tab 1\", tabContent: 'This is Tab 1', }, { tabName: \"Tab 2\", tabContent: \"This is Tab 2\" }, { tabName: \"Tab 3\", tabContent: \"This is Tab 3\", }]; var tabs = new kintoneUIComponent.Tabs({ items, value: 0 }); tabs.on('clickTabItem', (value) => { console.log(value); }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(tabs.render()); React import { Tabs } from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; const items = [{ tabName: \"Tab1\", tabContent: 'This is Tab1', }, { tabName: \"Tab2\", tabContent: \"This is Tab2\" }, { tabName: \"Tab3\", tabContent: \"This is Tab3\" }]; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { items: items, value: 0 }; }; render() { return ( <Tabs items={this.state.items} value={this.state.value} onClickTabItem={(value) => this.setState({ value })} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"on(eventName, callback)"},{"location":"Reference/Text/","text":"Text Overview Constructor Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.value String No The value of text field. Default value: '' options.isDisabled Boolean No The text field will be disabled. Default value: 'false' options.isVisible Boolean No The text field will be visible. Default value: 'true' options.placeholder String No The placeholder of text field. Default value: '' Sample Javascript var text= new kintoneUIComponent.Text({value: 'input text'}); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text'}; }; render() { return ( <Text value={this.state.value} /> ); }; }; Methods render() Get DOM element of Text component. Parameter None Returns DOM element Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text'}; }; render() { return ( <Text value={this.state.value} /> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); setValue(value) Set the input content value of text field Parameter Name Type Required Description value String Yes The input content value Returns None Sample Javascript var text = new kintoneUIComponent.Text({ value: 'input text' }); var btn = document.createElement('button'); btn.textContent = 'Click'; btn.onclick = function() { text.setValue('set value input text'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text' }; }; render() { return ( <div> <Text value={this.state.value} /> <button onClick={this.setValue}>Click</button> </div> ); }; setValue = () => { this.setState({ value: 'set value' }); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); getValue() Get the input content value of text field Parameter None Returns Name Type Description value String The input content value Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); console.log(text.getValue()); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text' }; }; render() { return ( <div> <Text value={this.state.value} /> <button onClick={this.getValue}>Get Value</button> </div> ); }; getValue = () => { console.log(this.state.value); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); setPlaceholder(placeholder) Set the placeholder of text field Parameter Name Type Required Description placeholder String Yes The placeholder value Returns None Sample Javascript var text = new kintoneUIComponent.Text({ placeholder: '' }); var btn = document.createElement('button'); btn.textContent = 'Click'; btn.onclick = function() { text.setPlaceholder('Placeholder'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: '', placeholder: '' }; }; render() { return ( <div> <Text value={this.state.value} placeholder={this.state.placeholder}/> <button onClick={this.setPlaceholder}>Click</button> </div> ); }; setPlaceholder = () => { this.setState({ placeholder: 'placeholder' }); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); getPlaceholder() Get the placeholder value of text field Parameter None Returns Name Type Description placeholder String The placeholder value Sample Javascript var text = new kintoneUIComponent.Text({placeholder: 'Placeholder'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); console.log(text.getPlaceholder()); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: '', placeholder: 'Placeholder' }; }; render() { return ( <div> <Text value={this.state.value} placeholder={this.state.placeholder} /> <button onClick={this.getPlaceholder}>Get placeholder</button> </div> ); }; getPlaceholder = () => { console.log(this.state.placeholder); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); on(eventName, callback) Register callback for an event of Text component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes The callback function call when the event occurs Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.on('click', function(event) { console.log('onclick event'); console.log('value: ' + event.target.value); }); text.on('change', function(event) { console.log('onchange event'); console.log('value: ' + event.target.value); }); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text' }; }; render() { return ( <Text value={this.state.value} onChange={this.onChange.bind(this)} onClick={this.onClick} /> ); }; onClick = () => { console.log('click'); }; onChange = (value) => { this.setState({ value }); console.log('onchange value: ' + value); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); show() Display the Text component. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text', isVisible: false}); var btn = document.createElement('button'); btn.textContent = 'Show'; btn.onclick = function() { text.show(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Text is visible', isVisible: false }; }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <Text value={this.state.value} isVisible={this.state.isVisible} /> <button onClick={this.show}>Show</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); hide() Hide the Text component. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text', isVisible: true}); var btn = document.createElement('button'); btn.textContent = 'Hide'; btn.onclick = function() { text.hide(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Text is invisible', isVisible: true }; }; hide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <Text value={this.state.value} isVisible={this.state.isVisible} /> <button onClick={this.hide}>Hide</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); disable() Disabled the Text component. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({ value: 'Text is disabled' }); var btn = document.createElement('button'); btn.textContent = 'Disable'; btn.onclick = function() { text.disable(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Text is disabled', isDisabled: false }; }; disable = () => { this.setState({isDisabled: true }); }; render() { return ( <div> <Text value={this.state.value} isDisabled={this.state.isDisabled} /> <button onClick={this.disable}>Disable</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); enable() Enabled the Text component. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({ value: 'Text is enabled', isDisabled: true }); var btn = document.createElement('button'); btn.textContent = 'Enabled'; btn.onclick = function() { text.enable(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Text is enabled', isDisabled: true }; }; enable = () => { this.setState({isDisabled: false }); }; render() { return ( <div> <Text value={this.state.value} isDisabled={this.state.isDisabled} /> <button onClick={this.enable}>Enabled</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"Text"},{"location":"Reference/Text/#text","text":"","title":"Text"},{"location":"Reference/Text/#overview","text":"","title":"Overview"},{"location":"Reference/Text/#constructor","text":"Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.value String No The value of text field. Default value: '' options.isDisabled Boolean No The text field will be disabled. Default value: 'false' options.isVisible Boolean No The text field will be visible. Default value: 'true' options.placeholder String No The placeholder of text field. Default value: '' Sample Javascript var text= new kintoneUIComponent.Text({value: 'input text'}); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text'}; }; render() { return ( <Text value={this.state.value} /> ); }; };","title":"Constructor"},{"location":"Reference/Text/#methods","text":"","title":"Methods"},{"location":"Reference/Text/#render","text":"Get DOM element of Text component. Parameter None Returns DOM element Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text'}; }; render() { return ( <Text value={this.state.value} /> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"render()"},{"location":"Reference/Text/#setvaluevalue","text":"Set the input content value of text field Parameter Name Type Required Description value String Yes The input content value Returns None Sample Javascript var text = new kintoneUIComponent.Text({ value: 'input text' }); var btn = document.createElement('button'); btn.textContent = 'Click'; btn.onclick = function() { text.setValue('set value input text'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text' }; }; render() { return ( <div> <Text value={this.state.value} /> <button onClick={this.setValue}>Click</button> </div> ); }; setValue = () => { this.setState({ value: 'set value' }); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"setValue(value)"},{"location":"Reference/Text/#getvalue","text":"Get the input content value of text field Parameter None Returns Name Type Description value String The input content value Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); console.log(text.getValue()); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text' }; }; render() { return ( <div> <Text value={this.state.value} /> <button onClick={this.getValue}>Get Value</button> </div> ); }; getValue = () => { console.log(this.state.value); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"getValue()"},{"location":"Reference/Text/#setplaceholderplaceholder","text":"Set the placeholder of text field Parameter Name Type Required Description placeholder String Yes The placeholder value Returns None Sample Javascript var text = new kintoneUIComponent.Text({ placeholder: '' }); var btn = document.createElement('button'); btn.textContent = 'Click'; btn.onclick = function() { text.setPlaceholder('Placeholder'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: '', placeholder: '' }; }; render() { return ( <div> <Text value={this.state.value} placeholder={this.state.placeholder}/> <button onClick={this.setPlaceholder}>Click</button> </div> ); }; setPlaceholder = () => { this.setState({ placeholder: 'placeholder' }); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"setPlaceholder(placeholder)"},{"location":"Reference/Text/#getplaceholder","text":"Get the placeholder value of text field Parameter None Returns Name Type Description placeholder String The placeholder value Sample Javascript var text = new kintoneUIComponent.Text({placeholder: 'Placeholder'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); console.log(text.getPlaceholder()); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: '', placeholder: 'Placeholder' }; }; render() { return ( <div> <Text value={this.state.value} placeholder={this.state.placeholder} /> <button onClick={this.getPlaceholder}>Get placeholder</button> </div> ); }; getPlaceholder = () => { console.log(this.state.placeholder); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"getPlaceholder()"},{"location":"Reference/Text/#oneventname-callback","text":"Register callback for an event of Text component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes The callback function call when the event occurs Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.on('click', function(event) { console.log('onclick event'); console.log('value: ' + event.target.value); }); text.on('change', function(event) { console.log('onchange event'); console.log('value: ' + event.target.value); }); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'input text' }; }; render() { return ( <Text value={this.state.value} onChange={this.onChange.bind(this)} onClick={this.onClick} /> ); }; onClick = () => { console.log('click'); }; onChange = (value) => { this.setState({ value }); console.log('onchange value: ' + value); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"on(eventName, callback)"},{"location":"Reference/Text/#show","text":"Display the Text component. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text', isVisible: false}); var btn = document.createElement('button'); btn.textContent = 'Show'; btn.onclick = function() { text.show(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Text is visible', isVisible: false }; }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <Text value={this.state.value} isVisible={this.state.isVisible} /> <button onClick={this.show}>Show</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"show()"},{"location":"Reference/Text/#hide","text":"Hide the Text component. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({value: 'input text', isVisible: true}); var btn = document.createElement('button'); btn.textContent = 'Hide'; btn.onclick = function() { text.hide(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Text is invisible', isVisible: true }; }; hide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <Text value={this.state.value} isVisible={this.state.isVisible} /> <button onClick={this.hide}>Hide</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"hide()"},{"location":"Reference/Text/#disable","text":"Disabled the Text component. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({ value: 'Text is disabled' }); var btn = document.createElement('button'); btn.textContent = 'Disable'; btn.onclick = function() { text.disable(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Text is disabled', isDisabled: false }; }; disable = () => { this.setState({isDisabled: true }); }; render() { return ( <div> <Text value={this.state.value} isDisabled={this.state.isDisabled} /> <button onClick={this.disable}>Disable</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"disable()"},{"location":"Reference/Text/#enable","text":"Enabled the Text component. Parameter None Returns None Sample Javascript var text = new kintoneUIComponent.Text({ value: 'Text is enabled', isDisabled: true }); var btn = document.createElement('button'); btn.textContent = 'Enabled'; btn.onclick = function() { text.enable(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); body.appendChild(btn); React import {Text} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Text is enabled', isDisabled: true }; }; enable = () => { this.setState({isDisabled: false }); }; render() { return ( <div> <Text value={this.state.value} isDisabled={this.state.isDisabled} /> <button onClick={this.enable}>Enabled</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"enable()"},{"location":"Reference/TextArea/","text":"TextArea Overview Number Description 1 Drag and drop this icon to resize textarea Constructor Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.value String No The value of textarea field. options.isDisabled Boolean No The textarea field will be disabled. Default value: false options.isVisible Boolean No The textarea field will be visible. Default value: true options.placeholder String No The placeholder of textarea field. Default value: '' Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'textarea'}; }; render() { return ( <TextArea value={this.state.value} /> ); }; }; Methods render() Get DOM element of TextArea component. Parameter None Returns DOM element Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea' }; }; render() { return ( <TextArea value={this.state.value} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root')); setValue(value) Set the input content value of textarea field. Parameter Name Type Required Description value String Yes The input content value Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({ value: 'textarea' }); var btn = document.createElement('button'); btn.textContent = 'Set Value'; btn.onclick = function() { textArea.setValue('set value into textarea'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); body.appendChild(btn); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea' }; }; render() { return ( <div> <TextArea value={this.state.value} /> <button onClick={this.setValue}>Set Value</button> </div> ); }; setValue= () => { this.setState({ value: 'set value into textarea' }); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); getValue() Get the input content of textarea field. Parameter None Returns Name Type Description value String The input content value of textarea field. Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); console.log(textArea.getValue()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea' }; }; render() { return ( <div> <TextArea value={this.state.value} /> <button onClick={this.getValue}>Get Value</button> </div> ); } getValue = () => { console.log(this.state.value); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); setPlaceholder(placeholder) Set the placeholder of textarea field Parameter Name Type Required Description placeholder String Yes The placeholder value Returns None Sample Javascript var textarea = new kintoneUIComponent.TextArea({ placeholder: '' }); var btn = document.createElement('button'); btn.textContent = 'Click'; btn.onclick = function() { textarea.setPlaceholder('Placeholder'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textarea.render()); body.appendChild(btn); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: '', placeholder: '' }; }; render() { return ( <div> <TextArea value={this.state.value} placeholder={this.state.placeholder}/> <button onClick={this.setPlaceholder}>Click</button> </div> ); }; setPlaceholder = () => { this.setState({ placeholder: 'placeholder' }); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); getPlaceholder() Get the placeholder value of text field Parameter None Returns Name Type Description placeholder String The placeholder value Sample Javascript var textarea = new kintoneUIComponent.TextArea({placeholder: 'Placeholder'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textarea.render()); console.log(textarea.getPlaceholder()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: '', placeholder: 'Placeholder' }; }; render() { return ( <div> <TextArea value={this.state.value} placeholder={this.state.placeholder} /> <button onClick={this.getPlaceholder}>Get placeholder</button> </div> ); }; getPlaceholder = () => { console.log(this.state.placeholder); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); on(eventName, callback) Register callback for an event of TextArea component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes The callback function call when the event occurs Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.on('click', function(event) { console.log('onclick', event.target.value); }); textArea.on('change', function(value) { console.log('onchange', value); }); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea' }; }; render() { return ( <TextArea value={this.state.value} onChange={this.onChange.bind(this)} onClick={this.onClick} /> ); }; onClick = (event) => { console.log('onclick', event.target.value); }; onChange = (value) => { this.setState({ value }); console.log('onchange: ' + value); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); show() Display the TextArea component. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea', isVisible: false}); var btn = document.createElement('button'); btn.textContent = 'Show'; btn.onclick = function() { textArea.show(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(btn); body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea', isVisible: false }; }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <TextArea value={this.state.value} isVisible={this.state.isVisible} /> <button onClick={this.show}>Show</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); hide() Hide the TextArea component. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea', isVisible: true}); var btn = document.createElement('button'); btn.textContent = 'Hide'; btn.onclick = function() { textArea.hide(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(btn); body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea', isVisible: true }; }; hide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <TextArea value={this.state.value} isVisible={this.state.isVisible} /> <button onClick={this.hide}>Hide</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); disable() Disabled the TextArea component. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var btn = document.createElement('button'); btn.textContent = 'Disable'; btn.onclick = function() { textArea.disable(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(btn); body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea', isDisabled: false }; }; disable = () => { this.setState({ isDisabled: true }); }; render() { return ( <div> <TextArea value={this.state.value} isDisabled={this.state.isDisabled} /> <button onClick={this.disable}>Disable</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root')); enable() Enabled the TextArea component. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea', isDisabled: true}); var btn = document.createElement('button'); btn.textContent = 'Enable'; btn.onclick = function() { textArea.enable(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(btn); body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea', isDisabled: true }; }; enable = () => { this.setState({ isDisabled: false }); }; render() { return ( <div> <TextArea value={this.state.value} isDisabled={this.state.isDisabled} /> <button onClick={this.enable}>Enable</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"TextArea"},{"location":"Reference/TextArea/#textarea","text":"","title":"TextArea"},{"location":"Reference/TextArea/#overview","text":"Number Description 1 Drag and drop this icon to resize textarea","title":"Overview"},{"location":"Reference/TextArea/#constructor","text":"Parameter Name Type Required Description options Object No The object contains parameters of constructor. options.value String No The value of textarea field. options.isDisabled Boolean No The textarea field will be disabled. Default value: false options.isVisible Boolean No The textarea field will be visible. Default value: true options.placeholder String No The placeholder of textarea field. Default value: '' Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'textarea'}; }; render() { return ( <TextArea value={this.state.value} /> ); }; };","title":"Constructor"},{"location":"Reference/TextArea/#methods","text":"","title":"Methods"},{"location":"Reference/TextArea/#render","text":"Get DOM element of TextArea component. Parameter None Returns DOM element Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea' }; }; render() { return ( <TextArea value={this.state.value} /> ); }; }; ReactDOM.render(<Plugin />, document.getElementById('root'));","title":"render()"},{"location":"Reference/TextArea/#setvaluevalue","text":"Set the input content value of textarea field. Parameter Name Type Required Description value String Yes The input content value Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({ value: 'textarea' }); var btn = document.createElement('button'); btn.textContent = 'Set Value'; btn.onclick = function() { textArea.setValue('set value into textarea'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); body.appendChild(btn); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea' }; }; render() { return ( <div> <TextArea value={this.state.value} /> <button onClick={this.setValue}>Set Value</button> </div> ); }; setValue= () => { this.setState({ value: 'set value into textarea' }); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"setValue(value)"},{"location":"Reference/TextArea/#getvalue","text":"Get the input content of textarea field. Parameter None Returns Name Type Description value String The input content value of textarea field. Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); console.log(textArea.getValue()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea' }; }; render() { return ( <div> <TextArea value={this.state.value} /> <button onClick={this.getValue}>Get Value</button> </div> ); } getValue = () => { console.log(this.state.value); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"getValue()"},{"location":"Reference/TextArea/#setplaceholderplaceholder","text":"Set the placeholder of textarea field Parameter Name Type Required Description placeholder String Yes The placeholder value Returns None Sample Javascript var textarea = new kintoneUIComponent.TextArea({ placeholder: '' }); var btn = document.createElement('button'); btn.textContent = 'Click'; btn.onclick = function() { textarea.setPlaceholder('Placeholder'); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textarea.render()); body.appendChild(btn); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: '', placeholder: '' }; }; render() { return ( <div> <TextArea value={this.state.value} placeholder={this.state.placeholder}/> <button onClick={this.setPlaceholder}>Click</button> </div> ); }; setPlaceholder = () => { this.setState({ placeholder: 'placeholder' }); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"setPlaceholder(placeholder)"},{"location":"Reference/TextArea/#getplaceholder","text":"Get the placeholder value of text field Parameter None Returns Name Type Description placeholder String The placeholder value Sample Javascript var textarea = new kintoneUIComponent.TextArea({placeholder: 'Placeholder'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textarea.render()); console.log(textarea.getPlaceholder()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: '', placeholder: 'Placeholder' }; }; render() { return ( <div> <TextArea value={this.state.value} placeholder={this.state.placeholder} /> <button onClick={this.getPlaceholder}>Get placeholder</button> </div> ); }; getPlaceholder = () => { console.log(this.state.placeholder); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"getPlaceholder()"},{"location":"Reference/TextArea/#oneventname-callback","text":"Register callback for an event of TextArea component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes The callback function call when the event occurs Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(textArea.render()); textArea.on('click', function(event) { console.log('onclick', event.target.value); }); textArea.on('change', function(value) { console.log('onchange', value); }); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea' }; }; render() { return ( <TextArea value={this.state.value} onChange={this.onChange.bind(this)} onClick={this.onClick} /> ); }; onClick = (event) => { console.log('onclick', event.target.value); }; onChange = (value) => { this.setState({ value }); console.log('onchange: ' + value); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"on(eventName, callback)"},{"location":"Reference/TextArea/#show","text":"Display the TextArea component. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea', isVisible: false}); var btn = document.createElement('button'); btn.textContent = 'Show'; btn.onclick = function() { textArea.show(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(btn); body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea', isVisible: false }; }; show = () => { this.setState({ isVisible: true }); }; render() { return ( <div> <TextArea value={this.state.value} isVisible={this.state.isVisible} /> <button onClick={this.show}>Show</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"show()"},{"location":"Reference/TextArea/#hide","text":"Hide the TextArea component. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea', isVisible: true}); var btn = document.createElement('button'); btn.textContent = 'Hide'; btn.onclick = function() { textArea.hide(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(btn); body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea', isVisible: true }; }; hide = () => { this.setState({ isVisible: false }); }; render() { return ( <div> <TextArea value={this.state.value} isVisible={this.state.isVisible} /> <button onClick={this.hide}>Hide</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"hide()"},{"location":"Reference/TextArea/#disable","text":"Disabled the TextArea component. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea'}); var btn = document.createElement('button'); btn.textContent = 'Disable'; btn.onclick = function() { textArea.disable(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(btn); body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea', isDisabled: false }; }; disable = () => { this.setState({ isDisabled: true }); }; render() { return ( <div> <TextArea value={this.state.value} isDisabled={this.state.isDisabled} /> <button onClick={this.disable}>Disable</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"disable()"},{"location":"Reference/TextArea/#enable","text":"Enabled the TextArea component. Parameter None Returns None Sample Javascript var textArea = new kintoneUIComponent.TextArea({value: 'textarea', isDisabled: true}); var btn = document.createElement('button'); btn.textContent = 'Enable'; btn.onclick = function() { textArea.enable(); }; var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(btn); body.appendChild(textArea.render()); React import {TextArea} from '@kintone/kintone-ui-component'; import React from 'react'; import ReactDOM from 'react-dom'; export default class Plugin extends React.Component { constructor(props) { super(props); this.state = { value: 'Textarea', isDisabled: true }; }; enable = () => { this.setState({ isDisabled: false }); }; render() { return ( <div> <TextArea value={this.state.value} isDisabled={this.state.isDisabled} /> <button onClick={this.enable}>Enable</button> </div> ); }; }; ReactDOM.render(<Plugin />,document.getElementById('root'));","title":"enable()"}]}