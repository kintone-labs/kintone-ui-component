{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Quick start QuickStart Javascript QuickStart React References Alert Button CheckBox Dropdown IconButton Label MultipleChoice NotifyPopup RadioButton Spinner Table Text","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#quick-start","text":"QuickStart Javascript QuickStart React","title":"Quick start"},{"location":"#references","text":"Alert Button CheckBox Dropdown IconButton Label MultipleChoice NotifyPopup RadioButton Spinner Table Text","title":"References"},{"location":"Getting-Started/QuickStart-Javascript/","text":"QuickStart Javascript Create a customization Attach 2 below files from './dist' folder in kintone-ui-component into kintone app ./dist/kintone-ui-component.min.js ./dist/kintone-ui-component.min.css Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); var button = new kintoneUIComponent.Button({ text: 'Submit' }); kintoneSpaceElement.appendChild(button.render()); button.on('click', function(){ alert('This is my customization'); }) }); })(); Attach index.js file into kintone app setting","title":"QuickStart Javascript"},{"location":"Getting-Started/QuickStart-Javascript/#quickstart-javascript","text":"","title":"QuickStart Javascript"},{"location":"Getting-Started/QuickStart-Javascript/#create-a-customization","text":"Attach 2 below files from './dist' folder in kintone-ui-component into kintone app ./dist/kintone-ui-component.min.js ./dist/kintone-ui-component.min.css Create index.js file (function () { kintone.events.on(\"app.record.index.show\", function (ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); var button = new kintoneUIComponent.Button({ text: 'Submit' }); kintoneSpaceElement.appendChild(button.render()); button.on('click', function(){ alert('This is my customization'); }) }); })(); Attach index.js file into kintone app setting","title":"Create a customization"},{"location":"Getting-Started/QuickStart-React/","text":"QuickStart React Requirement Nodejs Git Create a customization Step 1: Run commands $ npm install -g create-react-app $ create-react-app my-customization $ cd my-customization $ npm install cross-env babel-preset-stage-0 css-loader style-loader webpack-cli $ npm install kintone-ui-component $ rm -f src/* Step 2: Add index.js file to src/ folder: import React, { Component } from 'react'; import ReactDOM from 'react-dom'; import {Button} from 'kintone-ui-component'; class MyCustomization extends Component { constructor(props) { super(props); } render() { return ( <Button text='Submit' type='success' onClick={function() {alert('This is my customization');}}/> ); } } // Adding your customization into header space of kintone app kintone.events.on(\"app.record.index.show\", function(ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); ReactDOM.render(<MyCustomization />, kintoneSpaceElement); }); Step 3: Add webpack.config.js file to my-customization/ folder const path = require('path'); const UglifyJsPlugin = require('uglifyjs-webpack-plugin'); module.exports = (env = {}) => { return { entry: { \"my-customization.min\": './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { presets: ['react-app','@babel/preset-env'], plugins: [\"transform-class-properties\"] } } }, { test: /\\.css$/, use: [ { loader: \"style-loader\" }, { loader: \"css-loader\" } ] } ] }, watch: env.watch, optimization: { minimizer: [ new UglifyJsPlugin({ include: /\\.min\\.js$/, }) ] } } } Step 4: Add a script to buiding by webpack to package.json \"scripts\": { \"build-webpack\": \"cross-env NODE_ENV=production webpack\", ... } Run command to build customization file $ npm run build-webpack result: * ./dist/my-customization.min.js Attach my-customization.min.js into kintone app setting","title":"QuickStart React"},{"location":"Getting-Started/QuickStart-React/#quickstart-react","text":"","title":"QuickStart React"},{"location":"Getting-Started/QuickStart-React/#requirement","text":"Nodejs Git","title":"Requirement"},{"location":"Getting-Started/QuickStart-React/#create-a-customization","text":"Step 1: Run commands $ npm install -g create-react-app $ create-react-app my-customization $ cd my-customization $ npm install cross-env babel-preset-stage-0 css-loader style-loader webpack-cli $ npm install kintone-ui-component $ rm -f src/* Step 2: Add index.js file to src/ folder: import React, { Component } from 'react'; import ReactDOM from 'react-dom'; import {Button} from 'kintone-ui-component'; class MyCustomization extends Component { constructor(props) { super(props); } render() { return ( <Button text='Submit' type='success' onClick={function() {alert('This is my customization');}}/> ); } } // Adding your customization into header space of kintone app kintone.events.on(\"app.record.index.show\", function(ev) { var kintoneSpaceElement = kintone.app.getHeaderSpaceElement(); ReactDOM.render(<MyCustomization />, kintoneSpaceElement); }); Step 3: Add webpack.config.js file to my-customization/ folder const path = require('path'); const UglifyJsPlugin = require('uglifyjs-webpack-plugin'); module.exports = (env = {}) => { return { entry: { \"my-customization.min\": './src/index.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', }, module: { rules: [ { test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: { loader: 'babel-loader', options: { presets: ['react-app','@babel/preset-env'], plugins: [\"transform-class-properties\"] } } }, { test: /\\.css$/, use: [ { loader: \"style-loader\" }, { loader: \"css-loader\" } ] } ] }, watch: env.watch, optimization: { minimizer: [ new UglifyJsPlugin({ include: /\\.min\\.js$/, }) ] } } } Step 4: Add a script to buiding by webpack to package.json \"scripts\": { \"build-webpack\": \"cross-env NODE_ENV=production webpack\", ... } Run command to build customization file $ npm run build-webpack result: * ./dist/my-customization.min.js Attach my-customization.min.js into kintone app setting","title":"Create a customization"},{"location":"Reference/Alert/","text":"Alert Overview Number Description 1 Success alert 2 Error alert 3 Display text Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String Yes The content of alert. options.type String No The type of alert: 'error' 'success' Default value is 'error'. options.isDisabled Boolean No The alert will be disabled. Default value: 'false' options.isVisible Boolean No The alert will be visible. Default value: 'true' Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { Alert} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); setText(text) Set the content of alert. Parameter Name Type Required Description text String Yes The content of alert. If text is undefined, null or true, The alert will be displayed blank. Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setText('Network error'); setType(type) Set the type of alert. Parameter Name Type Required Description type String No The type of alert. \"success\": success alert. \"error\": error alert Default value is \"error\". Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setType('success'); on(eventName, callBack) The callBack function will be execute after user click the alert. Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' onClick={this.handleClick}/> ); } handleClick(){ console.log('click'); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.on('click', function(event) { console.log('on click'); }); show() Display the Alert. Parameter None Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isVisible={true}/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.show(); hide() Hide the Alert. Parameter None Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isVisible={false}/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.hide(); disable() Disable the Alert. Parameter None Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isDisabled={true}/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.disable(); enable() Enable the Alert. Parameter None Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isDisabled={false}/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.enable();","title":"Alert"},{"location":"Reference/Alert/#alert","text":"","title":"Alert"},{"location":"Reference/Alert/#overview","text":"Number Description 1 Success alert 2 Error alert 3 Display text","title":"Overview"},{"location":"Reference/Alert/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String Yes The content of alert. options.type String No The type of alert: 'error' 'success' Default value is 'error'. options.isDisabled Boolean No The alert will be disabled. Default value: 'false' options.isVisible Boolean No The alert will be visible. Default value: 'true' Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});","title":"Constructor"},{"location":"Reference/Alert/#methods","text":"","title":"Methods"},{"location":"Reference/Alert/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { Alert} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render());","title":"render()"},{"location":"Reference/Alert/#settexttext","text":"Set the content of alert. Parameter Name Type Required Description text String Yes The content of alert. If text is undefined, null or true, The alert will be displayed blank. Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setText('Network error');","title":"setText(text)"},{"location":"Reference/Alert/#settypetype","text":"Set the type of alert. Parameter Name Type Required Description type String No The type of alert. \"success\": success alert. \"error\": error alert Default value is \"error\". Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error'/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.setType('success');","title":"setType(type)"},{"location":"Reference/Alert/#oneventname-callback","text":"The callBack function will be execute after user click the alert. Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' onClick={this.handleClick}/> ); } handleClick(){ console.log('click'); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.on('click', function(event) { console.log('on click'); });","title":"on(eventName, callBack)"},{"location":"Reference/Alert/#show","text":"Display the Alert. Parameter None Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isVisible={true}/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.show();","title":"show()"},{"location":"Reference/Alert/#hide","text":"Hide the Alert. Parameter None Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isVisible={false}/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.hide();","title":"hide()"},{"location":"Reference/Alert/#disable","text":"Disable the Alert. Parameter None Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isDisabled={true}/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.disable();","title":"disable()"},{"location":"Reference/Alert/#enable","text":"Enable the Alert. Parameter None Returns None Sample React import { Alert } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Alert text='Network error' type='error' isDisabled={false}/> ); } } Javascript var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(alert.render()); alert.enable();","title":"enable()"},{"location":"Reference/Button/","text":"Button Overview Number Description 1 Normal button 2 Submit button Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Text will be displayed in button. options.type String No Style of the button: 'normal' 'submit' Default value: 'normal' options.isDisabled Boolean No The button will be disabled. Default value: 'false' options.isVisible Boolean No The button will be visible. Default value: 'true' Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } Javascript var button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); setText(text) Set displayed text in button. Parameter Name Type Required Description text String Yes Display text in button Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='normal' /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setText('submit'); setType(type) Set the displayed type for button. Parameter Name Type Required Description type String No Style of the button: 'normal' 'submit' Default value: 'normal' Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='normal' /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setType('normal'); on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button onClick={this.handleButtonClick} /> ); } handleButtonClick(event) { console.log('on click'); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.on('click', function(event) { console.log('on click'); }); show() Display button. Parameter None Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isVisible={true} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.show(); hide() Hide button. Parameter None Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isVisible={false} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.hide(); disable() Disable button. Parameter None Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isDisabled={true} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.disable(); enable() Enable button. Parameter None Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isDisabled={false} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.enable();","title":"Button"},{"location":"Reference/Button/#button","text":"","title":"Button"},{"location":"Reference/Button/#overview","text":"Number Description 1 Normal button 2 Submit button","title":"Overview"},{"location":"Reference/Button/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Text will be displayed in button. options.type String No Style of the button: 'normal' 'submit' Default value: 'normal' options.isDisabled Boolean No The button will be disabled. Default value: 'false' options.isVisible Boolean No The button will be visible. Default value: 'true' Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } Javascript var button = new kintoneUIComponent.Button({ text: 'Submit', type: 'submit' });","title":"Constructor"},{"location":"Reference/Button/#methods","text":"","title":"Methods"},{"location":"Reference/Button/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='submit' isDisabled={false} isVisible={true} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render());","title":"render()"},{"location":"Reference/Button/#settexttext","text":"Set displayed text in button. Parameter Name Type Required Description text String Yes Display text in button Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='normal' /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setText('submit');","title":"setText(text)"},{"location":"Reference/Button/#settypetype","text":"Set the displayed type for button. Parameter Name Type Required Description type String No Style of the button: 'normal' 'submit' Default value: 'normal' Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text='Submit' type='normal' /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.setType('normal');","title":"setType(type)"},{"location":"Reference/Button/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button onClick={this.handleButtonClick} /> ); } handleButtonClick(event) { console.log('on click'); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.on('click', function(event) { console.log('on click'); });","title":"on(eventName, callback)"},{"location":"Reference/Button/#show","text":"Display button. Parameter None Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isVisible={true} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.show();","title":"show()"},{"location":"Reference/Button/#hide","text":"Hide button. Parameter None Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isVisible={false} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.hide();","title":"hide()"},{"location":"Reference/Button/#disable","text":"Disable button. Parameter None Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isDisabled={true} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.disable();","title":"disable()"},{"location":"Reference/Button/#enable","text":"Enable button. Parameter None Returns None Sample React import { Button } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Button text=\"button\" isDisabled={false} /> ); } } Javascript var button = new kintoneUIComponent.Button({text: 'button'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(button.render()); button.enable();","title":"enable()"},{"location":"Reference/CheckBox/","text":"CheckBox Overview Number Description 1 Icon when the item is selected 2 Label of an item 3 Not selected item 4 Disabled item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on checkbox. options.items[].value String Yes String value of item If the value is duplicate, the error message will be displayed options.items[].label String No String label of item options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value Array No List of checked item. options.isDisabled Boolean No The checkBox will be disabled. Default value: 'false' options.isVisible Boolean No The checkBox will be visible. Default value: 'true' Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); addItem(item) Add an item to the end of checkbox list. Parameter Name Type Required Description item String Yes The item will be added to multile choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.addItem({ label: 'Grape', value: 'grape', isDisabled: false }); getItem(index) Get the value of specific position in checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item String the item of the checkbox item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]) } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var firstItem = checkbox.getItem(0); console.log(firstItem); removeItem(index) Remove the specific item from checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.removeItem(0); getItems() Get all items from the checkbox. Parameter None Returns The list contains all items of the dropdown. Name Type Description items Array<Object> List items of the checkbox items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var items = checkbox.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); getValue() Get the checked values of the checkbox. Parameter None Returns List of checked items. Name Type Description value List<String> The value of selected items. Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Values</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var value = checkbox.getValue(); value.forEach(function(item) { console.log(item); }); setValue(value) Set the checked value of checkbox. Parameter Name Type Required Description value Array<String> Yes The array contains checked value in list. If the 'value[]' is nonexistent value, the error will be displayed Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: []}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: this.state.value.concat(['Lemon']) }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.setValue(['Lemon']); disableItem(value) Set the disabled item of checkbox. Parameter Name Type Required Description value Array Yes The array contains checked value in list. Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disable item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disableItem('Orange'); enableItem(value) Set the enable item of checkbox. Parameter Name Type Required Description value Array Yes The array contains checked value in list. Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enableItem('Banana'); on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} items={this.state.items} onChange={this.handleChange} /> ); } handleChange= () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.on('change', function(value) { console.log('on change'); }); show() Display the checkbox. Parameter None Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} isVisible={true} items={this.state.items} onChange={(value) => {this.setState({value})}}/> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.show(); hide() Hide the checkbox. Parameter None Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} isVisible={false} items={this.state.items} onChange={(value) => {this.setState({value})}}/> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.hide(); disable() Disabled the checkbox. Parameter None Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox isDisabled={true} items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}}/> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disable(); enable() Enabled the checkbox. Parameter None Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox isDisabled={false} items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}}/> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enable();","title":"CheckBox"},{"location":"Reference/CheckBox/#checkbox","text":"","title":"CheckBox"},{"location":"Reference/CheckBox/#overview","text":"Number Description 1 Icon when the item is selected 2 Label of an item 3 Not selected item 4 Disabled item","title":"Overview"},{"location":"Reference/CheckBox/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on checkbox. options.items[].value String Yes String value of item If the value is duplicate, the error message will be displayed options.items[].label String No String label of item options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value Array No List of checked item. options.isDisabled Boolean No The checkBox will be disabled. Default value: 'false' options.isVisible Boolean No The checkBox will be visible. Default value: 'true' Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] });","title":"Constructor"},{"location":"Reference/CheckBox/#methods","text":"","title":"Methods"},{"location":"Reference/CheckBox/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: ['Orange']}; } render() { return ( <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render());","title":"render()"},{"location":"Reference/CheckBox/#additemitem","text":"Add an item to the end of checkbox list. Parameter Name Type Required Description item String Yes The item will be added to multile choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.addItem({ label: 'Grape', value: 'grape', isDisabled: false });","title":"addItem(item)"},{"location":"Reference/CheckBox/#getitemindex","text":"Get the value of specific position in checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item String the item of the checkbox item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]) } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var firstItem = checkbox.getItem(0); console.log(firstItem);","title":"getItem(index)"},{"location":"Reference/CheckBox/#removeitemindex","text":"Remove the specific item from checkbox list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.removeItem(0);","title":"removeItem(index)"},{"location":"Reference/CheckBox/#getitems","text":"Get all items from the checkbox. Parameter None Returns The list contains all items of the dropdown. Name Type Description items Array<Object> List items of the checkbox items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var items = checkbox.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); });","title":"getItems()"},{"location":"Reference/CheckBox/#getvalue","text":"Get the checked values of the checkbox. Parameter None Returns List of checked items. Name Type Description value List<String> The value of selected items. Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Values</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); var value = checkbox.getValue(); value.forEach(function(item) { console.log(item); });","title":"getValue()"},{"location":"Reference/CheckBox/#setvaluevalue","text":"Set the checked value of checkbox. Parameter Name Type Required Description value Array<String> Yes The array contains checked value in list. If the 'value[]' is nonexistent value, the error will be displayed Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: []}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: this.state.value.concat(['Lemon']) }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.setValue(['Lemon']);","title":"setValue(value)"},{"location":"Reference/CheckBox/#disableitemvalue","text":"Set the disabled item of checkbox. Parameter Name Type Required Description value Array Yes The array contains checked value in list. Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disable item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disableItem('Orange');","title":"disableItem(value)"},{"location":"Reference/CheckBox/#enableitemvalue","text":"Set the enable item of checkbox. Parameter Name Type Required Description value Array Yes The array contains checked value in list. Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <CheckBox items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enableItem('Banana');","title":"enableItem(value)"},{"location":"Reference/CheckBox/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} items={this.state.items} onChange={this.handleChange} /> ); } handleChange= () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.on('change', function(value) { console.log('on change'); });","title":"on(eventName, callBack)"},{"location":"Reference/CheckBox/#show","text":"Display the checkbox. Parameter None Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} isVisible={true} items={this.state.items} onChange={(value) => {this.setState({value})}}/> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.show();","title":"show()"},{"location":"Reference/CheckBox/#hide","text":"Hide the checkbox. Parameter None Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox value={this.state.value} isVisible={false} items={this.state.items} onChange={(value) => {this.setState({value})}}/> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.hide();","title":"hide()"},{"location":"Reference/CheckBox/#disable","text":"Disabled the checkbox. Parameter None Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox isDisabled={true} items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}}/> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.disable();","title":"disable()"},{"location":"Reference/CheckBox/#enable","text":"Enabled the checkbox. Parameter None Returns None Sample React import { CheckBox } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <CheckBox isDisabled={false} items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}}/> ); } } Javascript var checkbox = new kintoneUIComponent.CheckBox ({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName('BODY')[0]; body.appendChild(checkbox.render()); checkbox.enable();","title":"enable()"},{"location":"Reference/Dropdown/","text":"Dropdown Overview Number Description 1 Main area 2 Content area 3 Selected item 4 Not selected item 5 Disabled item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items will be displayed on dropdown. options.items[].value String Yes The value of an item. If the value is duplicate, the error will be displayed options.items[].label String No The label of an item. options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected value. If the 'options.value' is nonexistent value, the error will be displayed options.isDisabled Boolean No The dropdown will be disabled. Default value: 'false' options.isVisible Boolean No The dropdown will be visible. Default value: 'true' Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); addItem(item) Add an item to dropdown list. Parameter Name Type Required Description item Object Yes The item will be added to dropdown list. item.value String Yes The value of an item. item.label String Yes Display string. item.isDisabled Boolean Yes Indicate item will be disabled when display. Default value: 'false' Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [], value: undefined } } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick= () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) }; } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); removeItem(index) Remove an item at specific position in dropdown's list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ] } } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick= () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var firstItem = dropdown.getItems()[0]; dropdown.removeItem(0); console.log(firstItem); getItems() Get all items of the dropdown. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var list = dropdown.getItems(); list.forEach(function(item) { console.log(item); }); getValue() Get value of the selected item Parameter None Returns Name Type Description value String The value of the selected item Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var selectedItem = dropdown.getValue(); console.log(selectedItem); setValue(value) Set the selected value for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. If the 'value' is nonexistent value, the error will be displayed Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.setValue('Orange'); disableItem(value) Set the disabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disableItem('Orange'); enableItem(value) Set the enabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enableItem('Banana'); on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.on('change', function(value) { console.log('on change'); }); show() Display the dropdown. Parameter None Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isVisible={true} /> ); } handleChange = (value) => { this.setState({value}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.show(); hide() Hide the dropdown. Parameter None Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isVisible={false} /> ); } handleChange = (value) => { this.setState({value}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.hide(); disable() Disabled the dropdown. Parameter None Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isDisabled={true} /> ); } handleChange = (value) => { this.setState({value}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disable(); enable() Enabled the dropdown. Parameter None Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isDisabled={false} /> ); } handleChange = (value) => { this.setState({value}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enable();","title":"Dropdown"},{"location":"Reference/Dropdown/#dropdown","text":"","title":"Dropdown"},{"location":"Reference/Dropdown/#overview","text":"Number Description 1 Main area 2 Content area 3 Selected item 4 Not selected item 5 Disabled item","title":"Overview"},{"location":"Reference/Dropdown/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items will be displayed on dropdown. options.items[].value String Yes The value of an item. If the value is duplicate, the error will be displayed options.items[].label String No The label of an item. options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected value. If the 'options.value' is nonexistent value, the error will be displayed options.isDisabled Boolean No The dropdown will be disabled. Default value: 'false' options.isVisible Boolean No The dropdown will be visible. Default value: 'true' Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' });","title":"Constructor"},{"location":"Reference/Dropdown/#methods","text":"","title":"Methods"},{"location":"Reference/Dropdown/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Orange'}; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render());","title":"render()"},{"location":"Reference/Dropdown/#additemitem","text":"Add an item to dropdown list. Parameter Name Type Required Description item Object Yes The item will be added to dropdown list. item.value String Yes The value of an item. item.label String Yes Display string. item.isDisabled Boolean Yes Indicate item will be disabled when display. Default value: 'false' Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [], value: undefined } } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick= () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) }; } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true});","title":"addItem(item)"},{"location":"Reference/Dropdown/#removeitemindex","text":"Remove an item at specific position in dropdown's list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ] } } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick= () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var firstItem = dropdown.getItems()[0]; dropdown.removeItem(0); console.log(firstItem);","title":"removeItem(index)"},{"location":"Reference/Dropdown/#getitems","text":"Get all items of the dropdown. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var list = dropdown.getItems(); list.forEach(function(item) { console.log(item); });","title":"getItems()"},{"location":"Reference/Dropdown/#getvalue","text":"Get value of the selected item Parameter None Returns Name Type Description value String The value of the selected item Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); var selectedItem = dropdown.getValue(); console.log(selectedItem);","title":"getValue()"},{"location":"Reference/Dropdown/#setvaluevalue","text":"Set the selected value for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. If the 'value' is nonexistent value, the error will be displayed Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.setValue('Orange');","title":"setValue(value)"},{"location":"Reference/Dropdown/#disableitemvalue","text":"Set the disabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disableItem('Orange');","title":"disableItem(value)"},{"location":"Reference/Dropdown/#enableitemvalue","text":"Set the enabled item for dropdown. Parameter Name Type Required Description value String Yes The value of an Item in dropdown. Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <Dropdown items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enableItem('Banana');","title":"enableItem(value)"},{"location":"Reference/Dropdown/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.on('change', function(value) { console.log('on change'); });","title":"on(eventName, callBack)"},{"location":"Reference/Dropdown/#show","text":"Display the dropdown. Parameter None Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isVisible={true} /> ); } handleChange = (value) => { this.setState({value}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.show();","title":"show()"},{"location":"Reference/Dropdown/#hide","text":"Hide the dropdown. Parameter None Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isVisible={false} /> ); } handleChange = (value) => { this.setState({value}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.hide();","title":"hide()"},{"location":"Reference/Dropdown/#disable","text":"Disabled the dropdown. Parameter None Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isDisabled={true} /> ); } handleChange = (value) => { this.setState({value}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.disable();","title":"disable()"},{"location":"Reference/Dropdown/#enable","text":"Enabled the dropdown. Parameter None Returns None Sample React import { Dropdown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <Dropdown items={this.state.items} value={this.state.value} onChange={this.handleChange} isDisabled={false} /> ); } handleChange = (value) => { this.setState({value}); } } Javascript var dropdown = new kintoneUIComponent.Dropdown({ items: [ { label: 'Orange', value: 'Orange', isDisabled: true }, { label: 'Banana', value: 'Banana', isDisabled: false } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(dropdown.render()); dropdown.enable();","title":"enable()"},{"location":"Reference/IconButton/","text":"IconButton Overview Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.type String No The type of of button. The value is one of: 'insert' 'remove' 'close' Default value is 'insert'. options.size String No Size of icon button: 'large' 'small' Default value is 'large'. options.color String No Color of icon button: 'gray' 'blue' 'red' 'green' Default value is 'gray'. options.isDisabled Boolean No The icon button will be disabled. Default value: 'false' options.isVisible Boolean No The icon button will be visible. Default value: 'true' Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } Javascript var insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'}); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); setType(type) Set the type of the button. Parameter Name Type Required Description type String No The type of of button. The value is one of: 'insert' 'remove' 'close' Default value is 'insert'. Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' type='remove'/> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setType('remove'); setSize(size) Change size of icon button. Parameter Name Type Required Description size String No The size of of button. The value is one of: 'normall' 'small' Default value is 'normal'. Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setSize('small'); on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' onClick={this.handleClick} /> ); } handleClick() { console.log('on click'); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.on('click', function(event) { console.log('on click'); }); show() Display the icon button. Parameter None Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isVisible={true} /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.show(); hide() Hide the icon button. Parameter None Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isVisible={false} /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.hide(); disable() Disabled the icon button. Parameter None Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isDisabled={true} /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.disable(); enable() Enabled the icon button. Parameter None Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isDisabled={false} /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.enable();","title":"IconButton"},{"location":"Reference/IconButton/#iconbutton","text":"","title":"IconButton"},{"location":"Reference/IconButton/#overview","text":"","title":"Overview"},{"location":"Reference/IconButton/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.type String No The type of of button. The value is one of: 'insert' 'remove' 'close' Default value is 'insert'. options.size String No Size of icon button: 'large' 'small' Default value is 'large'. options.color String No Color of icon button: 'gray' 'blue' 'red' 'green' Default value is 'gray'. options.isDisabled Boolean No The icon button will be disabled. Default value: 'false' options.isVisible Boolean No The icon button will be visible. Default value: 'true' Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } Javascript var insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color:'blue', size: 'small'});","title":"Constructor"},{"location":"Reference/IconButton/#methods","text":"","title":"Methods"},{"location":"Reference/IconButton/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render());","title":"render()"},{"location":"Reference/IconButton/#settypetype","text":"Set the type of the button. Parameter Name Type Required Description type String No The type of of button. The value is one of: 'insert' 'remove' 'close' Default value is 'insert'. Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' type='remove'/> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setType('remove');","title":"setType(type)"},{"location":"Reference/IconButton/#setsizesize","text":"Change size of icon button. Parameter Name Type Required Description size String No The size of of button. The value is one of: 'normall' 'small' Default value is 'normal'. Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.setSize('small');","title":"setSize(size)"},{"location":"Reference/IconButton/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' onClick={this.handleClick} /> ); } handleClick() { console.log('on click'); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.on('click', function(event) { console.log('on click'); });","title":"on(eventName, callback)"},{"location":"Reference/IconButton/#show","text":"Display the icon button. Parameter None Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isVisible={true} /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.show();","title":"show()"},{"location":"Reference/IconButton/#hide","text":"Hide the icon button. Parameter None Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isVisible={false} /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.hide();","title":"hide()"},{"location":"Reference/IconButton/#disable","text":"Disabled the icon button. Parameter None Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isDisabled={true} /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.disable();","title":"disable()"},{"location":"Reference/IconButton/#enable","text":"Enabled the icon button. Parameter None Returns None Sample React import { IconButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <IconButton type='insert' size='small' color='blue' isDisabled={false} /> ); } } Javascript var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(iconBtn.render()); iconBtn.enable();","title":"enable()"},{"location":"Reference/Label/","text":"Label Overview Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Caption of label. options.isRequired String No Display the '*' character at the end of the caption. Default value is false. options.isDisabled Boolean No The label will be disabled. Default value: 'false' options.isVisible Boolean No The label will be visible. Default value: 'true' Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({ text: 'Name', isRequired: true }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); setText(text) Set the value of text field. Parameter Name Type Required Description text String Yes Caption of label. If text is undefined, null or true, The label will be displayed blank Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setText('Name'); setRequired(required) Set the required for the label. Parameter Name Type Required Description required Boolean Yes Required option. This parameter is 'true': The * character will be displayed at the end of the caption. This parameter is 'false': The * character will be hidden Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setRequired(true); on(eventName, callBack) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} onClick={this.handleClick} /> ); } handleClick(){ console.log('click'); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.on('click', function(event) { console.log('on click'); }); show() Display the Label. Parameter None Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isVisible={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.show(); hide() Hide the Label. Parameter None Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isVisible={false} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.hide(); disable() Disabled the Label. Parameter None Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isDisabled={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.disable(); enable() Enabled the Label. Parameter None Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isDisabled={false} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.enable();","title":"Label"},{"location":"Reference/Label/#label","text":"","title":"Label"},{"location":"Reference/Label/#overview","text":"","title":"Overview"},{"location":"Reference/Label/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Caption of label. options.isRequired String No Display the '*' character at the end of the caption. Default value is false. options.isDisabled Boolean No The label will be disabled. Default value: 'false' options.isVisible Boolean No The label will be visible. Default value: 'true' Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({ text: 'Name', isRequired: true });","title":"Constructor"},{"location":"Reference/Label/#methods","text":"","title":"Methods"},{"location":"Reference/Label/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render());","title":"render()"},{"location":"Reference/Label/#settexttext","text":"Set the value of text field. Parameter Name Type Required Description text String Yes Caption of label. If text is undefined, null or true, The label will be displayed blank Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setText('Name');","title":"setText(text)"},{"location":"Reference/Label/#setrequiredrequired","text":"Set the required for the label. Parameter Name Type Required Description required Boolean Yes Required option. This parameter is 'true': The * character will be displayed at the end of the caption. This parameter is 'false': The * character will be hidden Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.setRequired(true);","title":"setRequired(required)"},{"location":"Reference/Label/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} onClick={this.handleClick} /> ); } handleClick(){ console.log('click'); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.on('click', function(event) { console.log('on click'); });","title":"on(eventName, callBack)"},{"location":"Reference/Label/#show","text":"Display the Label. Parameter None Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isVisible={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.show();","title":"show()"},{"location":"Reference/Label/#hide","text":"Hide the Label. Parameter None Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isVisible={false} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.hide();","title":"hide()"},{"location":"Reference/Label/#disable","text":"Disabled the Label. Parameter None Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isDisabled={true} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.disable();","title":"disable()"},{"location":"Reference/Label/#enable","text":"Enabled the Label. Parameter None Returns None Sample React import { Label } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Label text='Name' isRequired={true} isDisabled={false} /> ); } } Javascript var label = new kintoneUIComponent.Label({text: 'label'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(label.render()); label.enable();","title":"enable()"},{"location":"Reference/MultipleChoice/","text":"MultipleChoice Overview Number Description 1 Title 2 Selected item 3 Not selected item 4 Disabled item Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on multiple choices. options.items[].value String Yes String value of item If the value is duplicate, the error message will be displayed options.items[].label String No String label of item options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. options.value Array No List of checked item. If the 'options.value[]' is nonexistent value, the error will be displayed options.isDisabled Boolean No The multiple choices will be disabled. Default value: 'false' options.isVisible Boolean No The multiple choices will be visible. Default value: 'true' Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); addItem(item) Add an item to the end of multile choices list. Parameter Name Type Required Description item Object Yes The item will be added to multile choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.addItem({ label: 'Grape', value: 'Grape', isDisabled: false }); getItem(index) Get the item of specific position in multiple choices list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item Object The item of specific position in multiple choices list. item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); let items= [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var firstItem = mulChoice.getItem(0); console.log(firstItem); removeItem(index) Remove the specific item from multiple choice list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.removeItem(0); getItems() Get all items of the multiple choice. Parameter None Returns Multiple choice list item. Name Type Description items Array<Object> List items of the multiple choice items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var items = mulChoice.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); }); getValue() Get the checked values of multiple choice. Parameter None Returns List of checked items. Name Type Description value Array<String> List selected values of the multiple choice. Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var selectedItems = mulChoice.getValue(); selectedItems.forEach(function(item) { console.log(item); }); setValue(value) Set the checked value of multiple choice. Parameter Name Type Required Description value Array<String> yes The value of an item. If the 'value[]' is nonexistent value, the error will be displayed Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: ['Lemon'] }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.setValue(['Lemon']); disableItem(value) Set the disabled items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disableItem('Orange'); enableItem(value) Set the enable items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enableItem('Banana'); on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={this.handleChange} /> ); } handleChange= () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.on('change', function(value) { console.log('on change'); }); show() Display the multiple choice. Parameter None Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isVisible={true} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.show(); hide() Hide the multiple choice. Parameter None Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isVisible={false} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.hide(); disable() Disabled the multiple choice. Parameter None Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isDisabled={true} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disable(); enable() Enabled the multiple choice. Parameter None Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isDisabled={false} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enable();","title":"MultipleChoice"},{"location":"Reference/MultipleChoice/#multiplechoice","text":"","title":"MultipleChoice"},{"location":"Reference/MultipleChoice/#overview","text":"Number Description 1 Title 2 Selected item 3 Not selected item 4 Disabled item","title":"Overview"},{"location":"Reference/MultipleChoice/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.items Array<Object> No List of items which will be displayed on multiple choices. options.items[].value String Yes String value of item If the value is duplicate, the error message will be displayed options.items[].label String No String label of item options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false'. options.value Array No List of checked item. If the 'options.value[]' is nonexistent value, the error will be displayed options.isDisabled Boolean No The multiple choices will be disabled. Default value: 'false' options.isVisible Boolean No The multiple choices will be visible. Default value: 'true' Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] });","title":"Constructor"},{"location":"Reference/MultipleChoice/#methods","text":"","title":"Methods"},{"location":"Reference/MultipleChoice/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: ['Orange'] }; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render());","title":"render()"},{"location":"Reference/MultipleChoice/#additemitem","text":"Add an item to the end of multile choices list. Parameter Name Type Required Description item Object Yes The item will be added to multile choices list. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.addItem({ label: 'Grape', value: 'Grape', isDisabled: false });","title":"addItem(item)"},{"location":"Reference/MultipleChoice/#getitemindex","text":"Get the item of specific position in multiple choices list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns The item at given position. Name Type Description item Object The item of specific position in multiple choices list. item.value String The value of an item. item.label String Display string. item.isDisabled Boolean Indicate item will be disabled when display. Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); let items= [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Item</button> </div> ); } handleClick = () => { console.log(this.state.items[0]); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var firstItem = mulChoice.getItem(0); console.log(firstItem);","title":"getItem(index)"},{"location":"Reference/MultipleChoice/#removeitemindex","text":"Remove the specific item from multiple choice list. Parameter Name Type Required Description index Integer Yes The position of retrieved item. Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true } ] } } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value ) { prevState.value = prevState.value.filter(value => value !== prevState.items[0].value) } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.removeItem(0);","title":"removeItem(index)"},{"location":"Reference/MultipleChoice/#getitems","text":"Get all items of the multiple choice. Parameter None Returns Multiple choice list item. Name Type Description items Array<Object> List items of the multiple choice items[].value String The value of an item. items[].label String Display string. items[].isDisabled Boolean Indicate item will be disabled when display. Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var items = mulChoice.getItems(); items.forEach(function(item) { console.log(item.value + ':' + item.isDisabled); });","title":"getItems()"},{"location":"Reference/MultipleChoice/#getvalue","text":"Get the checked values of multiple choice. Parameter None Returns List of checked items. Name Type Description value Array<String> List selected values of the multiple choice. Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); var selectedItems = mulChoice.getValue(); selectedItems.forEach(function(item) { console.log(item); });","title":"getValue()"},{"location":"Reference/MultipleChoice/#setvaluevalue","text":"Set the checked value of multiple choice. Parameter Name Type Required Description value Array<String> yes The value of an item. If the 'value[]' is nonexistent value, the error will be displayed Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({ value: ['Lemon'] }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.setValue(['Lemon']);","title":"setValue(value)"},{"location":"Reference/MultipleChoice/#disableitemvalue","text":"Set the disabled items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disableItem('Orange');","title":"disableItem(value)"},{"location":"Reference/MultipleChoice/#enableitemvalue","text":"Set the enable items of multiple choice. Parameter Name Type Required Description value String yes The value of an item Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enableItem('Banana');","title":"enableItem(value)"},{"location":"Reference/MultipleChoice/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice items={this.state.items} value={this.state.value} onChange={this.handleChange} /> ); } handleChange= () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.on('change', function(value) { console.log('on change'); });","title":"on(eventName, callBack)"},{"location":"Reference/MultipleChoice/#show","text":"Display the multiple choice. Parameter None Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isVisible={true} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.show();","title":"show()"},{"location":"Reference/MultipleChoice/#hide","text":"Hide the multiple choice. Parameter None Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isVisible={false} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.hide();","title":"hide()"},{"location":"Reference/MultipleChoice/#disable","text":"Disabled the multiple choice. Parameter None Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isDisabled={true} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.disable();","title":"disable()"},{"location":"Reference/MultipleChoice/#enable","text":"Enabled the multiple choice. Parameter None Returns None Sample React import { MultipleChoice } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <MultipleChoice value={this.state.value} isDisabled={false} items={this.state.items} onClick={this.handleClick}/> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var mulChoice = new kintoneUIComponent.MultipleChoice({ items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: ['Orange', 'Banana'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(mulChoice.render()); mulChoice.enable();","title":"enable()"},{"location":"Reference/NotifyPopup/","text":"NotifyPopup Overview Number Description 1 Success popup 2 Error popup 3 Icon button for closing popup 4 Title of popup 5 Information popup Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Displayed text on notify popup. options.type String No Type of notify popup: 'error' 'success' 'infor' Default value: 'error' options.isDisabled Boolean No The notify popup will be disabled. Default value: 'false' options.isVisible Boolean No The notify popup will be visible. Default value: 'true' Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); setText(text) Setting the displayed text on popup. Parameter Name Type Required Description text String Yes Displayed text on notify popup. If text is undefined, null or true, The popup will be displayed blank. Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.setText('Submit failed'); setType(type) Setting type for popup. Parameter Name Type Required Description type String No Type of notify popup: 'error' 'success' 'infor' Default value: 'error' Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.setType('success'); on(eventName, callback) Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' onClick={this.handleClick} /> ); } handleClick(event) { console.log('on click'); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.on('click', function(event) { console.log('on click'); }); show() Display the notify popup. Parameter None Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={true} /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.show(); hide() Hide the notify popup. Parameter None Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={false} /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.hide(); disable() Disabled the notify popup. Parameter None Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isDisabled={true} /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.disable(); enable() Enabled the notify popup. Parameter None Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isDisabled={false} /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.enable();","title":"NotifyPopup"},{"location":"Reference/NotifyPopup/#notifypopup","text":"","title":"NotifyPopup"},{"location":"Reference/NotifyPopup/#overview","text":"Number Description 1 Success popup 2 Error popup 3 Icon button for closing popup 4 Title of popup 5 Information popup","title":"Overview"},{"location":"Reference/NotifyPopup/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.text String No Displayed text on notify popup. options.type String No Type of notify popup: 'error' 'success' 'infor' Default value: 'error' options.isDisabled Boolean No The notify popup will be disabled. Default value: 'false' options.isVisible Boolean No The notify popup will be visible. Default value: 'true' Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' });","title":"Constructor"},{"location":"Reference/NotifyPopup/#methods","text":"","title":"Methods"},{"location":"Reference/NotifyPopup/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render());","title":"render()"},{"location":"Reference/NotifyPopup/#settexttext","text":"Setting the displayed text on popup. Parameter Name Type Required Description text String Yes Displayed text on notify popup. If text is undefined, null or true, The popup will be displayed blank. Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.setText('Submit failed');","title":"setText(text)"},{"location":"Reference/NotifyPopup/#settypetype","text":"Setting type for popup. Parameter Name Type Required Description type String No Type of notify popup: 'error' 'success' 'infor' Default value: 'error' Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.setType('success');","title":"setType(type)"},{"location":"Reference/NotifyPopup/#oneventname-callback","text":"Register callback for click event Parameter Name Type Required Description eventName String Yes Name of event: 'click' callback function Yes callback Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' onClick={this.handleClick} /> ); } handleClick(event) { console.log('on click'); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.on('click', function(event) { console.log('on click'); });","title":"on(eventName, callback)"},{"location":"Reference/NotifyPopup/#show","text":"Display the notify popup. Parameter None Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={true} /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.show();","title":"show()"},{"location":"Reference/NotifyPopup/#hide","text":"Hide the notify popup. Parameter None Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isVisible={false} /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.hide();","title":"hide()"},{"location":"Reference/NotifyPopup/#disable","text":"Disabled the notify popup. Parameter None Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isDisabled={true} /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.disable();","title":"disable()"},{"location":"Reference/NotifyPopup/#enable","text":"Enabled the notify popup. Parameter None Returns None Sample React import { NotifyPopup } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <NotifyPopup text='Submit successfully' type='success' isDisabled={false} /> ); } } Javascript var notifyPopup = new kintoneUIComponent.NotifyPopup({ text: 'Submit sucessffully', type: 'success' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(notifyPopup.render()); notifyPopup.enable();","title":"enable()"},{"location":"Reference/RadioButton/","text":"RadioButton Overview Number Description 1 Title 2 Icon when item is selected 3 Value of item 4 Icon when item isn't selected Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.name String Yes Name of radio button for submit. If value isn't set, the error message will be displayed. options.items Array<Object> No List of item which displayed in radio button. options.items[].value String Yes The value of an item.If the value is duplicate, the error will be displayed options.items[].label String No Display string. options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected item. options.isDisabled Boolean No The radio button will be disabled. Default value: 'false' options.isVisible Boolean No The radio button will be visible. Default value: 'true' Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); addItem(item) Add an item to end of the radio button list. Parameter Name Type Required Description item Object Yes The item object will be added. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [], value: undefined } } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true}); removeItem(index) Remove item at specific index of radio button list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [{ label: 'Lemon', value: 'Lemon', isDisabled: true }] } } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.removeItem(0); getItems() Get all items in radio button list. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample React import { DropDown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); var items = radioBtn.getItems(); items.forEach(function(item) { console.log(item); }); getValue() Get the selected item in radio button. Parameter None Returns Name Type Description value String The value of the selected item Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.getValue(); setValue(value) Set the selected item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.setValue('Lemon'); disableItem(value) Set the disabled item for the radio button. Parameter Name Type Required Description value String Yes The value of an item in radio button. Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disableItem('Orange'); enableItem(value) Set the enabled item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enableItem('Banana'); on(eventName, callBack) Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.on('change', function(value) { console.log('on change'); }); show() Display the radio button. Parameter None Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isVisible={true} /> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.show(); hide() Hide the radio button. Parameter None Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={() => {this.setState({value});}} isVisible={false} /> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.hide(); disable() Disabled the radio button. Parameter None Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disable(); enable() Enabled the radio button. Parameter None Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enable();","title":"RadioButton"},{"location":"Reference/RadioButton/#radiobutton","text":"","title":"RadioButton"},{"location":"Reference/RadioButton/#overview","text":"Number Description 1 Title 2 Icon when item is selected 3 Value of item 4 Icon when item isn't selected","title":"Overview"},{"location":"Reference/RadioButton/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.name String Yes Name of radio button for submit. If value isn't set, the error message will be displayed. options.items Array<Object> No List of item which displayed in radio button. options.items[].value String Yes The value of an item.If the value is duplicate, the error will be displayed options.items[].label String No Display string. options.items[].isDisabled Boolean No Indicate item will be disabled when display. Default value is false. options.value String No Default selected item. options.isDisabled Boolean No The radio button will be disabled. Default value: 'false' options.isVisible Boolean No The radio button will be visible. Default value: 'true' Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' });","title":"Constructor"},{"location":"Reference/RadioButton/#methods","text":"","title":"Methods"},{"location":"Reference/RadioButton/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(props) { super(props); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items, value: 'Lemon'}; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render());","title":"render()"},{"location":"Reference/RadioButton/#additemitem","text":"Add an item to end of the radio button list. Parameter Name Type Required Description item Object Yes The item object will be added. item.value String Yes The value of an item. item.label String No Display string. item.isDisabled Boolean No Indicate item will be disabled when display. Default value: 'false' Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [], value: undefined } } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Add Item</button> </div> ); } handleClick = () => { const item = { label: 'Lemon', value: 'Lemon', isDisabled: false }; this.setState(prevState => ({ items: prevState.items ? prevState.items.concat([item]) : [item] })) } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true } ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true});","title":"addItem(item)"},{"location":"Reference/RadioButton/#removeitemindex","text":"Remove item at specific index of radio button list. Parameter Name Type Required Description index Integer Yes The index of remove item. Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); this.state = { items: [{ label: 'Lemon', value: 'Lemon', isDisabled: true }] } } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Remove Item</button> </div> ); } handleClick = () => { this.setState(prevState => { if (prevState.items[0]) { if (this.state.value === prevState.items[0].value) { prevState.value = undefined; } prevState.items.splice(0, 1) return prevState; } return prevState; }); }; } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.removeItem(0);","title":"removeItem(index)"},{"location":"Reference/RadioButton/#getitems","text":"Get all items in radio button list. Parameter None Returns The list contains all items of dropdown. Name Type Description items List<Object> List of items objects in dropdown. items[].label String Display string. items[].value String The value of an item. items[].isDisabled Boolean Indicate item was disabled. Sample React import { DropDown } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = {items: items}; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Items</button> </div> ); } handleClick = () => { this.state.items.forEach(item => { console.log(item); }); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); var items = radioBtn.getItems(); items.forEach(function(item) { console.log(item); });","title":"getItems()"},{"location":"Reference/RadioButton/#getvalue","text":"Get the selected item in radio button. Parameter None Returns Name Type Description value String The value of the selected item Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Get Value</button> </div> ); } handleClick = () => { console.log(this.state.value); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.getValue();","title":"getValue()"},{"location":"Reference/RadioButton/#setvaluevalue","text":"Set the selected item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Set Value</button> </div> ); } handleClick = () => { this.setState({value: 'Orange'}); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.setValue('Lemon');","title":"setValue(value)"},{"location":"Reference/RadioButton/#disableitemvalue","text":"Set the disabled item for the radio button. Parameter Name Type Required Description value String Yes The value of an item in radio button. Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Disabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[0].isDisabled = true; this.setState({ items: items }); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disableItem('Orange');","title":"disableItem(value)"},{"location":"Reference/RadioButton/#enableitemvalue","text":"Set the enabled item for radio button. Parameter Name Type Required Description value String Yes Selected value in radio button. Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <div> <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Enabled Item</button> </div> ); } handleClick = () => { const items = [...this.state.items]; items[1].isDisabled = false; this.setState({ items: items }); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enableItem('Banana');","title":"enableItem(value)"},{"location":"Reference/RadioButton/#oneventname-callback","text":"Register callback for change event Parameter Name Type Required Description eventName String Yes Name of event: 'change' callback function Yes callback Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange } /> ); } handleChange = (value) => { this.setState({value}); console.log('value: ' + value); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.on('change', function(value) { console.log('on change'); });","title":"on(eventName, callBack)"},{"location":"Reference/RadioButton/#show","text":"Display the radio button. Parameter None Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) => {this.setState({value});}} isVisible={true} /> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.show();","title":"show()"},{"location":"Reference/RadioButton/#hide","text":"Hide the radio button. Parameter None Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={() => {this.setState({value});}} isVisible={false} /> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.hide();","title":"hide()"},{"location":"Reference/RadioButton/#disable","text":"Disabled the radio button. Parameter None Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.disable();","title":"disable()"},{"location":"Reference/RadioButton/#enable","text":"Enabled the radio button. Parameter None Returns None Sample React import { RadioButton } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { constructor(opts) { super(opts); var items = [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ]; this.state = { items: items, value: 'Banana' }; } render() { return ( <RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ name: \"fruit\", items: [ { label: 'Orange', value: 'Orange', isDisabled: false }, { label: 'Banana', value: 'Banana', isDisabled: true }, { label: 'Lemon', value: 'Lemon', isDisabled: true }, ], value: 'Banana' }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(radioBtn.render()); radioBtn.enable();","title":"enable()"},{"location":"Reference/Spinner/","text":"Spinner Overview Constructor Parameter None Sample React import { Spinner } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } Javascript var spinner = new kintoneUIComponent.Spinner(); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import { Spinner } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); show() Display the spinner. Parameter None Returns None Sample React import { Spinner } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); spinner.show(); hide() Hide the spinner. Parameter None Returns None Sample React import { Spinner } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={false}/> ); } } Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); spinner.hide();","title":"Spinner"},{"location":"Reference/Spinner/#spinner","text":"","title":"Spinner"},{"location":"Reference/Spinner/#overview","text":"","title":"Overview"},{"location":"Reference/Spinner/#constructor","text":"Parameter None Sample React import { Spinner } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } Javascript var spinner = new kintoneUIComponent.Spinner();","title":"Constructor"},{"location":"Reference/Spinner/#methods","text":"","title":"Methods"},{"location":"Reference/Spinner/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import { Spinner } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render());","title":"render()"},{"location":"Reference/Spinner/#show","text":"Display the spinner. Parameter None Returns None Sample React import { Spinner } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={true}/> ); } } Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); spinner.show();","title":"show()"},{"location":"Reference/Spinner/#hide","text":"Hide the spinner. Parameter None Returns None Sample React import { Spinner } from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { render() { return ( <Spinner isVisible={false}/> ); } } Javascript var spinner = new kintoneUIComponent.Spinner(); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(spinner.render()); spinner.hide();","title":"hide()"},{"location":"Reference/Table/","text":"Table Overview Number Description 1 Header of column 2 Icon button for insert row 3 Icon button for remove row 4 Child control component 5 Sample row Note Below is the list components that table supports: Text Dropdown CheckBox MultipleChoice RadioButton Label IconButton Alert Constructor Parameter Name Type Required Description options Object Yes The object contains params of constructor. options.template TableRow Yes The row template. options.header Array Yes Header content for the table. options.value Array No Value for table. Refer to the getValue() and setValue(value) for more information Sample React import React, { Component } from 'react'; import { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} onCellChange={this.handleCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> </div> ); } } Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); const dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import React, { Component } from 'react'; import { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} onCellChange={this.handleCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> </div> ); } } Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); const dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); getValue() Get value of all rows in the table. Parameter None Returns Name Type Description value Array Value of all rows in the table Sample React import React, { Component } from 'react'; import { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data; this.setState({ table: table }); console.log('data: ', data); } handleCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} onCellChange={this.handleCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> <Button text=\"get value\" onClick={() => {console.log('value: ', this.state.table.value)}} /> </div> ); } } Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); const dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var value = table.getValue(); value.forEach(rowData => { rowData.forEach(cellData => { console.log(cellData) }); }); setValue(value) Set value for every row in table. The number of rows in table's dependent on the length on this parameters. Note Below is the list components that this function supports: Text Dropdown CheckBox MultipleChoice RadioButton Parameter Name Type Required Description value Array Yes Value for every row in table Returns None Sample React import ReactDOM from 'react-dom'; import React, { Component } from 'react'; import { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} /> <Button text=\"Set value\" onClick={() => {const table = this.state.table; table.value = [['orange','red']]; this.setState({table: table})}}/> </div> ); } } Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); const dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.setValue([ ['orange', 'green'], ['orange', 'red'], ['banana', 'green'], ['banana', 'red'] ]); on(eventName, callBack) Register callback for a event Parameter Name Type Required Description eventName String Yes Name of events: 'rowAdd' The 'rowAdd' event occurs when adding a new row in the table 'rowRemove' The 'rowRemove' event occurs when removing a row in the table 'cellChange' The 'cellChange' event occurs when the value of an element bellow has been changed: Text Drodown RadioButton MultipleChoice CheckBox 'cellClick The 'cellClick' event occurs when the value of an element bellow has been clicked: Button IconButton Label Alert callback function Yes callback Returns Callback data Event Name Type Description rowAdd data Object Callback data data.tableValue Array Values of the table data.row Interger Position of the new row in the table rowRemove data object Callback data data.tableValue Array Values of the table cellChange data object Callback data data.tableValue Array Values of the table data.cell object Cell of the component which has been changed the values in the table data.cell.row Interger Row specification of the object cell data.cell.column Interger Column specification of the object cell cellClick data object Callback data data.tableValue Array Values of the table data.cell object Cell of the component which has been clicked in the table data.cell.row Interger Row specification of the object cell data.cell.column Interger Column specification of the object cell Sample React import React, { Component } from 'react'; import { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data; this.setState({ table: table }); console.log('data: ', data); } handleCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} onCellChange={this.handleCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> </div> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); var dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.on('rowRemove', function(data) { console.log(data); }) table.on('rowAdd', function(data) { console.log(data); }) table.on('cellChange', function(data) { console.log(data); }) table.on('cellClick', function(data) { console.log(data); }) show() Displayed the table Parameter None Returns None Sample React import ReactDOM from 'react-dom'; import React, { Component } from 'react'; import { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ], isVisible: false } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handlCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={this.state.table.isVisible} onCellChange={this.handlCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> <Button text=\"show\" onClick={() => { const table = this.state.table; table.isVisible = true; this.setState({table: table}); }} /> </div> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); var dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'], isVisible: false }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.show(); hide() Hide the table Parameter None Returns None Sample React import ReactDOM from 'react-dom'; import React, { Component } from 'react'; import { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ], isVisible: true } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handlCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={this.state.table.isVisible} onCellChange={this.handlCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> <Button text=\"hide\" onClick={() => { const table = this.state.table; table.isVisible = false; this.setState({table: table}); }} /> </div> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); var dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.hide();","title":"Table"},{"location":"Reference/Table/#table","text":"","title":"Table"},{"location":"Reference/Table/#overview","text":"Number Description 1 Header of column 2 Icon button for insert row 3 Icon button for remove row 4 Child control component 5 Sample row Note Below is the list components that table supports: Text Dropdown CheckBox MultipleChoice RadioButton Label IconButton Alert","title":"Overview"},{"location":"Reference/Table/#constructor","text":"Parameter Name Type Required Description options Object Yes The object contains params of constructor. options.template TableRow Yes The row template. options.header Array Yes Header content for the table. options.value Array No Value for table. Refer to the getValue() and setValue(value) for more information Sample React import React, { Component } from 'react'; import { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} onCellChange={this.handleCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> </div> ); } } Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); const dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] });","title":"Constructor"},{"location":"Reference/Table/#methods","text":"","title":"Methods"},{"location":"Reference/Table/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import React, { Component } from 'react'; import { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} onCellChange={this.handleCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> </div> ); } } Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); const dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render());","title":"render()"},{"location":"Reference/Table/#getvalue","text":"Get value of all rows in the table. Parameter None Returns Name Type Description value Array Value of all rows in the table Sample React import React, { Component } from 'react'; import { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data; this.setState({ table: table }); console.log('data: ', data); } handleCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} onCellChange={this.handleCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> <Button text=\"get value\" onClick={() => {console.log('value: ', this.state.table.value)}} /> </div> ); } } Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); const dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); var value = table.getValue(); value.forEach(rowData => { rowData.forEach(cellData => { console.log(cellData) }); });","title":"getValue()"},{"location":"Reference/Table/#setvaluevalue","text":"Set value for every row in table. The number of rows in table's dependent on the length on this parameters. Note Below is the list components that this function supports: Text Dropdown CheckBox MultipleChoice RadioButton Parameter Name Type Required Description value Array Yes Value for every row in table Returns None Sample React import ReactDOM from 'react-dom'; import React, { Component } from 'react'; import { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} /> <Button text=\"Set value\" onClick={() => {const table = this.state.table; table.value = [['orange','red']]; this.setState({table: table})}}/> </div> ); } } Javascript const radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); const dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.setValue([ ['orange', 'green'], ['orange', 'red'], ['banana', 'green'], ['banana', 'red'] ]);","title":"setValue(value)"},{"location":"Reference/Table/#oneventname-callback","text":"Register callback for a event Parameter Name Type Required Description eventName String Yes Name of events: 'rowAdd' The 'rowAdd' event occurs when adding a new row in the table 'rowRemove' The 'rowRemove' event occurs when removing a row in the table 'cellChange' The 'cellChange' event occurs when the value of an element bellow has been changed: Text Drodown RadioButton MultipleChoice CheckBox 'cellClick The 'cellClick' event occurs when the value of an element bellow has been clicked: Button IconButton Label Alert callback function Yes callback Returns Callback data Event Name Type Description rowAdd data Object Callback data data.tableValue Array Values of the table data.row Interger Position of the new row in the table rowRemove data object Callback data data.tableValue Array Values of the table cellChange data object Callback data data.tableValue Array Values of the table data.cell object Cell of the component which has been changed the values in the table data.cell.row Interger Row specification of the object cell data.cell.column Interger Column specification of the object cell cellClick data object Callback data data.tableValue Array Values of the table data.cell object Cell of the component which has been clicked in the table data.cell.row Interger Row specification of the object cell data.cell.column Interger Column specification of the object cell Sample React import React, { Component } from 'react'; import { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ] } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data; this.setState({ table: table }); console.log('data: ', data); } handleCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={true} onCellChange={this.handleCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> </div> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); var dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.on('rowRemove', function(data) { console.log(data); }) table.on('rowAdd', function(data) { console.log(data); }) table.on('cellChange', function(data) { console.log(data); }) table.on('cellClick', function(data) { console.log(data); })","title":"on(eventName, callBack)"},{"location":"Reference/Table/#show","text":"Displayed the table Parameter None Returns None Sample React import ReactDOM from 'react-dom'; import React, { Component } from 'react'; import { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ], isVisible: false } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handlCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={this.state.table.isVisible} onCellChange={this.handlCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> <Button text=\"show\" onClick={() => { const table = this.state.table; table.isVisible = true; this.setState({table: table}); }} /> </div> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); var dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'], isVisible: false }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.show();","title":"show()"},{"location":"Reference/Table/#hide","text":"Hide the table Parameter None Returns None Sample React import ReactDOM from 'react-dom'; import React, { Component } from 'react'; import { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component'; class App extends Component { constructor(props) { super(props); const fruit = [ { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' } ]; const color = [ { label: 'Red', value: 'red' }, { label: 'Green', value: 'green' } ]; this.state = { fruit: fruit, table: { header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'], rowTemplate: [ <RadioButton name=\"fruit\" items={fruit} value={fruit.value} isVisible={true} isDisabled={false} />, <Dropdown items={color} isVisible={true} isDisabled={false} />, <Button text=\"button\" isVisible={true} isDisabled={false} />, <IconButton /> ], isVisible: true } } } handleRowAdd = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleRowRemove = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handlCellChange = (data) => { const table = this.state.table; table.value = data.tableValue; this.setState({ table: table }); console.log('data: ', data); } handleCellClick = (data) => { console.log('data: ', data); } render() { return ( <div> <Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate} value={this.state.table.value} isVisible={this.state.table.isVisible} onCellChange={this.handlCellChange} onRowAdd={this.handleRowAdd} onRowRemove={this.handleRowRemove} onCellClick={this.handleCellClick} /> <Button text=\"hide\" onClick={() => { const table = this.state.table; table.isVisible = false; this.setState({table: table}); }} /> </div> ); } } Javascript var radioBtn = new kintoneUIComponent.RadioButton({ items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}], value: 'orange', name: 'Fruit' }); var dropdown = new kintoneUIComponent.Dropdown({ items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}], value: 'green' }) var table = new kintoneUIComponent.Table({ rowTemplate: [radioBtn, dropdown], header: ['Fruit', 'Color'] }); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(table.render()); table.hide();","title":"hide()"},{"location":"Reference/Text/","text":"Text Overview Constructor Parameter Name Type Required Description options Object No The object contains params of constructor. options.value String No The value of text field. options.isDisabled Boolean No The text field will be disabled. Default value: 'false' options.isVisible Boolean No The text field will be visible. Default value: 'true' Sample React import {Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var text= new kintoneUIComponent.Text({value: '12345'}); Methods render() Get dom element of component. Parameter None Returns Dom element Sample React import {Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); setValue(value) Set the value of text field. Parameter Name Type Required Description text String Yes The value of text field. Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <div> <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ value: 'samp 1' }); }; } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.setValue('input text'); getValue() Get the value of text field. Parameter None Returns Name Type Description value String The value of text field. Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <div> <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { console.log(this.state.value); }; } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.getValue(); on(eventName, callBack) Register callback for a event of component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes callback Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} onClick={() => {console.log('click')}} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.on('click', function(event) { console.log('on click'); }); show() Display the Text field. Parameter None Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.show(); hide() Hide the Text field. Parameter None Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.hide(); disable() Disabled the Text field. Parameter None Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.disable(); enable() Enabled the Text field. Parameter None Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.enable();","title":"Text"},{"location":"Reference/Text/#text","text":"","title":"Text"},{"location":"Reference/Text/#overview","text":"","title":"Overview"},{"location":"Reference/Text/#constructor","text":"Parameter Name Type Required Description options Object No The object contains params of constructor. options.value String No The value of text field. options.isDisabled Boolean No The text field will be disabled. Default value: 'false' options.isVisible Boolean No The text field will be visible. Default value: 'true' Sample React import {Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var text= new kintoneUIComponent.Text({value: '12345'});","title":"Constructor"},{"location":"Reference/Text/#methods","text":"","title":"Methods"},{"location":"Reference/Text/#render","text":"Get dom element of component. Parameter None Returns Dom element Sample React import {Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: ''} render() { return ( <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> ); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render());","title":"render()"},{"location":"Reference/Text/#setvaluevalue","text":"Set the value of text field. Parameter Name Type Required Description text String Yes The value of text field. Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <div> <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { this.setState({ value: 'samp 1' }); }; } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.setValue('input text');","title":"setValue(value)"},{"location":"Reference/Text/#getvalue","text":"Get the value of text field. Parameter None Returns Name Type Description value String The value of text field. Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <div> <Text value={this.state.value} onChange={(value) => {this.setState({value})}} /> <button onClick={this.handleClick}>Click</button> </div> ); } handleClick= () => { console.log(this.state.value); }; } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.getValue();","title":"getValue()"},{"location":"Reference/Text/#oneventname-callback","text":"Register callback for a event of component Parameter Name Type Required Description eventName String Yes Name of event: 'click' 'change' callback function Yes callback Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} onClick={() => {console.log('click')}} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.on('click', function(event) { console.log('on click'); });","title":"on(eventName, callBack)"},{"location":"Reference/Text/#show","text":"Display the Text field. Parameter None Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.show();","title":"show()"},{"location":"Reference/Text/#hide","text":"Hide the Text field. Parameter None Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.hide();","title":"hide()"},{"location":"Reference/Text/#disable","text":"Disabled the Text field. Parameter None Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.disable();","title":"disable()"},{"location":"Reference/Text/#enable","text":"Enabled the Text field. Parameter None Returns None Sample React import { Text} from 'kintone-ui-component'; import React from 'react'; export default class Plugin extends React.Component { state = { value: '1'} render() { return ( <Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /> ); } handleChange(value) { this.setState({value}); console.log('value: ' + value); } } Javascript var text = new kintoneUIComponent.Text({value: 'input text'}); var body = document.getElementsByTagName(\"BODY\")[0]; body.appendChild(text.render()); text.enable();","title":"enable()"}]}